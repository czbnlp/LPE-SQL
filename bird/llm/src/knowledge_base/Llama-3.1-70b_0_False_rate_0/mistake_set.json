[
    {
        "question": "In 2012, who had the least consumption in LAM?",
        "hint": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T1.Segment = 'LAM' ORDER BY T2.Consumption ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "hint": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "error_sql": "SELECT SUBSTR(Date, 1, 6) \nFROM yearmonth \nJOIN customers ON yearmonth.CustomerID = customers.CustomerID \nWHERE SUBSTR(Date, 1, 4) = '2013' AND Segment = 'SME' \nORDER BY Consumption DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "hint": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT \n    (SME - LAM) AS SME_LAM, \n    (LAM - KAM) AS LAM_KAM, \n    (KAM - SME) AS KAM_SME\nFROM (\n    SELECT \n        AVG(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption END) AS SME,\n        AVG(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption END) AS LAM,\n        AVG(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption END) AS KAM\n    FROM customers T1\n    INNER JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID\n    WHERE T2.Date BETWEEN '201301' AND '201312'\n    AND T1.Currency = 'CZK'\n)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "difficulty": "challenging"
    },
    {
        "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "hint": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
        "error_sql": "SELECT \n    Segment, \n    MAX(PercentageIncrease) AS MaxPercentageIncrease, \n    MIN(PercentageIncrease) AS MinPercentageIncrease\nFROM (\n    SELECT \n        c.Segment, \n        ((y2.Consumption - y1.Consumption) / y2.Consumption) * 100 AS PercentageIncrease\n    FROM \n        customers c\n    JOIN \n        yearmonth y1 ON c.CustomerID = y1.CustomerID AND y1.Date LIKE '2012%'\n    JOIN \n        yearmonth y2 ON c.CustomerID = y2.CustomerID AND y2.Date LIKE '2013%'\n    WHERE \n        c.Currency = 'EUR'\n)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
        "difficulty": "challenging"
    },
    {
        "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
        "hint": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia",
        "error_sql": "SELECT \n    SUM(IIF(T1.Country = 'CZE' AND T1.Segment = 'discount', 1, 0)) - \n    SUM(IIF(T1.Country = 'SVK' AND T1.Segment = 'discount', 1, 0)) \nFROM gasstations T1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
        "difficulty": "simple"
    },
    {
        "question": "What is the highest monthly consumption in the year 2012?",
        "hint": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "error_sql": "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
        "hint": "'2012/8/24' can be represented by '2012-08-24'",
        "error_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Amount = 548.4",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price  = 548.4",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
        "hint": "",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Segment) FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Country = 'SVK'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
        "difficulty": "simple"
    },
    {
        "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
        "hint": "January 2012 refers to the Date value = '201201'",
        "error_sql": "SELECT SUM(T1.Amount) AS TotalAmount, SUM(CASE WHEN T2.Date = '201201' THEN T1.Amount ELSE 0 END) AS January2012Amount\nFROM transactions_1k T1\nJOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID\nWHERE T1.CustomerID = 38508",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(T1.Price ) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
        "difficulty": "moderate"
    },
    {
        "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
        "hint": "average price per single item = Total(price) / Total(amount)",
        "error_sql": "SELECT T1.CustomerID, AVG(T2.Price / T2.Amount) AS AveragePrice, T1.Currency \nFROM customers AS T1 \nJOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID \nGROUP BY T1.CustomerID, T1.Currency \nORDER BY SUM(T2.Price) DESC \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "difficulty": "moderate"
    },
    {
        "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "hint": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
        "error_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "difficulty": "moderate"
    },
    {
        "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
        "hint": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
        "error_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type != 'fundraiser' GROUP BY T1.event_name HAVING COUNT(T2.link_to_event) > 20",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
        "difficulty": "moderate"
    },
    {
        "question": "Was each expense in October Meeting on October 8, 2019 approved?",
        "hint": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
        "error_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
        "hint": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
        "error_sql": "SELECT \n    SUM(IIF(SUBSTR(event_date, 1, 4) = '2019', T1.spent, 0)) - \n    SUM(IIF(SUBSTR(event_date, 1, 4) = '2020', T1.spent, 0)) \nFROM \n    budget AS T1 \nINNER JOIN \n    event AS T2 ON T1.link_to_event = T2.event_id \nWHERE \n    T2.type = 'Student_Club'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "difficulty": "moderate"
    },
    {
        "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
        "hint": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status",
        "error_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-8-20'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
        "difficulty": "moderate"
    },
    {
        "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "hint": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
        "error_sql": "SELECT COUNT(*) FROM (\n    SELECT \n        CASE \n            WHEN event_name = 'Yearly Kickoff' THEN amount \n            ELSE 0 \n        END AS yearly_amount,\n        CASE \n            WHEN event_name = 'October Meeting' THEN amount \n            ELSE 0 \n        END AS october_amount\n    FROM budget AS b\n    INNER JOIN event AS e ON b.link_to_event = e.event_id\n    WHERE b.category = 'Advertisement'\n) AS subquery\nWHERE yearly_amount > october_amount",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "difficulty": "challenging"
    },
    {
        "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
        "hint": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "error_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id INNER JOIN budget AS T4 ON T3.event_id = T4.link_to_event WHERE T3.event_name = 'Yearly Kickoff'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "difficulty": "moderate"
    },
    {
        "question": "Which event has the lowest cost?",
        "hint": "event refers to event_name; lowest cost means MIN(cost)",
        "error_sql": "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 ON T1.event_id = T2.link_to_event \nORDER BY T2.spent \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
        "hint": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
        "error_sql": "SELECT CASE \n    WHEN COUNT(T1.link_to_member) > 0 THEN 'Yes' \n    ELSE 'No' \nEND AS result \nFROM attendance AS T1 \nJOIN member AS T2 ON T1.link_to_member = T2.member_id \nJOIN event AS T3 ON T1.link_to_event = T3.event_id \nWHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
        "hint": "total value refers to SUM(cost); 'October Meeting' is an event name;",
        "error_sql": "SELECT T2.expense_description, SUM(T2.cost) \nFROM event AS T1 \nINNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget \nINNER JOIN budget AS T3 ON T2.link_to_budget = T3.budget_id \nWHERE T1.event_name = 'October Meeting' AND T2.approved = 'true'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
        "difficulty": "moderate"
    },
    {
        "question": "State the category of events were held at MU 215.",
        "hint": "'MU 215' is the location of event; ",
        "error_sql": "SELECT type FROM event WHERE location = 'MU 215'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "difficulty": "simple"
    },
    {
        "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
        "hint": "'Environmental Engineering' is the major_name;",
        "error_sql": "SELECT T2.last_name, T1.major_name, T1.department, T1.college \nFROM major AS T1 \nINNER JOIN member AS T2 \nON T1.major_id = T2.link_to_major \nWHERE T1.major_name = 'Environmental Engineering'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
        "hint": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
        "error_sql": "SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
        "difficulty": "moderate"
    },
    {
        "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
        "hint": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
        "error_sql": "SELECT T1.first_name, T1.last_name, T2.expense_description, T2.cost \nFROM member AS T1 \nINNER JOIN expense AS T2 \nON T1.member_id = T2.link_to_member \nWHERE T2.expense_description = 'Water, Veggie tray, supplies'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
        "difficulty": "challenging"
    },
    {
        "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
        "hint": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
        "error_sql": "SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '9/9/2019'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "difficulty": "challenging"
    },
    {
        "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
        "hint": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX\u00a0 = 'M' and Admission = '-')",
        "error_sql": "SELECT \n    (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) * 100.0 / \n    COUNT(CASE WHEN SEX = 'M' THEN ID END) AS deviation_percentage\nFROM Patient",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question": "State the ID and age of patient with positive degree of coagulation.",
        "hint": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
        "error_sql": "SELECT T1.ID, (strftime('%J', 'now') - strftime('%J', T1.Birthday)) / 365.25 AS Age \nFROM Patient AS T1 \nINNER JOIN Examination AS T2 ON T1.ID = T2.ID \nWHERE T2.RVVT = '+'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
        "hint": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL",
        "error_sql": "SELECT T1.Symptoms, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T2.Birthday DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "hint": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "error_sql": "SELECT MAX(T2.Date), (strftime('%Y', T1.`First Date`) - strftime('%Y', T1.Birthday)) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'SJS'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
        "hint": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
        "error_sql": "SELECT COUNT(T1.ID) \nFROM Patient AS T1 \nINNER JOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE STRFTIME('%Y', T1.Birthday) + 18 > STRFTIME('%Y', T2.`Examination Date`) \nAND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
        "difficulty": "challenging"
    },
    {
        "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
        "hint": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
        "error_sql": "SELECT (strftime('%Y', T1.`Examination Date`) - strftime('%Y', T2.Birthday)) AS Age, T1.Diagnosis \nFROM Examination AS T1 \nINNER JOIN Patient AS T2 ON T1.ID = T2.ID \nINNER JOIN Laboratory AS T3 ON T1.ID = T3.ID \nWHERE T3.HGB = (SELECT MAX(HGB) FROM Laboratory)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
        "hint": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
        "error_sql": "SELECT T2.`aCL IgM` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.Description = '1994-02-19' AND T2.`Examination Date` = '1993-11-12'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
        "difficulty": "moderate"
    },
    {
        "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
        "hint": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; ",
        "error_sql": "SELECT T1.ID, T1.SEX, T1.Birthday, T1.Description, T1.`First Date`, T1.Admission, T1.Diagnosis \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Admission = '-' AND T2.Date LIKE '1991-10%' AND T2.`T-BIL` < 2.0",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
        "difficulty": "challenging"
    },
    {
        "question": "Was the patient with the number 57266's uric acid within a normal range?",
        "hint": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
        "error_sql": "SELECT CASE WHEN (SELECT UA FROM Laboratory WHERE ID = 57266) > (CASE (SELECT SEX FROM Patient WHERE ID = 57266) WHEN 'M' THEN 8.0 ELSE 6.5 END) THEN 'Yes' ELSE 'No' END",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
        "difficulty": "moderate"
    },
    {
        "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
        "hint": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
        "error_sql": "SELECT SEX, GROUP_CONCAT(DISTINCT P.ID) FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average age of the male patient with high cholesterol?",
        "hint": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
        "error_sql": "SELECT AVG(STRFTIME('%J', T1.`First Date`) - STRFTIME('%J', T1.Birthday)) / 365.25 \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' AND T2.`T-CHO` >= 250",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
        "hint": "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.TG >= 200 AND STRFTIME('%Y', T1.Birthday) < STRFTIME('%Y', 'now') - 50",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
        "difficulty": "moderate"
    },
    {
        "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
        "hint": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; ",
        "error_sql": "SELECT T1.ID, T1.SEX, STRFTIME('%J', 'now') - STRFTIME('%J', T1.Birthday) AS age \nFROM Patient AS T1 \nJOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
        "difficulty": "challenging"
    },
    {
        "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
        "hint": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
        "error_sql": "SELECT T1.Diagnosis, T1.ID, strftime('%J', 'now') - strftime('%J', T1.Birthday) AS Age \nFROM Patient AS T1 \nJOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.RBC < 3.5",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
        "hint": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;",
        "error_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'SLE' AND T3.HGB > 10 AND T3.HGB < 17 ORDER BY T1.Birthday LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
        "hint": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
        "error_sql": "SELECT T1.ID, (strftime('%J', 'now') - strftime('%J', T1.Birthday)) / 365.25 AS Age \nFROM Patient AS T1 \nJOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.HCT >= 52 \nGROUP BY T1.ID, T1.Birthday \nHAVING COUNT(T2.ID) > 2",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
        "difficulty": "challenging"
    },
    {
        "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
        "hint": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
        "error_sql": "SELECT \n    SUM(IIF(PLT < 100, 1, 0)) AS lower_than_normal,\n    SUM(IIF(PLT > 400, 1, 0)) AS higher_than_normal,\n    SUM(IIF(PLT < 100, 1, 0)) - SUM(IIF(PLT > 400, 1, 0)) AS comparison\nFROM Laboratory",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
        "difficulty": "challenging"
    },
    {
        "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
        "hint": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
        "error_sql": "SELECT T1.ID, T1.SEX, T1.Birthday \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE STRFTIME('%Y', T2.Date) = '1984' \nAND STRFTIME('%Y', T1.Birthday) < STRFTIME('%Y', 'now') - 50 \nAND T2.PLT BETWEEN 100 AND 400",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
        "difficulty": "challenging"
    },
    {
        "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
        "hint": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
        "error_sql": "SELECT CAST(SUM(IIF(SEX = 'F' AND PT >= 14, 1, 0)) AS REAL) * 100 / SUM(IIF(PT >= 14, 1, 0)) FROM Patient AS p INNER JOIN Laboratory AS l ON p.ID = l.ID WHERE STRFTIME('%J', 'now') - STRFTIME('%J', Birthday) > 55 * 365",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
        "difficulty": "challenging"
    },
    {
        "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
        "hint": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients with an Ig G higher than normal?",
        "hint": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
        "difficulty": "simple"
    },
    {
        "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
        "hint": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nINNER JOIN Examination AS T3 \nON T1.ID = T3.ID \nWHERE T2.IGG > 900 AND T2.IGG < 2000 AND T3.Symptoms IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
        "hint": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.IGA > 80 AND T2.IGA < 500 AND STRFTIME('%Y', T1.`First Date`) >= 1990",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
        "hint": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
        "error_sql": "SELECT T.Diagnosis FROM ( SELECT T1.Diagnosis, COUNT(T1.Diagnosis) as cnt FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM <= 40 OR T2.IGM >= 400 GROUP BY T1.Diagnosis ) AS T ORDER BY T.cnt DESC LIMIT 1",
        "compiler_hint": "no such column: Diagnosis",
        "reflective_cot": "**Error Reflection:**\n\nThe error occurred because the `Diagnosis` column is not present in the `Laboratory` table. The original query attempted to access this column directly from the `Laboratory` table, resulting in a \"no such column\" error.\n\n**Corrected SQL:**\n\nThe corrected SQL query joins the `Examination` table (which contains the `Diagnosis` column) with the `Laboratory` table (which contains the `IGM` column). This allows us to access both columns and perform the desired query.\n\n**Tip:**\n\nTo avoid making the same mistake in the future, always verify the table schema and ensure that the column you're trying to access exists in the table you're querying. If the column is present in another table, consider joining the tables to access the required data.",
        "ground_truth_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
        "hint": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
        "error_sql": "SELECT COUNT(ID) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE CRP = '+') AND Description IS NULL",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
        "hint": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.CRE >= 1.5 AND STRFTIME('%J', T1.Birthday) > STRFTIME('%J', DATE('now')) - 70 * 365",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
        "hint": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
        "hint": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
        "error_sql": "SELECT COUNT(T1.ID) \nFROM Examination AS T1 \nINNER JOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.SM IN ('-', '+-') AND T1.Thrombosis = 0",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
        "hint": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
        "hint": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Examination AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.CPK < 250 AND (T1.KCT = '+' OR T1.RVVT = '+' OR T1.LAC = '+')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
        "difficulty": "challenging"
    },
    {
        "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
        "hint": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
        "error_sql": "SELECT T1.team_long_name, T1.team_short_name, T2.buildUpPlaySpeed \nFROM Team AS T1 \nINNER JOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nORDER BY T2.buildUpPlaySpeed DESC \nLIMIT 4",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
        "difficulty": "moderate"
    },
    {
        "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
        "hint": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; ",
        "error_sql": "SELECT CAST(STRFTIME('%J', '2024-07-26') - STRFTIME('%J', T2.birthday) AS INTEGER) / 365.25 AS age \nFROM Player_Attributes AS T1 \nINNER JOIN Player AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.sprint_speed >= 97 AND CAST(STRFTIME('%Y', T1.date) AS INTEGER) BETWEEN 2013 AND 2015",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
        "difficulty": "challenging"
    },
    {
        "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
        "hint": " league with highest matches of all time refers to MAX(COUNT(league_id));",
        "error_sql": "SELECT T1.name, COUNT(T2.league_id) FROM League AS T1 INNER JOIN `Match` AS T2 ON T1.id = T2.league_id GROUP BY T1.name ORDER BY COUNT(T2.league_id) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "hint": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
        "error_sql": "SELECT COUNT(Player.player_api_id) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'left' AND STRFTIME('%Y', Player.birthday) BETWEEN '1987' AND '1992'",
        "compiler_hint": "no such column: preferred_foot",
        "reflective_cot": "**Error Analysis**\n\nThe error encountered in the SQL query is due to the fact that the `preferred_foot` column does not exist in the `Player` table. Instead, it exists in the `Player_Attributes` table.\n\n**Corrected SQL**\n\nThe corrected SQL query joins the `Player` table with the `Player_Attributes` table on the `player_api_id` column, allowing us to access the `preferred_foot` column. Additionally, the `STRFTIME` function is used to extract the year from the `birthday` column, enabling the comparison between years.\n\n**Tip to Avoid Similar Mistakes**\n\nWhen writing SQL queries, always ensure that you are referencing the correct table and column names. If you're unsure, check the database schema or use a query to retrieve the table structure. In this case, the error could have been avoided by verifying that the `preferred_foot` column exists in the `Player` table before executing the query.\n\n**Corrected SQL to Calculate Percentage**\n\nTo calculate the percentage of players who prefer left foot and were born between 1987 and 1992, you can use the following query:\n\n```sql\nSELECT \n  (COUNT(Player.player_api_id) * 100) / \n  (SELECT COUNT(player_api_id) FROM Player WHERE STRFTIME('%Y', birthday) BETWEEN '1987' AND '1992')\nFROM \n  Player \n  INNER JOIN Player_Attributes \n    ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE \n  Player_Attributes.preferred_foot = 'left' \n  AND STRFTIME('%Y', Player.birthday) BETWEEN '1987' AND '1992'\n```",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "difficulty": "challenging"
    },
    {
        "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
        "hint": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));",
        "error_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
        "hint": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'",
        "error_sql": "SELECT T2.name FROM ( SELECT T1.league_id, SUM(T1.home_team_goal) / COUNT(DISTINCT T1.id) - SUM(T1.away_team_goal) / COUNT(DISTINCT T1.id) AS goal_diff FROM `Match` AS T1 WHERE T1.season = '2009/2010' GROUP BY T1.league_id HAVING SUM(T1.home_team_goal) / COUNT(DISTINCT T1.id) - SUM(T1.away_team_goal) / COUNT(DISTINCT T1.id) > 0 ) AS T3 INNER JOIN League AS T2 ON T3.league_id = T2.id",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
        "difficulty": "challenging"
    },
    {
        "question": "Who has the highest average finishing rate between the highest and shortest football player?",
        "hint": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
        "error_sql": "SELECT MAX(AVG(finishing)) FROM Player \nINNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE height = (SELECT MAX(height) FROM Player) OR height = (SELECT MIN(height) FROM Player)",
        "compiler_hint": "misuse of aggregate function AVG()",
        "reflective_cot": "**Error Reflection**\n\nThe error in the original SQL query is the misuse of the aggregate function `AVG()`. The `AVG()` function is used to calculate the average value of a column, but in this case, it is used inside the `MAX()` function, which is not allowed.\n\n**Corrected SQL**\n\nThe corrected SQL query is:\n```sql\nSELECT MAX(AVG(finishing)) \nFROM Player \nINNER JOIN Player_Attributes \nON Player.player_api_id = Player_Attributes.player_api_id \nWHERE height = (SELECT MAX(height) FROM Player) OR height = (SELECT MIN(height) FROM Player)\n```\nHowever, this query still won't work as expected because `MAX(AVG(finishing))` is not a valid syntax. Instead, we should use a subquery to calculate the average finishing rate for each group of players with the maximum or minimum height, and then use the `MAX()` function to get the highest average finishing rate.\n\n**Corrected SQL (final version)**\n```sql\nSELECT MAX(avg_finishing) \nFROM (\n  SELECT AVG(finishing) as avg_finishing \n  FROM Player \n  INNER JOIN Player_Attributes \n  ON Player.player_api_id = Player_Attributes.player_api_id \n  WHERE height = (SELECT MAX(height) FROM Player) OR height = (SELECT MIN(height) FROM Player)\n  GROUP BY height\n) subquery\n```\n**Tip**\n\nTo avoid making the same mistake in the future, remember to use aggregate functions correctly. When using `AVG()`, `MAX()`, or other aggregate functions, make sure to use them in a way that makes sense for your query. If you need to calculate an average value for each group of rows, use a subquery or a `GROUP BY` clause. If you need to get the maximum or minimum value of an average value, use a subquery with a `MAX()` or `MIN()` function.",
        "ground_truth_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
        "hint": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
        "error_sql": "SELECT SUM(T2.overall_rating) / COUNT(T2.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 170 AND strftime('%Y', T2.date) BETWEEN '2010' AND '2015'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
        "hint": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
        "error_sql": "SELECT SUM(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.id ELSE NULL END) - SUM(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.id ELSE NULL END) FROM Player_Attributes PA INNER JOIN Player P ON PA.player_api_id = P.player_api_id",
        "compiler_hint": "ambiguous column name: id",
        "reflective_cot": "### Reflection on the Error\n\nThe error \"ambiguous column name: id\" occurs because the SQL query references two tables, `Player_Attributes` and `Player`, both of which have a column named `id`. When the query attempts to `COUNT(CASE WHEN ... THEN id ELSE NULL END)`, it does not specify which `id` column to use, resulting in ambiguity.\n\n### Corrected SQL\n\nTo resolve the error, we need to specify the table from which to select the `id` column. In this case, we want to count the `id` from the `Player_Attributes` table, so we use `PA.id` instead of just `id`.\n\n### Tip to Avoid the Mistake\n\nWhen joining multiple tables, always use table aliases (e.g., `PA` for `Player_Attributes` and `P` for `Player`) and prefix column names with the corresponding table alias to avoid ambiguity. This will help you clearly specify which column to use and prevent errors like this in the future.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question": "Give the name of the league had the most matches in the 2008/2009 season?",
        "hint": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');",
        "error_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
        "difficulty": "simple"
    },
    {
        "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
        "hint": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
        "error_sql": "SELECT CAST((SELECT overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Ariel Borysiuk' ORDER BY T1.date DESC LIMIT 1) - (SELECT overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Paulin Puel' ORDER BY T1.date DESC LIMIT 1) AS REAL) * 100 / (SELECT overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Paulin Puel' ORDER BY T1.date DESC LIMIT 1)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "hint": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "error_sql": "SELECT date FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') ORDER BY crossing DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
        "hint": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
        "error_sql": "SELECT CAST(((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013/7/12') - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013/7/12')) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013/7/12')) * 100 AS REAL)",
        "compiler_hint": "no such function: SUBTRACT",
        "reflective_cot": "The error encountered in the SQL query is due to the use of the non-existent `SUBTRACT` function. SQLite does not have a built-in `SUBTRACT` function. Instead, the `-` operator is used for subtraction.\n\nCorrected SQL:\n```sql\nSELECT CAST(((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013/7/12') - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013/7/12')) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013/7/12')) * 100 AS REAL)\n```\n\nTip: Always refer to the official documentation of the SQL dialect you are using to ensure that you are using the correct functions and operators. In this case, the SQLite documentation should be consulted to confirm the correct way to perform subtraction.",
        "ground_truth_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
        "difficulty": "challenging"
    },
    {
        "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
        "hint": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
        "error_sql": "SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 4",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 4",
        "difficulty": "moderate"
    },
    {
        "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
        "hint": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
        "error_sql": "SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.weight DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
        "hint": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
        "error_sql": "SELECT CAST(SUM(IIF(height < 180 AND (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = Player.id ORDER BY date DESC LIMIT 1) > 70, 1, 0)) AS REAL) * 100 / COUNT(id) FROM Player",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70  AND t1.height < 180 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ",
        "difficulty": "moderate"
    },
    {
        "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
        "hint": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
        "error_sql": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 AND T2.q1 IN (SELECT MAX(q1) FROM qualifying WHERE raceId = 20)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
        "hint": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
        "error_sql": "SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "hint": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
        "error_sql": "SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 LIKE '0:01:54%'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
        "difficulty": "simple"
    },
    {
        "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
        "hint": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT T1.forename, T1.surname, T1.dob \nFROM drivers AS T1 \nINNER JOIN results AS T2 ON T1.driverId = T2.driverId \nWHERE T2.raceId = 592 AND T2.time IS NOT NULL \nORDER BY T1.dob ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "hint": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
        "error_sql": "SELECT T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time LIKE '1:27%' AND T2.raceId = 161",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "difficulty": "moderate"
    },
    {
        "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
        "hint": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
        "error_sql": "SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 = '0:01:33'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
        "difficulty": "simple"
    },
    {
        "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
        "hint": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
        "error_sql": "SELECT T1.forename, T1.surname, T1.dob \nFROM drivers AS T1 \nINNER JOIN results AS T2 ON T1.driverId = T2.driverId \nWHERE T2.raceId = 872 AND T2.time IS NOT NULL \nORDER BY T1.dob DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "hint": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
        "error_sql": "SELECT CAST((r1.fastestLapSpeed - r2.fastestLapSpeed) AS REAL) * 100 / r1.fastestLapSpeed FROM results r1 \nJOIN drivers d1 ON r1.driverId = d1.driverId \nJOIN results r2 ON r2.raceId = r1.raceId + 1 \nJOIN drivers d2 ON r2.driverId = d2.driverId \nWHERE d1.forename = 'Paul' AND d1.surname = 'di Resta' AND r1.raceId = 853",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "hint": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
        "error_sql": "SELECT T1.forename, T1.surname, T3.name, T2.milliseconds \nFROM drivers AS T1 \nINNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId \nINNER JOIN races AS T3 ON T2.raceId = T3.raceId \nORDER BY T2.milliseconds ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
        "hint": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Hamilton' AND T3.year >= 2010",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
        "difficulty": "challenging"
    },
    {
        "question": "How old is the youngest Japanese driver? What is his name?",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "error_sql": "SELECT forename, surname, STRFTIME('%J', dob) - STRFTIME('%J', 'now') AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which race was Alex Yoong in when he was in track number less than 20?",
        "hint": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
        "error_sql": "SELECT T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Alex' AND T1.surname = 'Yoong' AND T2.position < 20",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
        "difficulty": "simple"
    },
    {
        "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
        "hint": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T2.name, T2.year FROM results AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nINNER JOIN drivers AS T3 ON T1.driverId = T3.driverId \nWHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' AND T1.fastestLap = 1",
        "compiler_hint": "no such column: T3.name",
        "reflective_cot": "The error in the SQL query is due to referencing a non-existent column 'name' in the 'drivers' table. The correct column to reference is 'name' in the 'races' table.\n\nThe corrected SQL query correctly references the 'name' column in the 'races' table.\n\nTip: Always verify the column names in the tables being queried to avoid referencing non-existent columns.",
        "ground_truth_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "hint": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T1.name, T3.points \nFROM circuits AS T1 \nINNER JOIN races AS T2 ON T1.circuitId = T2.circuitId \nINNER JOIN results AS T3 ON T2.raceId = T3.raceId \nINNER JOIN drivers AS T4 ON T3.driverId = T4.driverId \nWHERE T4.forename = 'Lewis' AND T4.surname = 'Hamilton' \nORDER BY T2.year \nLIMIT 1",
        "compiler_hint": "no such column: T2.points",
        "reflective_cot": "**Error Analysis**\n\nThe error occurred because the `points` column was referenced from the wrong table alias (`T2` instead of `T3`). The `points` column is actually part of the `results` table, which is aliased as `T3`.\n\n**Corrected SQL**\n\nThe corrected SQL query references the `points` column from the correct table alias (`T3`).\n\n**Tip to Avoid Similar Mistakes**\n\nWhen writing SQL queries with multiple joins, double-check that you're referencing columns from the correct table aliases. To avoid mistakes, make sure to:\n\n1. Clearly define table aliases.\n2. Verify column names and their corresponding table aliases.\n3. Use consistent naming conventions for table aliases.\n\nBy following these best practices, you can reduce the likelihood of errors and write more accurate SQL queries.",
        "ground_truth_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
        "hint": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
        "error_sql": "SELECT SUM(IIF(c.country = 'Germany', 1, 0)) * 100 / COUNT(r.raceId) FROM races r INNER JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'European Grand Prix'",
        "compiler_hint": "no such column: r.country",
        "reflective_cot": "**Error Analysis**\n\nThe error occurs because the `country` column is not present in the `races` table. Instead, it's located in the `circuits` table, which is referenced by the `circuitId` foreign key in the `races` table.\n\n**Corrected SQL**\n\nThe corrected SQL query joins the `races` table with the `circuits` table on the `circuitId` column, allowing access to the `country` column.\n\n**Tip to Avoid Similar Mistakes**\n\nWhen writing SQL queries, always verify the table schema and ensure that the columns you're referencing exist in the correct tables. If a column is not present in the table, check for foreign key relationships that may allow you to join with another table to access the required column.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question": "Which country is the oldest driver from?",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT T2.country FROM drivers AS T1 INNER JOIN circuits AS T2 ON T1.nationality = T2.country ORDER BY T1.dob LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
        "hint": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
        "error_sql": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 ORDER BY T2.positionOrder LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
        "difficulty": "moderate"
    },
    {
        "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
        "hint": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T3.name, T3.date \nFROM results AS T1 \nINNER JOIN drivers AS T2 ON T1.driverId = T2.driverId \nINNER JOIN races AS T3 ON T1.raceId = T3.raceId \nWHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' \nORDER BY T1.rank \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
        "difficulty": "simple"
    },
    {
        "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
        "hint": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
        "error_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.position = 2",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
        "difficulty": "simple"
    },
    {
        "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
        "hint": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
        "error_sql": "SELECT CAST((CAST(REPLACE(SUBSTR(T2.time, 1, 5), ':', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.time, 1, 5), ':', '') AS REAL)) / CAST(REPLACE(SUBSTR(T2.time, 1, 5), ':', '') AS REAL) * 100 AS REAL) FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.position = 1 AND T2.position = (SELECT MAX(position) FROM results WHERE raceId = T1.raceId) AND T1.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
        "difficulty": "challenging"
    },
    {
        "question": "Please list the constructor names with 0 points at race 291.",
        "hint": "race at 291 refers to raceID = 291;",
        "error_sql": "SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
        "difficulty": "simple"
    },
    {
        "question": "What is the average time in seconds of champion for each year, before year 1975?",
        "hint": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
        "error_sql": "SELECT AVG(SUBSTR(T1.time, 1, 2) * 3600 + SUBSTR(T1.time, 4, 2) * 60 + SUBSTR(T1.time, 7, 3) / 1000) AS average_time, T2.year \nFROM results AS T1 \nJOIN races AS T2 ON T1.raceId = T2.raceId \nWHERE T1.position = 1 AND T1.time IS NOT NULL AND T2.year < 1975 \nGROUP BY T2.year",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
        "difficulty": "challenging"
    },
    {
        "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
        "hint": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
        "error_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T1.dob) < 1985 AND T2.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year BETWEEN 2000 AND 2005",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "**Error Reflection:**\n\nThe error encountered in the SQL query is due to the use of the `YEAR()` function, which is not supported in SQLite. The `YEAR()` function is commonly used in other SQL dialects, such as MySQL and PostgreSQL, to extract the year from a date.\n\n**Corrected SQL:**\n\nThe corrected SQL query uses the `STRFTIME()` function, which is specific to SQLite, to extract the year from the `dob` column. The `STRFTIME()` function formats the date according to a specified format string, in this case, `'%Y'`, which extracts the year.\n\n**Tip:**\n\nTo avoid making the same mistake in the future, always check the documentation for the specific SQL dialect you are using to ensure that the functions and syntax you are using are supported. In this case, familiarize yourself with SQLite's date and time functions, such as `STRFTIME()`, `DATE()`, and `TIME()`.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
        "difficulty": "challenging"
    },
    {
        "question": "How many French drivers who obtain the laptime less than 02:00.00?",
        "hint": "lap time less than 02:00.00 refers to seconds < 120;",
        "error_sql": "SELECT COUNT(DISTINCT T1.driverId) \nFROM drivers AS T1 \nJOIN lapTimes AS T2 ON T1.driverId = T2.driverId \nWHERE T1.nationality = 'French' AND T2.milliseconds < 120000",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "difficulty": "moderate"
    },
    {
        "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
        "hint": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
        "error_sql": "SELECT code FROM drivers ORDER BY STRFTIME('%Y', dob) DESC LIMIT 3",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
        "difficulty": "simple"
    },
    {
        "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
        "hint": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "error_sql": "SELECT COUNT(circuitId), location, lat, lng FROM circuits WHERE country = 'Austria'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "difficulty": "simple"
    },
    {
        "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
        "error_sql": "SELECT T1.year, T3.forename, T3.surname, T1.date, T1.time \nFROM races AS T1 \nJOIN qualifying AS T2 ON T1.raceId = T2.raceId \nJOIN drivers AS T3 ON T2.driverId = T3.driverId \nWHERE T3.dob = (SELECT MAX(dob) FROM drivers) AND T1.date = (SELECT MIN(T1.date) FROM races AS T1 JOIN qualifying AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.dob = (SELECT MAX(dob) FROM drivers))",
        "compiler_hint": "no such column: T2.name",
        "reflective_cot": "The error encountered in the SQL query is due to referencing a non-existent column `T2.name`. The `qualifying` table does not have a `name` column. Instead, the `drivers` table has columns `forename` and `surname` which can be used to get the driver's name.\n\nTo avoid making the same mistake in the future, always double-check the table schema and column names before writing a SQL query. Make sure to reference the correct table and column names to avoid errors.\n\nIn this case, the corrected SQL query references the `forename` and `surname` columns from the `drivers` table (`T3`) instead of the non-existent `name` column from the `qualifying` table (`T2`).",
        "ground_truth_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "hint": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980<= year(dob) <=1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "error_sql": "SELECT T1.forename, T1.surname, T2.avg_duration \nFROM drivers AS T1 \nJOIN ( \n    SELECT T1.driverId, AVG(T2.duration) AS avg_duration \n    FROM drivers AS T1 \n    JOIN pitStops AS T2 ON T1.driverId = T2.driverId \n    WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1985' \n    GROUP BY T1.driverId \n) AS T2 ON T1.driverId = T2.driverId \nORDER BY T2.avg_duration \nLIMIT 3",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
        "hint": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
        "error_sql": "SELECT T1.forename, T1.surname, T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Canadian Grand Prix' AND T2.position = 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "moderate"
    },
    {
        "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
        "hint": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
        "error_sql": "SELECT SUM(T1.points), T2.name, T2.nationality \nFROM constructorStandings AS T1 \nJOIN constructors AS T2 ON T1.constructorId = T2.constructorId \nJOIN races AS T3 ON T1.raceId = T3.raceId \nWHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 \nGROUP BY T2.name, T2.nationality \nORDER BY SUM(T1.points) DESC \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "hint": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
        "error_sql": "SELECT T3.forename, T3.surname \nFROM qualifying AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nINNER JOIN drivers AS T3 ON T1.driverId = T3.driverId \nINNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId \nWHERE T2.year = 2008 AND T4.name = 'Marina Bay Street Circuit' AND T1.q3 = (SELECT MIN(q3) FROM qualifying)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
        "hint": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
        "error_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.time LIMIT 20",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "difficulty": "challenging"
    },
    {
        "question": "Please list the lap records for the circuits in Italy.",
        "hint": "lap record means the fastest time recorded which refers to time",
        "error_sql": "SELECT T1.name, T2.time FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 'Italy' AND T2.milliseconds = ( SELECT MIN(T2.milliseconds) FROM lapTimes AS T2 INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T1 ON T3.circuitId = T1.circuitId WHERE T1.country = 'Italy' )",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "hint": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "error_sql": "SELECT superhero_name FROM superhero \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE publisher_name = 'Marvel Comics' \nORDER BY height_cm DESC",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "difficulty": "moderate"
    },
    {
        "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "hint": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "error_sql": "SELECT T2.colour, COUNT(T1.id) \nFROM superhero AS T1 \nJOIN colour AS T2 ON T1.eye_colour_id = T2.id \nJOIN publisher AS T3 ON T1.publisher_id = T3.id \nWHERE T3.publisher_name = 'Marvel Comics' \nGROUP BY T2.colour \nORDER BY COUNT(T1.id) DESC",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "hint": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
        "error_sql": "SELECT \n    CAST(SUM(IIF(T1.alignment = 'Bad', 1, 0)) AS REAL) * 100 / COUNT(T1.id) AS percentage,\n    SUM(IIF(T1.alignment = 'Bad' AND T3.publisher_name = 'Marvel Comics', 1, 0)) AS marvel_bad\nFROM alignment AS T1\nJOIN superhero AS T2 ON T1.id = T2.alignment_id\nJOIN publisher AS T3 ON T2.publisher_id = T3.id",
        "compiler_hint": "no such column: T2.publisher_name",
        "reflective_cot": "The error in the SQL query is due to referencing the wrong table alias (`T2`) for the `publisher_name` column. The correct table alias is `T3`, which is the alias for the `publisher` table.\n\nTo avoid making the same mistake in the future, ensure that you use the correct table alias when referencing columns in a query with multiple joins. Double-check the table aliases and column names to ensure they match the actual table and column names.",
        "ground_truth_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "difficulty": "challenging"
    },
    {
        "question": "List down at least five superpowers of male superheroes.",
        "hint": "male refers to gender = 'Male'; superpowers refers to power_name;",
        "error_sql": "SELECT T4.power_name \nFROM superhero AS T1 \nINNER JOIN gender AS T2 ON T1.gender_id = T2.id \nINNER JOIN hero_power AS T3 ON T1.id = T3.hero_id \nINNER JOIN superpower AS T4 ON T3.power_id = T4.id \nWHERE T2.gender = 'Male'",
        "compiler_hint": "no such column: T3.power_name",
        "reflective_cot": "**Error Reflection**\n\nThe error occurred because the column `power_name` is actually located in table `T4` (superpower), not `T3` (hero_power). The corrected SQL query fixes this by selecting `T4.power_name` instead.\n\n**Tip to Avoid Similar Mistakes**\n\nWhen joining multiple tables, double-check the table aliases to ensure you're referencing the correct table for each column. Verify the column names and their corresponding table aliases to avoid incorrect references.",
        "ground_truth_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "hint": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "error_sql": "SELECT T3.colour FROM superhero AS T1 \nINNER JOIN race AS T2 ON T1.race_id = T2.id \nINNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id \nWHERE T2.race = 'human' AND T1.height_cm = 185",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the hero's full name with the highest attribute in strength?",
        "hint": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "error_sql": "SELECT T2.full_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id WHERE T3.attribute_name = 'strength' ORDER BY T1.attribute_value DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "hint": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "error_sql": "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN publisher AS T2 ON T1.publisher_id = T2.id \nJOIN hero_attribute AS T3 ON T1.id = T3.hero_id \nJOIN attribute AS T4 ON T3.attribute_id = T4.id \nWHERE T2.publisher_name = 'Dark Horse Comics' AND T4.attribute_name = 'durability' \nORDER BY T3.attribute_value DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
        "hint": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "error_sql": "SELECT T1.colour AS eye_colour, T2.colour AS hair_colour, T3.colour AS skin_colour \nFROM superhero \nJOIN colour AS T1 ON T1.id = superhero.eye_colour_id \nJOIN colour AS T2 ON T2.id = superhero.hair_colour_id \nJOIN colour AS T3 ON T3.id = superhero.skin_colour_id \nJOIN gender ON gender.id = superhero.gender_id \nJOIN publisher ON publisher.id = superhero.publisher_id \nWHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the average height for all superhero.",
        "hint": "average = DIVIDE(SUM(height_cm), COUNT(all heros));",
        "error_sql": "SELECT AVG(height_cm) FROM superhero",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
        "difficulty": "simple"
    },
    {
        "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
        "hint": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
        "error_sql": "SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
        "difficulty": "simple"
    },
    {
        "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
        "hint": "account created in the year 2011 refers to year(CreationDate) = 2011",
        "error_sql": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
        "difficulty": "simple"
    },
    {
        "question": "How many users last accessed the website after 2014/9/1?",
        "hint": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
        "error_sql": "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "difficulty": "simple"
    },
    {
        "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
        "hint": "\"Tiago Pasqualini\" is the DisplayName;",
        "error_sql": "SELECT COUNT(Id) FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
        "difficulty": "simple"
    },
    {
        "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
        "hint": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
        "error_sql": "SELECT CAST(COUNT(p.Id) AS REAL) / COUNT(v.Id) \nFROM posts p \nJOIN votes v ON p.OwnerUserId = v.UserId \nWHERE p.OwnerUserId = 24",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
        "difficulty": "moderate"
    },
    {
        "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "hint": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
        "error_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "difficulty": "moderate"
    },
    {
        "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "hint": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
        "error_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T2.BountyAmount = 50 AND T3.Title LIKE '%variance%'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
        "hint": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
        "error_sql": "SELECT AVG(T1.ViewCount), T1.Title, T2.Text \nFROM posts AS T1 \nINNER JOIN postHistory AS T2 ON T1.Id = T2.PostId \nINNER JOIN tags AS T3 ON T1.Id = T3.ExcerptPostId \nWHERE T3.TagName = '<humor>'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
        "difficulty": "moderate"
    },
    {
        "question": "How many users are awarded with more than 5 badges?",
        "hint": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
        "error_sql": "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "difficulty": "simple"
    },
    {
        "question": "Which user have only one post history per post and having at least 1000 views?",
        "hint": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
        "error_sql": "SELECT T1.UserId FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId HAVING COUNT(T1.PostId) = COUNT(DISTINCT T1.PostId) AND T2.Views >= 1000",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
        "hint": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))",
        "error_sql": "SELECT AVG(T1.UpVotes) AS AverageUpVotes, AVG(T1.Age) AS AverageAge \nFROM users AS T1 \nINNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId \nGROUP BY T1.Id \nHAVING COUNT(T2.Id) > 10",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
        "difficulty": "moderate"
    },
    {
        "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "hint": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "error_sql": "SELECT MAX(ViewCount) FROM posts WHERE OwnerDisplayName IN ('Harvey Motulsky', 'Noah Snyder')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
        "hint": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;",
        "error_sql": "SELECT T1.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
        "difficulty": "moderate"
    },
    {
        "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "hint": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "error_sql": "SELECT CAST(SUM(IIF(T1.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T2.Id) \nFROM tags AS T1 \nINNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id \nWHERE T2.OwnerDisplayName = 'Community'",
        "compiler_hint": "no such column: T1.PostId",
        "reflective_cot": "**Error Reflection:**\n\nThe error occurred because the `tags` table does not have a `PostId` column. Instead, it has `ExcerptPostId` and `WikiPostId` columns that reference the `posts` table. The corrected SQL query uses `T2.Id` (from the `posts` table) instead of `T1.PostId` (which does not exist).\n\n**Tip:**\n\nWhen joining tables, ensure that you are referencing the correct columns from the correct tables. Double-check the table schema and the join conditions to avoid referencing non-existent columns.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
        "hint": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
        "error_sql": "SELECT SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) - SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END) \nFROM users u \nJOIN posts p ON u.Id = p.OwnerUserId",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
        "difficulty": "moderate"
    },
    {
        "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
        "hint": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
        "error_sql": "SELECT COUNT(DISTINCT T1.Id) \nFROM users AS T1 \nINNER JOIN posts AS T2 \nON T1.Id = T2.OwnerUserId \nWHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "difficulty": "moderate"
    },
    {
        "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
        "hint": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "error_sql": "SELECT Id, Title FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky' ORDER BY ViewCount DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
        "hint": "the most valuable post in 2010 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
        "error_sql": "SELECT Id, OwnerDisplayName FROM posts WHERE STRFTIME('%Y', CreaionDate) = '2010' ORDER BY FavoriteCount DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
        "hint": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.Reputation > 1000 AND STRFTIME('%Y', T1.CreationDate) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1",
        "compiler_hint": "no such column: T2.CreationDate",
        "reflective_cot": "The error in the SQL query is due to referencing the wrong table for the `CreationDate` column. The `CreationDate` column is actually in the `users` table, not the `posts` table.\n\nThe corrected SQL query correctly references the `CreationDate` column in the `users` table.\n\nTip: Always double-check the table and column names in your SQL queries to ensure they match the actual schema. In this case, the error was caused by incorrectly assuming the `CreationDate` column was in the `posts` table.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "hint": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "error_sql": "SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
        "hint": "the latest comment refers to MAX(CreationDate);",
        "error_sql": "SELECT Text, UserDisplayName \nFROM comments \nJOIN posts \nON comments.PostId = posts.Id \nWHERE posts.Title = 'Analysing wind data with R' \nORDER BY comments.CreationDate DESC \nLIMIT 10",
        "compiler_hint": "ambiguous column name: Id",
        "reflective_cot": "The error encountered in the SQL query is due to the ambiguous column name 'Id'. This is because both the 'comments' and 'posts' tables have a column named 'Id', and the SQL query does not specify which table's 'Id' column to use.\n\nThe corrected SQL query resolves this ambiguity by specifying the table name for each column, i.e., 'comments.PostId' and 'posts.Id'.\n\n**Tip:** To avoid making the same mistake in the future, always specify the table name for each column in a SQL query, especially when joining multiple tables. This can be done using the table name followed by a dot and the column name, e.g., 'table_name.column_name'.",
        "ground_truth_sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
        "hint": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T2.Reputation DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
        "difficulty": "challenging"
    },
    {
        "question": "In posts with 1 comment, how many of the comments have 0 score?",
        "hint": "in posts with 1 comment refers to CommentCount = 1;",
        "error_sql": "SELECT COUNT(T1.Id) \nFROM comments AS T1 \nINNER JOIN posts AS T2 \nON T1.PostId = T2.Id \nWHERE T2.CommentCount = 1 AND T1.Score = 0",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
        "difficulty": "simple"
    },
    {
        "question": "Which are the cards that have incredibly powerful foils.",
        "hint": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "error_sql": "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "What are the borderless cards available without powerful foils?",
        "hint": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
        "error_sql": "SELECT * FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "difficulty": "simple"
    },
    {
        "question": "List all the mythic rarity print cards banned in gladiator format.",
        "hint": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "error_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.format = 'gladiator' AND T2.status = 'Banned'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "moderate"
    },
    {
        "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
        "hint": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
        "error_sql": "SELECT T1.name, T1.artist, T1.isPromo \nFROM cards AS T1 \nJOIN rulings AS T2 ON T1.uuid = T2.uuid \nJOIN ( \n    SELECT uuid, COUNT(uuid) AS count \n    FROM rulings \n    GROUP BY uuid \n    ORDER BY count DESC \n    LIMIT 1 \n) AS T3 ON T1.uuid = T3.uuid",
        "compiler_hint": "no such column: T2.isPromo",
        "reflective_cot": "**Error Analysis**\n\nThe error occurs because the `isPromo` column is not present in the `rulings` table (`T2`). Instead, it is a column in the `cards` table (`T1`).\n\n**Corrected SQL**\n\nThe corrected SQL query joins the `cards` table with the `rulings` table and then joins the result with the subquery that counts the rulings. The `isPromo` column is correctly referenced from the `cards` table (`T1`).\n\n**Tip to Avoid Similar Mistakes**\n\nWhen joining tables, ensure that you reference columns from the correct table. Double-check the table aliases and column names to avoid referencing a column from the wrong table. Always verify the table structure and column names before writing a SQL query.",
        "ground_truth_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
        "hint": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM foreign_data",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "difficulty": "moderate"
    },
    {
        "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
        "hint": "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'",
        "error_sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
        "hint": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) AS percentage, id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 AND  isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "difficulty": "moderate"
    },
    {
        "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
        "hint": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
        "error_sql": "SELECT COUNT(T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Portuguese (Brasil)' AND T2.block = 'Commander'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
        "difficulty": "moderate"
    },
    {
        "question": "How many unknown power cards contain info about the triggered ability",
        "hint": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
        "error_sql": "SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT Count(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
        "hint": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
        "error_sql": "SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T2.language = 'French' AND T1.type = 'Creature'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "difficulty": "moderate"
    },
    {
        "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
        "hint": "set of 180 cards refers to baseSetSize = 180",
        "error_sql": "SELECT T3.translation FROM sets AS T1 INNER JOIN set_translations AS T3 ON T1.code = T3.setCode WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "difficulty": "simple"
    },
    {
        "question": "What percentage of cards with format commander and legal status do not have a content warning?",
        "hint": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "error_sql": "SELECT CAST(SUM(IIF(l.status = 'Legal' AND l.format = 'Commander' AND c.hasContentWarning = 0, 1, 0)) AS REAL) * 100 / COUNT(l.id) FROM legalities l INNER JOIN cards c ON l.uuid = c.uuid",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage of cards without power are in French?",
        "hint": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
        "error_sql": "SELECT CAST(SUM(IIF(T2.language = 'French' AND (T1.power IS NULL OR T1.power = '*'), 1, 0)) AS REAL) * 100 / COUNT(T1.power) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
        "compiler_hint": "no such column: power",
        "reflective_cot": "The error encountered in the SQL query is due to the fact that the `power` column is not present in the `foreign_data` table. The `power` column is present in the `cards` table, but the SQL query is trying to access it from the `foreign_data` table.\n\nTo avoid making the same mistake in the future, always check the table structure and column names before writing a SQL query. Make sure to join the tables correctly and access the columns from the correct table.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
        "difficulty": "challenging"
    },
    {
        "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
        "hint": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
        "error_sql": "SELECT COUNT(*) FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND language = 'Korean'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
        "difficulty": "moderate"
    },
    {
        "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "hint": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "error_sql": "SELECT T2.mtgoCode IS NOT NULL FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Angel of Mercy'",
        "compiler_hint": "no such column: T1.mtgoCode",
        "reflective_cot": "The error encountered in the SQL query is due to referencing the wrong table alias (`T1`) for the `mtgoCode` column, which actually belongs to the `sets` table (`T2`).\n\nThe corrected SQL query correctly references the `mtgoCode` column from the `sets` table (`T2`).\n\n**Tip:** When joining multiple tables, double-check the table aliases to ensure you're referencing the correct table for each column.",
        "ground_truth_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "difficulty": "moderate"
    },
    {
        "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
        "hint": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
        "error_sql": "SELECT T1.isForeignOnly FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Adarkar Valkyrie'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
        "difficulty": "moderate"
    },
    {
        "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "error_sql": "SELECT artist FROM cards WHERE setCode = 'CDS' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "difficulty": "challenging"
    },
    {
        "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "error_sql": "SELECT T3.text FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode INNER JOIN rulings AS T3 ON T2.uuid = T3.uuid INNER JOIN foreign_data AS T4 ON T2.uuid = T4.uuid WHERE T1.name = 'Coldsnap' AND T4.language = 'Italian'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "error_sql": "SELECT T1.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T1.language = 'Italian' AND T3.name = 'Coldsnap' ORDER BY T2.convertedManaCost DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
        "error_sql": "SELECT CAST(SUM(IIF(cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(id) FROM cards WHERE setCode = 'CDS'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "difficulty": "challenging"
    },
    {
        "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
        "hint": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
        "error_sql": "SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' GROUP BY T1.format, T2.name HAVING COUNT(T1.status) = ( SELECT MAX(COUNT(status)) FROM legalities WHERE status = 'Banned' GROUP BY format )",
        "compiler_hint": "misuse of aggregate function COUNT()",
        "reflective_cot": "**Error Reflection:**\n\nThe error in the original SQL query is due to the misuse of the aggregate function `COUNT()`. In the `HAVING` clause, `COUNT(T1.status)` is used without specifying the column(s) to group by, which is required when using aggregate functions.\n\n**Corrected SQL:**\n\nThe corrected SQL query groups by both `T1.format` and `T2.name` to ensure that the `COUNT(T1.status)` is applied correctly.\n\n**Tip:**\n\nWhen using aggregate functions in the `HAVING` clause, always ensure that you are grouping by all non-aggregated columns in the `SELECT` clause. This will prevent errors and ensure accurate results.\n\nIn this case, the corrected SQL query groups by both `T1.format` and `T2.name`, which are the non-aggregated columns in the `SELECT` clause.",
        "ground_truth_sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
        "difficulty": "moderate"
    },
    {
        "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
        "hint": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
        "error_sql": "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Korean' AND T1.code NOT IN (SELECT setCode FROM set_translations WHERE language LIKE '%Japanese%')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
        "difficulty": "moderate"
    },
    {
        "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "hint": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "error_sql": "SELECT DISTINCT T1.frameVersion, T1.name, T2.status \nFROM cards AS T1 \nLEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid \nWHERE T1.artist = 'Allen Williams' OR T2.status = 'Banned'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "hint": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
        "error_sql": "SELECT AVG(o_count) FROM (\n  SELECT COUNT(T1.atom_id) AS o_count \n  FROM atom AS T1 \n  INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id \n  INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id \n  WHERE T1.element = 'o' AND T3.bond_type = '-' \n  GROUP BY T3.molecule_id\n)",
        "compiler_hint": "no such column: COUNT",
        "reflective_cot": "**Error Reflection**\n\nThe error \"no such column: COUNT\" occurs because the subquery's `COUNT` result is not assigned an alias, making it inaccessible in the outer query.\n\n**Corrected SQL**\n\nBy assigning an alias `o_count` to the `COUNT` result, we can reference it in the outer query, allowing the average calculation to proceed.\n\n**Tip**\n\nWhen using aggregate functions in subqueries, always assign an alias to the result to avoid referencing errors in the outer query. This ensures clarity and accessibility of the calculated values.",
        "ground_truth_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "difficulty": "moderate"
    },
    {
        "question": "On average how many carcinogenic molecules are single bonded?",
        "hint": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
        "error_sql": "SELECT AVG(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "difficulty": "challenging"
    },
    {
        "question": "Find the triple-bonded molecules which are carcinogenic.",
        "hint": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'",
        "error_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '+'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of carbon in double-bond molecules?",
        "hint": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
        "error_sql": "SELECT CAST(SUM(IIF(T1.element = 'c', 1, 0)) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '='",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question": "What elements are in a double type bond?",
        "hint": "double type bond refers to bond_type = '=';",
        "error_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '='",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "difficulty": "challenging"
    },
    {
        "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "hint": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
        "error_sql": "SELECT COUNT(DISTINCT T1.atom_id) \nFROM atom AS T1 \nINNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id \nINNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id \nWHERE T1.element IN ('i', 's') AND T3.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
        "hint": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
        "error_sql": "SELECT 100 - (SUM(IIF(T2.element = 'f', 1, 0)) * 100 / COUNT(DISTINCT T1.molecule_id)) \nFROM molecule AS T1 \nLEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '+'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "hint": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
        "error_sql": "SELECT CAST(SUM(IIF(b.bond_type = '#' AND m.label = '+', 1, 0)) AS REAL) * 100 / COUNT(b.bond_id) AS percent \nFROM bond b \nJOIN molecule m ON b.molecule_id = m.molecule_id",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
        "hint": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
        "error_sql": "SELECT CAST(SUM(IIF(bond_type = '=', 1, 0)) AS REAL) * 100 / COUNT(bond_id) FROM bond WHERE molecule_id = 'TR008'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
        "hint": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
        "error_sql": "SELECT CAST(SUM(IIF(label = '+', 1, 0)) AS REAL) * 100 / COUNT(molecule_id) AS percent FROM molecule",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
        "difficulty": "simple"
    },
    {
        "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
        "hint": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
        "error_sql": "SELECT CAST(SUM(IIF(element = 'h', 1, 0)) AS REAL) * 100 / COUNT(atom_id) FROM atom WHERE molecule_id = 'TR206'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "difficulty": "moderate"
    },
    {
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "hint": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
        "error_sql": "SELECT T1.bond_type, T2.is_carcinogenic FROM \n    (SELECT bond_type, COUNT(bond_type) as count \n     FROM bond \n     WHERE molecule_id = 'TR010' \n     GROUP BY bond_type) T1 \nJOIN \n    (SELECT label, CASE WHEN label LIKE '%carcinogenic%' THEN 'Yes' ELSE 'No' END as is_carcinogenic \n     FROM molecule \n     WHERE molecule_id = 'TR010') T2 \nON T1.count = (SELECT MAX(count) FROM \n    (SELECT bond_type, COUNT(bond_type) as count \n     FROM bond \n     WHERE molecule_id = 'TR010' \n     GROUP BY bond_type))",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "difficulty": "challenging"
    },
    {
        "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
        "hint": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
        "error_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.label = '-' ORDER BY T1.molecule_id LIMIT 3",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "difficulty": "moderate"
    },
    {
        "question": "How many bonds which involved atom 12 does molecule TR009 have?",
        "hint": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
        "error_sql": "SELECT COUNT(T1.bond_id) \nFROM connected AS T1 \nINNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id \nWHERE T2.molecule_id = 'TR009' AND (T1.atom_id = 'TR009_12' OR T1.atom_id2 = 'TR009_12')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' OR T2.atom_id2 = T1.molecule_id || '_2'",
        "difficulty": "moderate"
    },
    {
        "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
        "hint": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic",
        "error_sql": "SELECT DISTINCT T3.label FROM atom AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T3.label = '+'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "Is the molecule with the most double bonds carcinogenic?",
        "hint": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
        "error_sql": "SELECT T2.label FROM \n    (SELECT T3.molecule_id, COUNT(T1.bond_id) as num \n     FROM connected AS T1 \n     INNER JOIN bond AS T2 \n     ON T1.bond_id = T2.bond_id \n     INNER JOIN atom AS T3 \n     ON T1.atom_id = T3.atom_id \n     WHERE T2.bond_type = ' = ' \n     GROUP BY T3.molecule_id) AS T1 \nINNER JOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nORDER BY T1.num DESC LIMIT 1",
        "compiler_hint": "no such column: T1.molecule_id",
        "reflective_cot": "**Error Reflection**\n\nThe error occurred because the subquery `T1` did not include the `molecule_id` column in its `SELECT` clause. This column was referenced in the outer query, causing the error.\n\n**Corrected SQL**\n\nThe corrected SQL query includes the `molecule_id` column in the subquery's `SELECT` clause by joining the `atom` table and selecting the `molecule_id` from it.\n\n**Tip to Avoid Similar Mistakes**\n\nWhen using subqueries, ensure that all columns referenced in the outer query are included in the subquery's `SELECT` clause. Double-check the column names and aliases to avoid errors.",
        "ground_truth_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
        "difficulty": "moderate"
    },
    {
        "question": "List all the elements of atoms that can not bond with any other atoms.",
        "hint": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
        "error_sql": "SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
        "difficulty": "challenging"
    },
    {
        "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
        "hint": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
        "error_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T3.bond_type = '#' AND T4.molecule_id = 'TR041'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
        "difficulty": "simple"
    },
    {
        "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
        "hint": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'",
        "error_sql": "SELECT CAST(SUM(IIF(b.bond_type = '-' AND m.label = '+', 1, 0)) AS REAL) * 100 / COUNT(b.bond_id) FROM bond b INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
        "hint": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
        "error_sql": "SELECT CAST(SUM(IIF(T1.element = 'cl', 1, 0)) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "difficulty": "challenging"
    },
    {
        "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
        "hint": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
        "error_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4' AND T1.element = 'toxicology'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
        "difficulty": "challenging"
    },
    {
        "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
        "hint": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT MAX(T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) \nFROM frpm AS T1 \nINNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds \nWHERE T2.NumGE1500 / T2.NumTstTakr > 0.3",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
        "difficulty": "moderate"
    },
    {
        "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
        "hint": "Valid charter number means the number is not null",
        "error_sql": "SELECT T1.CharterNum, T2.sname, T2.AvgScrWrite \nFROM schools AS T1 \nINNER JOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nWHERE T2.AvgScrWrite > 499 AND T1.CharterNum IS NOT NULL \nORDER BY T2.AvgScrWrite DESC",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
        "difficulty": "simple"
    },
    {
        "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
        "hint": "Average of average math = sum(average math scores) / count(schools).",
        "error_sql": "SELECT T2.FundingType FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Riverside' AND T1.AvgScrMath > 400",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
        "difficulty": "moderate"
    },
    {
        "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "hint": "Full communication address should include Street, City, State and zip code if any.",
        "error_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip, T2.School, T1.`Free Meal Count (Ages 5-17)`\nFROM frpm AS T1\nINNER JOIN schools AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.County = 'Monterey' AND T1.`School Type` = 'High School' AND T1.`Free Meal Count (Ages 5-17)` > 800",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
        "hint": "Communication number refers to phone number.",
        "error_sql": "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
        "difficulty": "moderate"
    },
    {
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "hint": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT T1.School, T1.DOCType \nFROM schools AS T1 \nJOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode \nWHERE T2.`Charter Funding Type` = 'Locally Funded' \nAND T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > ( \n    SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) \n    FROM frpm \n    WHERE `Charter Funding Type` = 'Locally Funded' \n)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "difficulty": "challenging"
    },
    {
        "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
        "hint": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "error_sql": "SELECT `Percent (%) Eligible Free (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1 OFFSET 9",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
        "difficulty": "moderate"
    },
    {
        "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
        "hint": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
        "error_sql": "SELECT `School Name`, `Percent (%) Eligible FRPM (K-12)` FROM frpm WHERE `District Code` = 66 ORDER BY `FRPM Count (K-12)` DESC LIMIT 5",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
        "hint": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
        "error_sql": "SELECT T1.Street, T1.City, T1.Zip, T1.State \nFROM schools AS T1 \nINNER JOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
        "hint": "Fresno Unified is a name of district;",
        "error_sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Fresno Unified' ORDER BY T2.AvgScrRead ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
        "hint": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
        "error_sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ORDER BY T1.AvgScrRead DESC LIMIT 5",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
        "difficulty": "simple"
    },
    {
        "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
        "hint": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
        "error_sql": "SELECT School, MAX(`Enrollment (K-12)`) FROM schools WHERE DOC = 31",
        "compiler_hint": "no such column: School",
        "reflective_cot": "**Error Analysis:**\n\nThe error occurs because the column `School` is not present in the `frpm` table. Instead, it's present in the `schools` table.\n\n**Corrected SQL:**\n\nTo fix the error, we need to join the `frpm` table with the `schools` table on the `CDSCode` column, which is the common column between the two tables. However, since we only need the `School` name and the maximum enrollment, we can simply use the `schools` table and filter by `DOC = 31`.\n\n```sql\nSELECT School, MAX(`Enrollment (K-12)`) \nFROM schools \nWHERE DOC = 31\n```\n\n**Tip:**\n\nTo avoid making the same mistake in the future, always verify the table structure and column names before writing a SQL query. Make sure to check the correct table and column names to avoid referencing non-existent columns.",
        "ground_truth_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
        "hint": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', OpenDate) = '1980' THEN CDSCode END) AS REAL) / 12 FROM schools WHERE County = 'Alameda County' AND DOC = '52'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
        "hint": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
        "error_sql": "SELECT \n    CAST(SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) AS REAL) / \n    SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) \nFROM schools \nWHERE County = 'Orange'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
        "hint": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
        "error_sql": "SELECT COUNT(T1.CDSCode) \nFROM frpm AS T1 \nINNER JOIN schools AS T2 \nON T1.CDSCode = T2.CDSCode \nWHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND T1.`Percent (%) Eligible Free (K-12)` < 0.18",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
        "difficulty": "challenging"
    },
    {
        "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
        "hint": "State Special School means EdOpsCode = 'SSS'",
        "error_sql": "SELECT T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.EdOpsCode = 'SSS' AND T1.County = 'Fremont' AND T2.`Academic Year` = '2014-2015'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
        "difficulty": "moderate"
    },
    {
        "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
        "hint": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
        "error_sql": "SELECT T1.`School Name`, T1.`Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T1.`Low Grade` = 'K' AND T1.`High Grade` = '09'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
        "difficulty": "moderate"
    },
    {
        "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
        "hint": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
        "error_sql": "SELECT COUNT(T1.CDSCode), T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Multiple Provision Types' AND T2.GSoffered = 'K-8' AND T2.Magnet = 1 GROUP BY T2.City",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
        "difficulty": "challenging"
    },
    {
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "hint": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "error_sql": "SELECT T1.`Percent (%) Eligible Free (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
        "hint": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
        "error_sql": "SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
        "difficulty": "challenging"
    },
    {
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "hint": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "error_sql": "SELECT COUNT(T1.account_id) \nFROM account AS T1 \nINNER JOIN district AS T2 ON T1.district_id = T2.district_id \nWHERE T2.A3 = 'East Bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "hint": "A11 refers to average salary; Female mapps to gender = 'F'",
        "error_sql": "SELECT COUNT(T1.district_id) \nFROM district AS T1 \nINNER JOIN client AS T2 ON T1.district_id = T2.district_id \nWHERE T2.gender = 'F' AND T1.A11 > 6000 AND T1.A11 < 10000",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
        "difficulty": "simple"
    },
    {
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "hint": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "error_sql": "SELECT COUNT(T1.client_id) \nFROM client AS T1 \nINNER JOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "difficulty": "moderate"
    },
    {
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "hint": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "error_sql": "SELECT T1.account_id, MAX(T2.A11) - MIN(T2.A11) AS gap \nFROM account AS T1 \nJOIN district AS T2 ON T1.district_id = T2.district_id \nJOIN disp AS T3 ON T1.account_id = T3.account_id \nJOIN client AS T4 ON T3.client_id = T4.client_id \nWHERE T4.gender = 'F' \nGROUP BY T1.account_id \nORDER BY T4.birth_date, T2.A11 \nLIMIT 1",
        "compiler_hint": "no such column: T1.account_id",
        "reflective_cot": "**Error Reflection:**\n\nThe error occurred because the `client` table does not have an `account_id` column. The `account_id` is actually present in the `account` table, which is related to the `client` table through the `disp` table.\n\n**Corrected SQL:**\n\nThe corrected SQL joins the `account`, `district`, `disp`, and `client` tables to correctly retrieve the `account_id` and perform the required calculations.\n\n**Tip:**\n\nTo avoid making the same mistake in the future, always double-check the table schema and ensure that the column you're trying to access exists in the correct table. Verify the relationships between tables and use the correct joins to access the required data.",
        "ground_truth_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "hint": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
        "error_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id ORDER BY T2.birth_date DESC, T3.A11 DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
        "difficulty": "moderate"
    },
    {
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "hint": "Loan validity more than 12 months refers to duration > 12",
        "error_sql": "SELECT T1.account_id, T1.amount \nFROM loan AS T1 \nINNER JOIN account AS T2 \nON T1.account_id = T2.account_id \nWHERE T1.duration > 12 AND T2.date LIKE '1993%' \nORDER BY T1.amount DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
        "hint": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
        "error_sql": "SELECT COUNT(T1.account_id) \nFROM account AS T1 \nINNER JOIN client AS T2 ON T1.account_id = T2.client_id \nINNER JOIN district AS T3 ON T2.district_id = T3.district_id \nWHERE T2.gender = 'F' AND T2.birth_date < '1950-01-01' AND T3.A2 = 'Sokolov'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
        "difficulty": "moderate"
    },
    {
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "hint": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "error_sql": "SELECT CAST(SUM(IIF(c.gender = 'M', 1, 0)) AS REAL) * 100 / COUNT(c.client_id) FROM client c INNER JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'South Bohemia' ORDER BY d.A4 DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "hint": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
        "error_sql": "SELECT CAST((t2.balance - t1.balance) AS REAL) * 100 / t1.balance FROM \n(SELECT balance FROM trans WHERE date = '1993-03-22' AND account_id = \n    (SELECT account_id FROM loan WHERE date = '1993-07-05' AND status = 'A' ORDER BY date LIMIT 1)) t1,\n(SELECT balance FROM trans WHERE date = '1998-12-27' AND account_id = \n    (SELECT account_id FROM loan WHERE date = '1993-07-05' AND status = 'A' ORDER BY date LIMIT 1)) t2",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "difficulty": "challenging"
    },
    {
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "hint": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "error_sql": "SELECT T3.A2, ((T3.A13 - T3.A12) / T3.A12) * 100 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "difficulty": "challenging"
    },
    {
        "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "hint": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "error_sql": "SELECT COUNT(DISTINCT T1.account_id) \nFROM loan AS T1 \nINNER JOIN account AS T2 \nON T1.account_id = T2.account_id \nWHERE T1.status = 'Schv\u00e1leno' \nAND T1.amount >= 250000 \nAND T2.frequency = 'POPLATEK MESICNE' \nAND T1.date BETWEEN '1995-01-01' AND '1997-12-31'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
        "difficulty": "moderate"
    },
    {
        "question": "How many accounts have running contracts in Branch location 1?",
        "hint": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "error_sql": "SELECT COUNT(T1.account_id) \nFROM account AS T1 \nINNER JOIN district AS T2 ON T1.district_id = T2.district_id \nWHERE T2.A2 = 'Branch location 1'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "difficulty": "moderate"
    },
    {
        "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "hint": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
        "error_sql": "SELECT T3.A2, T1.amount FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' ORDER BY T1.amount DESC LIMIT 10",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "How many accounts have running contracts in Branch location 1?",
        "hint": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "error_sql": "SELECT COUNT(T1.account_id) \nFROM account AS T1 \nINNER JOIN district AS T2 ON T1.district_id = T2.district_id \nWHERE T2.A2 = 'Branch location 1'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "difficulty": "moderate"
    },
    {
        "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
        "hint": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
        "error_sql": "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.operation = 'VYBER KARTOU' AND T2.amount < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND date LIKE '1998%')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
        "difficulty": "moderate"
    },
    {
        "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
        "hint": "operation = 'VYBER' refers to withdrawal in cash",
        "error_sql": "SELECT T1.date, T1.type, T1.amount, T1.balance \nFROM trans AS T1 \nINNER JOIN disp AS T2 ON T1.account_id = T2.account_id \nINNER JOIN client AS T3 ON T2.client_id = T3.client_id \nWHERE T3.client_id = 3356 AND T1.operation = 'VYBER'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "difficulty": "simple"
    },
    {
        "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
        "hint": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "error_sql": "SELECT CAST(SUM(IIF(c.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(c.client_id) FROM client c INNER JOIN district d ON c.district_id = d.district_id INNER JOIN account a ON c.district_id = a.district_id WHERE d.A11 > 10000",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "difficulty": "moderate"
    },
    {
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "hint": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "error_sql": "SELECT \n    CAST(SUM(CASE WHEN T3.date LIKE '1997%' THEN T3.amount ELSE 0 END) AS REAL) * 100 / \n    SUM(CASE WHEN T3.date LIKE '1996%' THEN T3.amount ELSE 0 END) - 100 \nFROM \n    loan T3 \nJOIN \n    account T2 ON T3.account_id = T2.account_id \nJOIN \n    disp T1 ON T2.account_id = T1.account_id \nJOIN \n    client T4 ON T1.client_id = T4.client_id \nWHERE \n    T4.gender = 'M'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "difficulty": "challenging"
    },
    {
        "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "hint": "k_symbol refers to the purpose of payments",
        "error_sql": "SELECT COUNT(T1.account_id), T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.type = 'debit' AND T2.amount = 3539",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage of male clients request for weekly statements to be issued?",
        "hint": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
        "error_sql": "SELECT CAST(SUM(IIF(t1.gender = 'M' AND t2.frequency = 'POPLATEK TYDNE', 1, 0)) AS REAL) * 100 / COUNT(t1.client_id) FROM client AS t1 INNER JOIN account AS t2 ON t1.district_id = t2.district_id",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "difficulty": "moderate"
    },
    {
        "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
        "hint": "Female refers to 'F' in the gender; A11 contains information about average salary",
        "error_sql": "SELECT T1.account_id FROM account AS T1 \nINNER JOIN client AS T2 ON T1.district_id = T2.district_id \nINNER JOIN district AS T3 ON T2.district_id = T3.district_id \nWHERE T2.gender = 'F' \nORDER BY T2.birth_date, T3.A11 \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
        "hint": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "error_sql": "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.operation = 'POPLATEK PO OBRATU'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
        "hint": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
        "error_sql": "SELECT T1.client_id, (strftime('%J', '2023-01-01') - strftime('%J', T1.birth_date)) / 365.25 AS age \nFROM client AS T1 \nJOIN disp AS T2 ON T1.client_id = T2.client_id \nJOIN card AS T3 ON T2.disp_id = T3.card_id \nWHERE T3.type = 'gold' AND T2.type = 'OWNER'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "difficulty": "moderate"
    }
]