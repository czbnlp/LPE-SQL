[
    {
        "question": "In 2012, who had the least consumption in LAM?",
        "hint": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT CustomerID, MIN(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' GROUP BY CustomerID ORDER BY MIN(Consumption) ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What was the average monthly consumption of customers in SME for the year 2013?",
        "hint": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT AVG(Consumption) / 12 FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
        "difficulty": "moderate"
    },
    {
        "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
        "hint": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
        "error_sql": "SELECT \n    (SELECT SUM(Consumption) FROM yearmonth AS Y1 INNER JOIN customers AS C1 ON Y1.CustomerID = C1.CustomerID WHERE C1.Currency = 'CZK' AND Y1.Date BETWEEN '201201' AND '201212') -\n    (SELECT SUM(Consumption) FROM yearmonth AS Y2 INNER JOIN customers AS C2 ON Y2.CustomerID = C2.CustomerID WHERE C2.Currency = 'EUR' AND Y2.Date BETWEEN '201201' AND '201212') AS ConsumptionDifference;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
        "difficulty": "challenging"
    },
    {
        "question": "Which year recorded the most consumption of gas paid in CZK?",
        "hint": "The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "hint": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "error_sql": "SELECT Date, MAX(Consumption) FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY Date ORDER BY Consumption DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "hint": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT \n    (SELECT AVG(Consumption) FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID = (SELECT CustomerID FROM customers WHERE Segment = 'SME' ORDER BY Consumption LIMIT 1)) -\n    (SELECT AVG(Consumption) FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID = (SELECT CustomerID FROM customers WHERE Segment = 'LAM' ORDER BY Consumption LIMIT 1)) AS Difference_SME_LAM,\n    (SELECT AVG(Consumption) FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID = (SELECT CustomerID FROM customers WHERE Segment = 'LAM' ORDER BY Consumption LIMIT 1)) -\n    (SELECT AVG(Consumption) FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID = (SELECT CustomerID FROM customers WHERE Segment = 'KAM' ORDER BY Consumption LIMIT 1)) AS Difference_LAM_KAM,\n    (SELECT AVG(Consumption) FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID = (SELECT CustomerID FROM customers WHERE Segment = 'KAM' ORDER BY Consumption LIMIT 1)) -\n    (SELECT AVG(Consumption) FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID = (SELECT CustomerID FROM customers WHERE Segment = 'SME' ORDER BY Consumption LIMIT 1)) AS Difference_KAM_SME;",
        "compiler_hint": "no such column: Consumption",
        "reflective_cot": "### Reflection on the Error\n\nThe error \"no such column: Consumption\" arose because, in the original query, I attempted to use the `Consumption` column without ensuring that I was selecting a specific customer whose consumption data I wanted. The corrected SQL ensures that the `AVG(Consumption)` is calculated for the customer with the least consumption in each segment by properly selecting the `CustomerID` based on the `ORDER BY Consumption LIMIT 1` clause.\n\n### Tip to Avoid Similar Mistakes\n\nAlways ensure that when referencing columns in subqueries, you are aware of the context in which they are used. Double-check subqueries for proper filtering to avoid incorrect assumptions about which data is being processed. Test smaller parts of a query incrementally to isolate errors before combining them into a larger query.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "difficulty": "challenging"
    },
    {
        "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "hint": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
        "error_sql": "SELECT Segment, \n       100.0 * (SUM(CASE WHEN substr(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - \n                 SUM(CASE WHEN substr(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) / \n       NULLIF(SUM(CASE WHEN substr(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END), 0) AS Percentage_Change\nFROM yearmonth \nJOIN customers ON yearmonth.CustomerID = customers.CustomerID\nWHERE substr(Date, 1, 4) IN ('2012', '2013')\nGROUP BY Segment\nORDER BY Percentage_Change DESC;",
        "compiler_hint": "no such column: Segment",
        "reflective_cot": "### Reflection:\nThe initial error occurred because the `Segment` column was not included in the `yearmonth` table, leading to the \"no such column: Segment\" error when attempting to query based on it. The corrected SQL query properly joins the `yearmonth` table with the `customers` table to access the `Segment` column.\n\n### Tip:\nWhen writing SQL queries, always ensure you are referencing columns that exist in the selected tables. Using JOINs effectively can help bring in additional columns needed for your conditions or output. Always double-check the schema to confirm column availability before querying.",
        "ground_truth_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
        "difficulty": "challenging"
    },
    {
        "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
        "hint": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia",
        "error_sql": "SELECT \n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'discount') - \n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'discount') AS more_discount_gas_stations;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
        "difficulty": "simple"
    },
    {
        "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
        "hint": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
        "error_sql": "SELECT \n    (SELECT COUNT(DISTINCT T1.CustomerID) FROM transactions_1k AS T1 \n     INNER JOIN customers AS C ON T1.CustomerID = C.CustomerID \n     WHERE C.Segment = 'SME' AND C.Currency = 'CZK') \n    - \n    (SELECT COUNT(DISTINCT T2.CustomerID) FROM transactions_1k AS T2 \n     INNER JOIN customers AS C ON T2.CustomerID = C.CustomerID \n     WHERE C.Segment = 'SME' AND C.Currency = 'EUR') AS SMEs_difference;",
        "compiler_hint": "ambiguous column name: CustomerID",
        "reflective_cot": "### Reflection on the Error and Correction:\n\nThe original SQL query encountered an \"ambiguous column name: CustomerID\" error because both subqueries were using the same alias `C` for the `customers` table without explicitly distinguishing which instance of `CustomerID` belonged to which query context. This can lead to confusion in the SQL engine when determining which `CustomerID` you meant in the WHERE clause for the join.\n\n### Suggested Correction:\n\nIn the corrected SQL, I used different aliases (`T1` and `T2`) for the two subqueries. This clarified the references to the `CustomerID`, making it clear which `CustomerID` came from which instance of the query.\n\n### Tip to Avoid Similar Mistakes:\n\nAlways use unique aliases for tables in subqueries when they are joined or referenced multiple times in the same context. This prevents ambiguity and helps the SQL engine resolve column references accurately.",
        "ground_truth_sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
        "difficulty": "simple"
    },
    {
        "question": "What is the highest monthly consumption in the year 2012?",
        "hint": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "error_sql": "SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
        "hint": "Pays in euro = Currency = 'EUR'.",
        "error_sql": "SELECT COUNT(DISTINCT C.CustomerID) \nFROM customers AS C \nINNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID \nWHERE C.Currency = 'EUR' AND Y.Consumption > 1000;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
        "difficulty": "simple"
    },
    {
        "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
        "hint": "'2012/8/24' can be represented by '2012-08-24'",
        "error_sql": "SELECT C.Currency FROM customers AS C \nINNER JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID \nWHERE T.Amount = 548.4 AND T.Date = '2012-08-24';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price  = 548.4",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
        "hint": "'2012/8/25' can be represented by '2012-08-25'",
        "error_sql": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM customers \nWHERE CustomerID IN (SELECT CustomerID FROM yearmonth WHERE Date = '2012-08-25');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
        "difficulty": "simple"
    },
    {
        "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
        "hint": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
        "error_sql": "SELECT (T1.Consumption - T2.Consumption) / T1.Consumption AS consumption_decrease_rate \nFROM yearmonth AS T1 \nINNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID \nWHERE T1.Date = '2012' AND T2.Date = '2013' \nAND T1.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 634.8 AND Date = '2012-08-25');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTRING(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price  = 1513.12 )",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
        "hint": "",
        "error_sql": "SELECT CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM customers \nWHERE Currency = 'SVK'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
        "difficulty": "simple"
    },
    {
        "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
        "hint": "January 2012 refers to the Date value = '201201'",
        "error_sql": "SELECT SUM(Amount) AS TotalSpent, SUM(CASE WHEN Date LIKE '201201%' THEN Amount ELSE 0 END) AS January2012Spent FROM transactions_1k WHERE CustomerID = 38508;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(T1.Price ) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
        "difficulty": "moderate"
    },
    {
        "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
        "hint": "average price per single item = Total(price) / Total(amount)",
        "error_sql": "SELECT T1.CustomerID, AVG(T2.Price / T2.Amount) AS AveragePrice, T1.Currency\nFROM customers AS T1\nINNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID\nGROUP BY T1.CustomerID\nORDER BY SUM(T2.Price) DESC\nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "difficulty": "moderate"
    },
    {
        "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
        "hint": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
        "error_sql": "SELECT Y.CustomerID, Y.Consumption \nFROM yearmonth AS Y \nINNER JOIN transactions_1k AS T ON Y.CustomerID = T.CustomerID \nWHERE Y.Date = '201208' AND (T.Price / T.Amount) > 29.00 AND T.ProductID = 5;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "hint": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
        "error_sql": "SELECT COUNT(DISTINCT E.event_id) FROM event AS E INNER JOIN attendance AS A ON E.event_id = A.link_to_event WHERE E.type = 'Meeting' GROUP BY E.event_id HAVING COUNT(A.link_to_member) > 10;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "difficulty": "moderate"
    },
    {
        "question": "List the full name of the Student_Club members that grew up in Illinois state.",
        "hint": "full name of member refers to first_name, last_name",
        "error_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "difficulty": "simple"
    },
    {
        "question": "Was each expense in October Meeting on October 8, 2019 approved?",
        "hint": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
        "error_sql": "SELECT T1.approved FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.event_name = 'October Meeting' AND T2.event_date = '2019-10-08';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
        "hint": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
        "error_sql": "SELECT SUM(CASE WHEN substr(E.event_date, 1, 4) = '2019' THEN B.spent ELSE 0 END) - \n       SUM(CASE WHEN substr(E.event_date, 1, 4) = '2020' THEN B.spent ELSE 0 END) \nFROM event AS E \nINNER JOIN budget AS B ON E.event_id = B.link_to_event \nWHERE E.event_name = 'Student_Club';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "difficulty": "moderate"
    },
    {
        "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
        "hint": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status",
        "error_sql": "SELECT E.status \nFROM event AS E \nINNER JOIN expense AS EXP ON E.event_id = EXP.link_to_budget \nWHERE EXP.expense_description = 'Post Cards, Posters' AND EXP.expense_date = '2019-8-20'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
        "difficulty": "moderate"
    },
    {
        "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
        "hint": "list all members means to list all the full name; full name refers to first_name, last_name;",
        "error_sql": "SELECT first_name || ' ' || last_name AS full_name \nFROM member \nWHERE link_to_major IN (SELECT major_id FROM major WHERE department = 'School of Applied Sciences, Technology and Education');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "difficulty": "moderate"
    },
    {
        "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
        "hint": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
        "error_sql": "SELECT event.event_name, MAX(spent * 1.0 / amount) AS spend_to_budget_ratio \nFROM event \nINNER JOIN budget ON event.event_id = budget.link_to_event \nWHERE event.status = 'Closed' \nGROUP BY event.event_name \nORDER BY spend_to_budget_ratio DESC \nLIMIT 1;",
        "compiler_hint": "no such function: DIVIDE",
        "reflective_cot": "The original SQL query encountered an error because the `DIVIDE` function is not a standard SQL function. In many SQL implementations, division can be achieved by using the division operator (`/`). \n\nIn the corrected SQL, the expression `MAX(spent * 1.0 / amount)` successfully calculates the spend-to-budget ratio by multiplying `spent` by `1.0` to ensure floating-point division, allowing for decimal results instead of integer division.\n\n**Tip to Avoid Future Errors:** Always verify the syntax and functions available in the SQL dialect you are using. Using standard arithmetic operators (like `+`, `-`, `*`, `/`) can prevent errors with non-standard functions. Always refer to the documentation specific to the SQL database you're working with.",
        "ground_truth_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "List the name of students that have attended more than 7 events.",
        "hint": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
        "error_sql": "SELECT T1.first_name || ' ' || T1.last_name AS full_name \nFROM member AS T1 \nINNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member \nGROUP BY T1.member_id \nHAVING COUNT(T2.link_to_event) > 7;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
        "difficulty": "moderate"
    },
    {
        "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
        "hint": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "error_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name \nFROM member AS m \nINNER JOIN budget AS b ON m.member_id = b.link_to_member \nINNER JOIN event AS e ON b.link_to_event = e.event_id \nWHERE e.event_name = 'Yearly Kickoff';",
        "compiler_hint": "no such function: CONCAT",
        "reflective_cot": "The initial SQL query encountered an error because the `CONCAT` function is not universally available in all SQL database systems; in some, including SQLite, the string concatenation operator (`||`) is used instead. The corrected SQL effectively uses this operator to concatenate the `first_name` and `last_name` to create the full name.\n\nTo avoid making the same mistake in the future, it's essential to consult the specific SQL dialect documentation for the database system you're using. Familiarizing yourself with the functions and operators supported by that system can help you write compatible SQL queries from the start.",
        "ground_truth_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "difficulty": "moderate"
    },
    {
        "question": "Which event has the lowest cost?",
        "hint": "event refers to event_name; lowest cost means MIN(cost)",
        "error_sql": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.spent = (SELECT MIN(spent) FROM budget)",
        "compiler_hint": "no such column: budget.cost",
        "reflective_cot": "### Reflection on the Error:\n\nThe initial SQL query attempted to reference a column called `cost` in the `budget` table, which does not exist. The correct column for financial data in the `budget` table is `spent`. The corrected SQL accurately queries the `spent` field to find events with the lowest expenditures.\n\n### Tip to Avoid Future Mistakes:\n\nAlways double-check column names against the database schema before constructing queries. Utilize tools like IDEs or query builders that provide autocompletion and debugging to minimize typographical errors. Additionally, reading the error messages carefully can guide you to the specific issue.",
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
        "hint": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
        "error_sql": "SELECT COUNT(*) > 0 FROM attendance AS A \nINNER JOIN member AS M ON A.link_to_member = M.member_id \nINNER JOIN event AS E ON A.link_to_event = E.event_id \nWHERE M.first_name = 'Maya' AND M.last_name = 'Mclean' AND E.event_name = 'Women''s Soccer';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
        "hint": "total value refers to SUM(cost); 'October Meeting' is an event name;",
        "error_sql": "SELECT expense_description, SUM(cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T1.approved = 'yes' GROUP BY expense_description;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
        "difficulty": "moderate"
    },
    {
        "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
        "hint": "full name refers to first_name, last name",
        "error_sql": "SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T2.cost) AS total_cost \nFROM member AS T1 \nINNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member \nWHERE T1.member_id = 'rec4BLdZHS2Blfp4v' \nGROUP BY T1.member_id;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
        "difficulty": "simple"
    },
    {
        "question": "State the category of events were held at MU 215.",
        "hint": "'MU 215' is the location of event; ",
        "error_sql": "SELECT DISTINCT type FROM event WHERE location = 'MU 215'",
        "compiler_hint": "no such column: category",
        "reflective_cot": "### Reflection on Error:\nThe initial SQL query attempted to retrieve the `category` of events; however, the `event` table does not contain a `category` column, which led to the error. Instead, it contains a `type` column, which actually categorizes the events.\n\n### Correction Reasoning:\nUpon recognizing that the intended data (event type) was located under a different column name, I corrected the query to fetch the `type` of events at the specified location.\n\n### Tip to Avoid Future Mistakes:\nAlways double-check the schema of the tables to ensure the column names are correctly referenced in your SQL queries. This can help prevent misnaming and quickly identify the appropriate data fields.",
        "ground_truth_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "difficulty": "simple"
    },
    {
        "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
        "hint": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
        "error_sql": "SELECT B.category \nFROM budget AS B \nINNER JOIN event AS E ON B.link_to_event = E.event_id \nWHERE E.location = 'MU 215' AND E.type = 'Guest Speaker' AND B.spent = 0;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
        "difficulty": "moderate"
    },
    {
        "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
        "hint": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
        "error_sql": "SELECT first_name || ' ' || last_name AS full_name, phone \nFROM member \nWHERE member_id IN (\n    SELECT link_to_member \n    FROM expense \n    GROUP BY link_to_member \n    HAVING SUM(cost) > AVG(cost)\n);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
        "difficulty": "challenging"
    },
    {
        "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
        "hint": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
        "error_sql": "SELECT M.first_name || ' ' || M.last_name AS full_name, E.cost \nFROM expense AS E \nINNER JOIN member AS M ON E.link_to_member = M.member_id \nWHERE E.expense_description = 'Water, Veggie tray, supplies'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
        "difficulty": "challenging"
    },
    {
        "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
        "hint": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
        "error_sql": "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount \nFROM member AS T1 \nINNER JOIN income AS T2 ON T1.member_id = T2.link_to_member \nWHERE T2.date_received = '9/9/2019';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of female patient were born after 1930?",
        "hint": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')",
        "error_sql": "SELECT CAST(COUNT(ID) AS REAL) * 100 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F') FROM Patient WHERE Birthday > '1930-01-01' AND SEX = 'F'",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "### Reflection on the Error\n\nThe initial SQL query attempted to use the `YEAR` function, which is not supported in some SQL dialects, leading to an error. The corrected query accurately filters patients based on their `Birthday` using a date comparison rather than attempting to extract the year. This is a more direct and compatible approach.\n\n### Tip to Avoid Future Mistakes\n\nAlways check the compatibility of SQL functions with your database system's SQL dialect. When dealing with dates, prefer directly comparing dates in their full format instead of relying on specific functions, which may not be available. Familiarize yourself with the date handling capabilities of the SQL you are using to minimize such issues.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
        "hint": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL",
        "error_sql": "SELECT E.Symptoms, E.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday = (SELECT MAX(Birthday) FROM Patient) AND E.Symptoms IS NOT NULL;",
        "compiler_hint": "ambiguous column name: Diagnosis",
        "reflective_cot": "### Reflection on the Error\n\nThe error \"ambiguous column name: Diagnosis\" occurred because both the `Patient` and `Examination` tables contain a `Diagnosis` column. When a SQL query references a column that exists in more than one table in a join, it must be fully qualified with its respective table alias (or table name) to distinguish between them.\n\n### Reasoning for the Correction\n\nThe corrected SQL explicitly specifies `E.Diagnosis` to clarify that we are referring to the `Diagnosis` column from the `Examination` table, resolving the ambiguity.\n\n### Tip to Avoid Similar Mistakes\n\nAlways use table aliases or fully qualify column names when dealing with multiple tables in a join to prevent ambiguity. This practice enhances the clarity of your queries and minimizes errors.",
        "ground_truth_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "hint": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "error_sql": "SELECT L.Date, (strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday)) AS age \nFROM Laboratory AS L \nINNER JOIN Patient AS P ON L.ID = P.ID \nWHERE P.Diagnosis = 'SJS' \nORDER BY L.Date ASC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
        "hint": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
        "error_sql": "SELECT (julianday(`Examination Date`) - julianday(Birthday)) / 365.25 AS age, Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.HGB = (SELECT MAX(HGB) FROM Examination)",
        "compiler_hint": "no such function: year",
        "reflective_cot": "### Reflection on the Error and Correction:\n\nThe original SQL query attempted to use the `year()` function, which is not supported in SQLite. This led to the error \"no such function: year.\" In SQLite, calculating the difference between dates requires a different approach.\n\nIn the corrected SQL query, you used the `julianday()` function to convert dates to a numeric format. This allows for arithmetic operations to determine age accurately by dividing the difference in days by 365.25 to account for leap years.\n\n### Tip to Avoid Similar Mistakes:\n\nAlways check the documentation for the SQL dialect you are using to ensure the functions you intend to use are supported. When working with date calculations, familiarize yourself with the library's specific date and time functions to avoid syntax errors.",
        "ground_truth_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
        "hint": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
        "error_sql": "SELECT `aCL IgM` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1.`Examination Date` = '1993-11-12'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
        "difficulty": "moderate"
    },
    {
        "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
        "hint": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
        "error_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND ANA = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND ANA = 'S')",
        "compiler_hint": "misuse of aggregate: AVG()",
        "reflective_cot": "### Reflection on the SQL Query Error\n\nThe initial query encountered an error because `AVG()` is an aggregate function that cannot be used directly in the `WHERE` clause; it must be enclosed in a subquery or used in a `HAVING` clause after a `GROUP BY`. The corrected SQL effectively retrieves the average `aCL IgM` for the relevant patients first, and then checks if each patient's `aCL IgM` is 20% higher than that average.\n\n### Tip for Avoiding Similar Mistakes\n\nAlways remember that aggregate functions like `AVG()`, `SUM()`, and `COUNT()` can only be used in `SELECT`, `HAVING`, or subqueries. If you need to filter using an aggregate function's value, compute it in a subquery first.",
        "ground_truth_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
        "difficulty": "challenging"
    },
    {
        "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
        "hint": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; ",
        "error_sql": "SELECT DISTINCT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE P.Admission = '-' \nAND L.Date LIKE '1991-10%' \nAND L.`T-BIL` < 2.0;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
        "difficulty": "challenging"
    },
    {
        "question": "Was the patient with the number 57266's uric acid within a normal range?",
        "hint": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
        "error_sql": "SELECT CASE \n           WHEN (UA > 8.0 AND SEX = 'M') OR (UA > 6.5 AND SEX = 'F') THEN 'Within normal range' \n           ELSE 'Not within normal range' \n       END AS uric_acid_status \nFROM Laboratory AS L \nINNER JOIN Patient AS P ON L.ID = P.ID \nWHERE P.ID = 57266;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
        "difficulty": "moderate"
    },
    {
        "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
        "hint": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
        "error_sql": "SELECT P.SEX, GROUP_CONCAT(DISTINCT P.ID) AS Patient_Ids \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE L.`T-BIL` >= 2.0 \nGROUP BY P.SEX;",
        "compiler_hint": "ambiguous column name: ID",
        "reflective_cot": "The error \"ambiguous column name: ID\" occurred because the column `ID` existed in both the `Patient` and `Laboratory` tables, leading to confusion in the SQL query. In SQL, when multiple tables contain a column with the same name and that column is referenced without a specific qualifier, it can cause ambiguity.\n\nThe corrected SQL explicitly prefixes the `ID` column with the table alias `P` (`P.ID`), clarifying which table's `ID` is being referenced. This resolves the ambiguity.\n\n**Tip to Avoid Future Mistakes:** Always qualify column names with their respective table aliases when dealing with joins or multiple tables containing columns with the same name. This practice enhances clarity and avoids ambiguity errors.",
        "ground_truth_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average age of the male patient with high cholesterol?",
        "hint": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
        "error_sql": "SELECT AVG(strftime('%Y', 'now') - strftime('%Y', Birthday)) FROM Patient WHERE SEX = 'M' AND ID IN (SELECT ID FROM Laboratory WHERE `T-CHO` >= 250);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
        "hint": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
        "error_sql": "SELECT P.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS Age, P.Diagnosis \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE L.RBC < 3.5;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
        "difficulty": "moderate"
    },
    {
        "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
        "hint": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
        "error_sql": "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE L.HCT >= 52 \nGROUP BY P.ID \nHAVING COUNT(L.ID) > 2;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
        "difficulty": "challenging"
    },
    {
        "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
        "hint": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
        "error_sql": "SELECT \n    SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS lower_than_normal,\n    SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS higher_than_normal\nFROM Laboratory\nWHERE PLT <= 100 OR PLT >= 400;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
        "difficulty": "challenging"
    },
    {
        "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
        "hint": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
        "error_sql": "SELECT P.ID, P.SEX, P.Birthday, P.Admission, P.Diagnosis \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE strftime('%Y', L.Date) = '1984' \nAND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50 \nAND L.PLT BETWEEN 100 AND 400;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
        "difficulty": "challenging"
    },
    {
        "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
        "hint": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
        "error_sql": "SELECT CAST(SUM(CASE WHEN P.SEX = 'F' AND L.PT >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN L.PT >= 14 THEN 1 ELSE 0 END) \nFROM Patient P \nINNER JOIN Laboratory L ON P.ID = L.ID \nWHERE SUBSTR(date('now'), 1, 4) - SUBSTR(P.Birthday, 1, 4) > 55;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
        "difficulty": "challenging"
    },
    {
        "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
        "hint": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
        "error_sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE P.SEX = 'M' \nAND L.WBC > 3.5 AND L.WBC < 9.0 \nAND (L.FG <= 150 OR L.FG >= 450);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients with an Ig G higher than normal?",
        "hint": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
        "difficulty": "simple"
    },
    {
        "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
        "hint": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
        "error_sql": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGG > 900 AND L.IGG < 2000 AND L.Symptoms IS NOT NULL;",
        "compiler_hint": "no such column: E.IGG",
        "reflective_cot": "### Reflection on the Error and Correction:\n\nIn the initial SQL query, I mistakenly referenced the `IGG` column from the `Examination` table, which does not contain this column. The correct table to refer to for Ig G levels is the `Laboratory` table, where `IGG` is indeed located. Additionally, the `Symptoms` column is found in the `Examination` table, not in the `Laboratory` table. Therefore, I needed to ensure that `Symptoms IS NOT NULL` referenced the correct table in my query.\n\n### Tip to Avoid Similar Mistakes:\n\nAlways verify the schema of all relevant tables before constructing your queries. Cross-reference the columns involved with their respective tables to ensure you are pulling data from the correct sources.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
        "hint": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
        "error_sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE L.IGA > 80 AND L.IGA < 500 \nAND DATE(P.`First Date`) >= '1990-01-01';",
        "compiler_hint": "no such column: E.IGA",
        "reflective_cot": "### Reflection on the Error and Correction\n\nThe initial error occurred because the query attempted to access the `IGA` column from the wrong table (`Examination`), which does not contain this field. Upon reflection, the corrected query rightly referenced the `Laboratory` table, where the `IGA` column exists.\n\n### Tip for Avoiding Similar Mistakes\n\n**Tip:** Always verify the specific table structures before writing queries to ensure that the fields being referenced exist in the correct tables. Using schema diagrams or documentation can help prevent these types of errors. Additionally, always double-check the relationships between tables to ensure you're joining on the correct keys.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
        "hint": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
        "error_sql": "SELECT Diagnosis FROM Laboratory WHERE IGM <= 40 OR IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(*) DESC LIMIT 1;",
        "compiler_hint": "no such column: aCL_IgM",
        "reflective_cot": "### Reflection on the SQL Queries\n\nThe initial error occurred because the query tried to reference the `aCL IgM` column from the wrong table (`Examination`), and it was incorrectly formatted as `aCL_IgM`. In the corrected query, the reference is made to the appropriate table (`Laboratory`) and the correct column name (`IGM`). This adjustment ensures it targets the right dataset for abnormal IgM levels.\n\n### Tip to Avoid Future Errors\n\nAlways double-check the table and column names for accuracy, especially when dealing with multiple tables. Use explicit aliases or comments in complex queries to clarify which dataset you are referencing. Additionally, ensure that SQL syntax matches database schema definitions, including proper formatting for spaces in column names.",
        "ground_truth_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
        "hint": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE L.RNP IN ('-', '+-') AND P.Admission = '+';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
        "hint": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
        "error_sql": "SELECT COUNT(*) \nFROM Patient AS P \nINNER JOIN Examination AS E ON P.ID = E.ID \nWHERE E.ANA IN ('-', '+-') AND E.Thrombosis = 0;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
        "hint": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE P.SEX = 'F' AND L.SC170 IN ('negative', '0') AND L.Symptoms IS NULL;",
        "compiler_hint": "no such column: E.SC170",
        "reflective_cot": "The error in the original SQL query arose because it tried to access the `SC170` column from the `Examination` table, where it does not exist. The `SC170` column is actually in the `Laboratory` table, leading to the \"no such column\" error.\n\nIn correcting the SQL, the query rightfully joined the `Patient` table with the `Laboratory` table instead of the `Examination` table, allowing for successful access to the `SC170` column. Additionally, it maintained the constraints for filtering female patients and those without symptoms.\n\n**Tip for Future SQL Queries:**\nAlways verify that the referenced columns exist in the joined tables. Cross-check the structure of all tables involved in your query to ensure the right columns are being accessed. This practice can help prevent similar errors.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
        "difficulty": "challenging"
    },
    {
        "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
        "hint": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M';",
        "compiler_hint": "no such column: E.CENTROMEA",
        "reflective_cot": "The error in the original SQL query arose because the `CENTROMEA` and `SSB` columns were incorrectly referenced from the `Examination` table, where they do not exist. These columns are actually present in the `Laboratory` table. \n\nIn the corrected SQL, I correctly joined the `Patient` table with the `Laboratory` table instead of the `Examination` table and used the columns accurately from the `Laboratory` table in the `WHERE` clause.\n\n### Tip:\nAlways ensure you are referencing columns from the correct tables. When encountering \"no such column\" errors, double-check the table schema and verify that the column belongs to the intended table after any JOIN operations. Additionally, if your query involves multiple tables, consider listing the columns with their corresponding table aliases to enhance clarity and avoid confusion.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
        "hint": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT MIN(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT >= 60;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
        "hint": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
        "error_sql": "SELECT COUNT(DISTINCT P.ID) \nFROM Patient AS P \nINNER JOIN Examination AS E ON P.ID = E.ID \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');",
        "compiler_hint": "no such column: L.KCT",
        "reflective_cot": "### Reflection:\nThe error in the initial SQL query occurred because it attempted to reference KCT, RVVT, and LAC from the `Laboratory` table, where they do not exist. These columns are part of the `Examination` table. In the corrected version, the query properly joins the `Examination` table to access these columns, ensuring the criteria match the correct data source.\n\n### Tip:\nAlways double-check the tables and their respective columns before writing SQL queries. Understanding the schema well can help avoid referencing errors. When in doubt, look up the structure of the relevant tables to confirm the column names and their sources.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
        "difficulty": "challenging"
    },
    {
        "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
        "hint": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));",
        "error_sql": "SELECT T.team_long_name FROM Team AS T \nINNER JOIN Match AS M ON T.team_api_id = M.away_team_api_id \nINNER JOIN League AS L ON M.league_id = L.id \nWHERE L.name = 'Scotland Premier League' AND M.season = '2009/2010' \nGROUP BY T.team_long_name \nHAVING COUNT(*) = (SELECT MAX(away_wins) FROM \n                   (SELECT COUNT(*) AS away_wins FROM Match \n                    WHERE away_team_api_id = T.team_api_id \n                    AND away_team_goal > home_team_goal \n                    AND season = '2009/2010' \n                    GROUP BY away_team_api_id));",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
        "hint": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
        "error_sql": "SELECT team_api_id, buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
        "difficulty": "moderate"
    },
    {
        "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
        "hint": " league with highest matches of all time refers to MAX(COUNT(league_id));",
        "error_sql": "SELECT T1.name, COUNT(T2.id) AS match_count FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id GROUP BY T1.id ORDER BY match_count DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
        "difficulty": "moderate"
    },
    {
        "question": "List the long name of teams with above-average build-up play passing in 2012.",
        "hint": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
        "error_sql": "SELECT T.team_long_name \nFROM Team_Attributes AS T \nJOIN Team AS T2 ON T.team_fifa_api_id = T2.team_fifa_api_id \nWHERE T.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL AND strftime('%Y', date) = '2012') \nAND strftime('%Y', T.date) = '2012';",
        "compiler_hint": "no such column: T.team_long_name",
        "reflective_cot": "### Reflection:\nThe initial error occurred because the query attempted to select a column (`team_long_name`) from `Team_Attributes`, a table where this column does not exist. The correct approach involved joining the `Team` table to access the `team_long_name` while filtering based on the conditions for `buildUpPlayPassing` and the year.\n\n### Tip to Avoid Future Mistakes:\nAlways double-check the schema to ensure the correct table is being referenced for each column being selected. When using joins, ensure that the primary and foreign keys are properly linked to access necessary data from related tables.",
        "ground_truth_sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "hint": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
        "error_sql": "SELECT CAST(SUM(CASE WHEN PA.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.player_fifa_api_id) \nFROM Player AS P \nINNER JOIN Player_Attributes AS PA ON P.player_fifa_api_id = PA.player_fifa_api_id \nWHERE P.birthday BETWEEN '1987-01-01' AND '1992-12-31'",
        "compiler_hint": "no such column: preferred_foot",
        "reflective_cot": "### Reflection on the Error\nThe original SQL query encountered an error because the `preferred_foot` column is part of the `Player_Attributes` table, not the `Player` table. Therefore, it couldn't be referenced directly in the `SELECT` clause for the `Player` table.\n\nThe corrected SQL query properly joins the `Player` table with the `Player_Attributes` table. This allows access to the `preferred_foot` column when calculating the percentage of players who prefer their left foot.\n\n### Tip to Avoid Similar Mistakes\nAlways ensure you understand the schema and relationships between tables before constructing your queries. Utilize proper JOIN operations to access columns from related tables, and double-check that you are referencing the correct table for each field.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "difficulty": "challenging"
    },
    {
        "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
        "hint": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));",
        "error_sql": "SELECT T.player_name, AVG(PA.heading_accuracy) AS average_heading_accuracy \nFROM Player AS T \nINNER JOIN Player_Attributes AS PA ON T.player_fifa_api_id = PA.player_fifa_api_id \nWHERE T.height > 180 \nGROUP BY T.player_name \nORDER BY average_heading_accuracy DESC \nLIMIT 10;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "Who has the highest average finishing rate between the highest and shortest football player?",
        "hint": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
        "error_sql": "SELECT player_api_id, AVG(finishing) AS average_finishing \nFROM Player_Attributes \nWHERE player_api_id IN (\n    SELECT player_api_id \n    FROM Player \n    WHERE height = (SELECT MAX(height) FROM Player) \n    OR height = (SELECT MIN(height) FROM Player)\n) \nGROUP BY player_api_id \nORDER BY average_finishing DESC \nLIMIT 1;",
        "compiler_hint": "misuse of aggregate function AVG()",
        "reflective_cot": "### Reflection:\nThe initial query encountered an error due to the misuse of the `AVG()` aggregate function. In SQL, aggregate functions like `AVG()` cannot be used directly with `MAX()` as shown in the original query. Instead, you must first compute the average for each player and then apply other functions like `MAX()` or `ORDER BY` to determine the highest average.\n\n### Reasoning for Correction:\nThe corrected SQL query properly calculates the average finishing rate for both the tallest and shortest players by using a `GROUP BY` clause. It then orders the results in descending order and limits the output to the top result, effectively yielding the player with the highest finishing rate among the two.\n\n### Tip to Avoid Future Mistakes:\nWhen using aggregate functions, always compute the desired values in a sub-query before applying other aggregate or selection functions. This ensures that each function is used correctly within its context.",
        "ground_truth_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
        "hint": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
        "error_sql": "SELECT AVG(T2.overall_rating) FROM Player_Attributes AS T2 INNER JOIN Player AS T1 ON T2.player_api_id = T1.player_api_id WHERE strftime('%Y', T2.date) >= '2010' AND strftime('%Y', T2.date) <= '2015' AND T1.height > 170;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
        "hint": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
        "error_sql": "SELECT ABS(SUM(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.id ELSE NULL END) - SUM(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.id ELSE NULL END)) AS ball_control_difference \nFROM Player_Attributes AS PA \nJOIN Player AS P ON PA.player_api_id = P.player_api_id;",
        "compiler_hint": "no such column: player_name",
        "reflective_cot": "### Reflection on the Error:\nThe initial SQL query failed because the column `player_name` was not accessible in the context of the `Player_Attributes` table. The `player_name` column exists in the `Player` table, but it was not properly joined in the query.\n\n### Correction Explanation:\nThe corrected SQL joins the `Player` table with `Player_Attributes` on the `player_api_id`, allowing it to reference `player_name` directly, thus enabling the calculation of average ball control scores for both players.\n\n### Tip to Avoid Future Mistakes:\nAlways ensure that all necessary columns used in your calculations are accessible in the context of your query. When dealing with multiple tables, explicitly join these tables to access their respective columns. Review the schema beforehand to verify relationships between tables.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
        "hint": "The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT player_name FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada'))",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Give the name of the league had the most matches in the 2008/2009 season?",
        "hint": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');",
        "error_sql": "SELECT T2.name FROM League AS T2 INNER JOIN (SELECT league_id, COUNT(*) AS match_count FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY match_count DESC LIMIT 1) AS T4 ON T2.id = T4.league_id;",
        "compiler_hint": "no such column: T3.name",
        "reflective_cot": "The initial query attempted to reference `T3.name`, which was not defined or included in the `FROM` clause. The corrected SQL correctly refers to `T2.name`, which is the appropriate alias for the `League` table, ensuring the column exists within the context of the query.\n\n### Tip to Avoid Similar Mistakes:\nAlways ensure that when referencing columns in your query, the table or alias you are referring to is defined in the `FROM` clause or joins. Double-check your aliases for consistency and ensure they match the tables or subqueries you are utilizing.",
        "ground_truth_sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
        "difficulty": "simple"
    },
    {
        "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
        "hint": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
        "error_sql": "SELECT (CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) AS REAL) - CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS REAL)) / CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS REAL) * 100 AS percentage_difference;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "hint": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "error_sql": "SELECT date FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant'));",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
        "hint": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
        "error_sql": "SELECT (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12') / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') * 100 AS percentage;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
        "difficulty": "challenging"
    },
    {
        "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
        "hint": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
        "error_sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
        "difficulty": "simple"
    },
    {
        "question": "What is the difference between players 6 and 23's jumping scores?",
        "hint": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
        "error_sql": "SELECT ABS((SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23)) AS jumping_difference;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
        "difficulty": "simple"
    },
    {
        "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
        "hint": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
        "error_sql": "SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' LIMIT 4;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 4",
        "difficulty": "moderate"
    },
    {
        "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
        "hint": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
        "error_sql": "SELECT finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
        "hint": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))",
        "error_sql": "SELECT L.name, COUNT(M.id) AS game_count \nFROM Match AS M \nINNER JOIN League AS L ON M.league_id = L.id \nWHERE M.season = '2015/2016' \nGROUP BY L.name \nORDER BY game_count DESC \nLIMIT 4;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
        "difficulty": "simple"
    },
    {
        "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
        "hint": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
        "error_sql": "SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Please give the name of the race held on the circuits in Germany.",
        "hint": "Germany is a name of country;",
        "error_sql": "SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
        "difficulty": "simple"
    },
    {
        "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "hint": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
        "error_sql": "SELECT T1.number FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.raceId = 903 AND T1.q3 LIKE '0:01:54'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
        "difficulty": "simple"
    },
    {
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "hint": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
        "error_sql": "SELECT COUNT(DISTINCT T1.driverId) \nFROM results AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nWHERE T2.name = 'Bahrain Grand Prix' AND T1.time IS NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "difficulty": "simple"
    },
    {
        "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
        "hint": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT T1.driverId, T1.forename, T1.surname, T1.dob FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "hint": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
        "error_sql": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 161 AND T2.time LIKE '0:01:27';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "difficulty": "moderate"
    },
    {
        "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
        "hint": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;",
        "error_sql": "SELECT T3.url \nFROM constructorResults AS T1 \nINNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId \nINNER JOIN races AS T3 ON T1.raceId = T3.raceId \nWHERE T1.raceId = 9 AND T1.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
        "hint": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
        "error_sql": "SELECT T3.code FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.round = 45 AND T1.q3 LIKE '0:01:33%'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
        "difficulty": "simple"
    },
    {
        "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
        "hint": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
        "error_sql": "SELECT T1.driverId, T2.dob FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.time IS NOT NULL ORDER BY T2.dob DESC LIMIT 1;",
        "compiler_hint": "ambiguous column name: driverId",
        "reflective_cot": "### Reflection on the SQL Query Error\n\nThe error \"ambiguous column name: driverId\" occurred because both the `results` and `drivers` tables have a column named `driverId`. When you select `driverId`, the database cannot determine which one you're referring to since it appears in both tables.\n\n### Reasoning for the Correction\n\nIn the corrected SQL query, we explicitly select `T2.dob`, ensuring clarity in the source of the data. By referencing columns with their table aliases (e.g., `T1.driverId`, `T2.dob`), we eliminate ambiguity, allowing the SQL engine to interpret the query correctly.\n\n### Tip to Avoid Future Mistakes\n\nAlways use table aliases when referencing columns that may exist in multiple tables to provide clear context and prevent ambiguity, especially in joins. This best practice enhances code readability and robustness, reducing the likelihood of errors during execution.",
        "ground_truth_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "hint": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
        "error_sql": "SELECT (T1.fastestLapSpeed - T2.fastestLapSpeed) * 100 / T2.fastestLapSpeed AS percent_faster \nFROM results AS T1 \nJOIN results AS T2 ON T1.raceId = 853 AND T2.raceId = 854 \nJOIN drivers AS D ON T1.driverId = D.driverId \nWHERE D.forename = 'Paul' AND D.surname = 'di Resta';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
        "difficulty": "challenging"
    },
    {
        "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
        "hint": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'",
        "error_sql": "SELECT CAST(COUNT(T1.driverId) AS REAL) * 100 / COUNT(*) AS completion_rate FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16' AND T1.time IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "hint": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
        "error_sql": "SELECT D.forename, D.surname, R.name \nFROM lapTimes AS L \nINNER JOIN drivers AS D ON L.driverId = D.driverId \nINNER JOIN races AS R ON L.raceId = R.raceId \nWHERE L.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
        "hint": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
        "error_sql": "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nINNER JOIN drivers AS T3 ON T1.driverId = T3.driverId \nWHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' \nAND T2.name = 'Malaysian Grand Prix';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
        "hint": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T2.position > 1 THEN 1 END) AS REAL) * 100 / COUNT(T2.raceId) FROM results AS T2 INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.surname = 'Hamilton' AND T2.raceId IN (SELECT raceId FROM races WHERE year >= 2010);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
        "difficulty": "challenging"
    },
    {
        "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
        "hint": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);",
        "error_sql": "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, MAX(T2.points) AS max_points \nFROM drivers AS T1 \nINNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId \nWHERE T2.wins = (SELECT MAX(wins) FROM driverStandings) \nGROUP BY T1.driverId \nORDER BY COUNT(T2.wins) DESC \nLIMIT 1;",
        "compiler_hint": "no such function: CONCAT",
        "reflective_cot": "The original SQL query failed due to the use of the `CONCAT` function, which is not supported by SQLite. Instead, SQLite uses the `||` operator for string concatenation. The corrected query reflects this by using `T1.forename || ' ' || T1.surname`.\n\n### Reflection on Error:\nThe error resulted from a misunderstanding of the functions available in SQLite. It's crucial to be aware of the specific SQL dialect and its functions when writing queries.\n\n### Tip to Avoid Future Mistakes:\nAlways verify the SQL functions and syntax supported by the specific database you are using. Reviewing the documentation for the database can help prevent such mistakes.",
        "ground_truth_sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How old is the youngest Japanese driver? What is his name?",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "error_sql": "SELECT forename, surname, (strftime('%Y', 'now') - strftime('%Y', dob)) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "### Reflection on the Error\n\nThe original error occurred because SQLite doesn't support the `YEAR()` function used in some other SQL databases for extracting the year from a date. In SQLite, to achieve the same effect, we can use the `strftime()` function.\n\n### Corrected SQL Reasoning\n\nThe corrected SQL query uses `strftime('%Y', 'now')` to get the current year and `strftime('%Y', dob)` to obtain the year from the `dob` column directly. Subtracting these values yields the age of the driver.\n\n### Tip to Avoid Future Mistakes\n\nAlways check the specific functions and syntax supported by the SQL database you are using, as different SQL dialects have variations in their functions. For SQLite, familiarize yourself with functions like `strftime()` for date manipulations.",
        "ground_truth_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which race was Alex Yoong in when he was in track number less than 20?",
        "hint": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
        "error_sql": "SELECT T2.name, T2.date FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T1.position < 20;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
        "difficulty": "simple"
    },
    {
        "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
        "hint": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T2.name, T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' AND T1.fastestLap = 1 ORDER BY T1.milliseconds ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "hint": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T1.year, T2.points \nFROM races AS T1 \nINNER JOIN results AS T2 ON T1.raceId = T2.raceId \nINNER JOIN drivers AS T3 ON T2.driverId = T3.driverId \nWHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' \nORDER BY T1.year ASC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which country is the oldest driver from?",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
        "hint": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
        "error_sql": "SELECT T3.driverRef FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2007 AND T2.name = 'Canadian Grand Prix' AND T1.positionOrder = 1;",
        "compiler_hint": "no such column: T1.driverRef",
        "reflective_cot": "The error in the original SQL query arose because the `driverRef` column was not included in the `results` table (aliased as `T1`). Instead, it is part of the `drivers` table. The corrected SQL query successfully joined the `results`, `races`, and `drivers` tables, allowing for the retrieval of the `driverRef` using the correct references.\n\n**Tip to Avoid Similar Mistakes:**\nAlways verify which tables contain the columns you need before writing your SQL query. Utilize explicit joins to connect all necessary tables, ensuring that you reference the right table for each column.",
        "ground_truth_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
        "difficulty": "moderate"
    },
    {
        "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
        "hint": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T1.raceId FROM results AS T1 \nINNER JOIN drivers AS T2 ON T1.driverId = T2.driverId \nWHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' \nORDER BY T1.rank ASC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
        "difficulty": "simple"
    },
    {
        "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
        "hint": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
        "error_sql": "SELECT COUNT(DISTINCT T1.driverId) \nFROM results AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nWHERE T2.year = 2008 AND T2.round = 2 AND T1.time IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
        "difficulty": "moderate"
    },
    {
        "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
        "hint": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
        "error_sql": "SELECT \n    (CAST(SUBSTR(champion.time, 1, 2) AS INTEGER) * 3600 + \n    CAST(SUBSTR(champion.time, 4, 2) AS INTEGER) * 60 + \n    CAST(SUBSTR(champion.time, 7, 2) AS INTEGER) + \n    CAST(SUBSTR(champion.time, 10, 3) AS INTEGER) / 1000) AS champion_time,\n    (CAST(SUBSTR(last_driver.time, 1, 2) AS INTEGER) * 3600 + \n    CAST(SUBSTR(last_driver.time, 4, 2) AS INTEGER) * 60 + \n    CAST(SUBSTR(last_driver.time, 7, 2) AS INTEGER) + \n    CAST(SUBSTR(last_driver.time, 10, 3) AS INTEGER) / 1000) AS last_driver_time,\n    100 * ((last_driver.time + champion.time - champion.time) / (last_driver_time)) AS percentage_faster\nFROM \n    results AS champion\nJOIN \n    results AS last_driver ON champion.raceId = last_driver.raceId \nWHERE \n    champion.positionOrder = 1 \n    AND last_driver.positionOrder = (SELECT COUNT(*) FROM results WHERE raceId = champion.raceId) \n    AND champion.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') \n    AND champion.time IS NOT NULL \n    AND last_driver.time IS NOT NULL;",
        "compiler_hint": "no such column: last_driver.incremental_time",
        "reflective_cot": "### Reflection\n\nThe initial error occurred because the query referenced a non-existent column `last_driver.incremental_time`, which led to confusion about how to compute the last driver's finishing time. The correction attempts to manipulate time string formats but incorrectly uses `last_driver.time` in an arithmetic context, which doesn't align with the intended calculation of total time.\n\n### Reasoning\n\nIn SQL, when performing calculations involving time or other derived attributes, ensure that the column names exist and that the operations align with your logic. Always verify that computed values (like cumulative times) come from the right sources or equations.\n\n### Tip\n\nTo avoid similar mistakes in the future, double-check column references against the database schema and validate calculations step-by-step to ensure you're using the correct data types and values. Writing clear comments can also help clarify the logic behind computations.",
        "ground_truth_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
        "difficulty": "challenging"
    },
    {
        "question": "Please list the constructor names with 0 points at race 291.",
        "hint": "race at 291 refers to raceID = 291;",
        "error_sql": "SELECT C.name FROM constructors AS C \nINNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId \nWHERE CR.raceId = 291 AND CR.points = 0;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
        "difficulty": "simple"
    },
    {
        "question": "How many Japanese constructors have 0 points in 2 races?",
        "hint": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
        "error_sql": "SELECT COUNT(DISTINCT T1.constructorId) \nFROM constructorResults AS T1 \nINNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId \nWHERE T2.nationality = 'Japanese' AND T1.points = 0 \nGROUP BY T1.constructorId \nHAVING COUNT(T1.raceId) = 2;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
        "difficulty": "simple"
    },
    {
        "question": "What is the average time in seconds of champion for each year, before year 1975?",
        "hint": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
        "error_sql": "SELECT AVG(\n    (CAST(SUBSTR(r.time, 1, 2) AS INTEGER) * 3600) +\n    (CAST(SUBSTR(r.time, 4, 2) AS INTEGER) * 60) +\n    CAST(SUBSTR(r.time, 7, 2) AS INTEGER)\n) AS average_time_seconds\nFROM results AS r\nINNER JOIN races AS ra ON r.raceId = ra.raceId\nWHERE r.time IS NOT NULL AND ra.year < 1975 AND r.positionOrder = 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
        "difficulty": "challenging"
    },
    {
        "question": "What is the fastest lap number of the champion in 2009?",
        "hint": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
        "error_sql": "SELECT fastestLap FROM results WHERE raceId IN (SELECT raceId FROM driverStandings WHERE driverId IN (SELECT driverId FROM driverStandings WHERE year = 2009 AND position = 1));",
        "compiler_hint": "no such column: year",
        "reflective_cot": "### Reflection on the Error and Correction:\n\nThe original SQL query attempted to reference a `year` column within the `driverStandings` table, which does not exist. The correct SQL nested the selection of the `driverId` based on the driver standing for 2009. The corrected SQL effectively retrieves the `fastestLap` of the champion by properly linking the tables: `results`, `driverStandings`, and filtering by `year` within the appropriate context.\n\n### Tip to Avoid Similar Mistakes:\n\nAlways verify the structure of the database schema before constructing queries. Cross-reference the relevant tables and their columns to ensure that any fields you reference actually exist in the tables you are querying.",
        "ground_truth_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "simple"
    },
    {
        "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
        "hint": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
        "error_sql": "SELECT CAST(COUNT(DISTINCT T1.driverId) AS REAL) * 100 / (SELECT COUNT(DISTINCT driverId) FROM results AS T3 INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year BETWEEN 2000 AND 2005) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE strftime('%Y', T1.dob) < '1985' AND T2.laps > 50;",
        "compiler_hint": "no such function: year",
        "reflective_cot": "The error encountered was due to the incorrect use of the `year()` function, which does not exist in SQLite. Instead, date manipulation in SQLite relies on functions like `strftime()`, which can extract parts of a date string. The corrected SQL query successfully uses `strftime('%Y', T1.dob)` to compare the year part of the date.\n\n### Tip:\nAlways check the documentation for SQL functions available in your specific database management system. When dealing with date and time, familiarize yourself with the correct functions for extracting and manipulating dates to avoid such errors.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
        "difficulty": "challenging"
    },
    {
        "question": "How many French drivers who obtain the laptime less than 02:00.00?",
        "hint": "lap time less than 02:00.00 refers to seconds < 120;",
        "error_sql": "SELECT COUNT(DISTINCT T1.driverId) \nFROM lapTimes AS T1 \nINNER JOIN drivers AS T2 ON T1.driverId = T2.driverId \nWHERE T1.milliseconds < 120000 AND T2.nationality = 'French';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "difficulty": "moderate"
    },
    {
        "question": "List out the code for drivers who have nationality in American.",
        "hint": "nationality = 'American'",
        "error_sql": "SELECT driverRef FROM drivers WHERE nationality = 'American';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT code FROM drivers WHERE Nationality = 'American'",
        "difficulty": "simple"
    },
    {
        "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
        "hint": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
        "error_sql": "SELECT driverId, COUNT(*) AS netherlandic_count FROM drivers WHERE nationality = 'Netherlands' AND driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3) GROUP BY driverId;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
        "difficulty": "simple"
    },
    {
        "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
        "hint": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "error_sql": "SELECT COUNT(raceId) AS times_held, location, lat, lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Austria' GROUP BY location, lat, lng;",
        "compiler_hint": "no such column: raceId",
        "reflective_cot": "### Reflection:\nThe initial SQL query attempted to count `raceId` from the `circuits` table, which does not contain this column. The error arose because it tried to aggregate data without the necessary context from the related `races` table. The corrected SQL properly includes an `INNER JOIN` between `circuits` and `races` to connect the two tables based on the `circuitId`, allowing for the successful aggregation of races held in Austria.\n\n### Tip:\nAlways ensure that when aggregating data, you are referencing columns available in the joined tables, especially when combining data from multiple tables. Double-check the schema relationships before writing the SQL queries to avoid similar errors.",
        "ground_truth_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "difficulty": "simple"
    },
    {
        "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
        "error_sql": "SELECT T1.dob, T2.date, T2.time FROM drivers AS T1 INNER JOIN qualifying AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) ORDER BY T2.date ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "hint": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980<= year(dob) <=1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "error_sql": "SELECT T1.forename || ' ' || T1.surname AS full_name, AVG(T2.milliseconds) AS avg_duration \nFROM drivers AS T1 \nINNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId \nWHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1980' AND '1985' \nGROUP BY T1.driverId \nORDER BY avg_duration ASC \nLIMIT 3;",
        "compiler_hint": "no such function: year",
        "reflective_cot": "The initial SQL query failed because SQLite does not support the `year()` function to extract the year from a date. Instead, the corrected SQL used `strftime('%Y', T1.dob)` to retrieve the year in a format compatible with SQLite.\n\n### Reasoning:\n1. **Error**: The original query attempted to use a non-existent function, causing it to fail.\n2. **Correction**: Switching to `strftime()` provided a native SQLite method to format the date, resolving the error.\n\n### Tip:\nAlways consult the documentation for the specific database you\u2019re using to ensure compatibility with date and time functions, and utilize them correctly to avoid similar issues.",
        "ground_truth_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
        "hint": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
        "error_sql": "SELECT D.forename, D.surname, R.time FROM results AS R INNER JOIN races AS RAC ON R.raceId = RAC.raceId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE RAC.year = 2008 AND RAC.name = 'Canadian Grand Prix' AND R.positionOrder = 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "moderate"
    },
    {
        "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
        "hint": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
        "error_sql": "SELECT SUM(T1.points) AS total_points, T2.name, T2.nationality \nFROM constructorStandings AS T1 \nINNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId \nINNER JOIN races AS T3 ON T1.raceId = T3.raceId \nWHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 \nGROUP BY T1.constructorId \nORDER BY total_points DESC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "hint": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
        "error_sql": "SELECT D.forename || ' ' || D.surname FROM qualifying AS Q \nINNER JOIN races AS R ON Q.raceId = R.raceId \nINNER JOIN drivers AS D ON Q.driverId = D.driverId \nWHERE R.round = 3 AND R.year = 2008 AND Q.position = 1",
        "compiler_hint": "no such column: T1.forename",
        "reflective_cot": "### Reflection:\nThe error in the original SQL query occurred because it attempted to reference the `forename` and `surname` columns from the `qualifying` table, where they do not exist. The correct approach involved joining the `drivers` table, which contains these columns, to retrieve the full name of the driver.\n\n### Tip:\nAlways double-check which tables and columns your SQL query references, especially after joins. Keep a clear mental map of the schema, and make sure to look up columns in the correct tables to avoid referencing non-existent columns.",
        "ground_truth_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
        "hint": "full name refers to forename+surname; Youngest racer = MAX(dob)",
        "error_sql": "SELECT forename || ' ' || surname AS full_name, nationality, (SELECT name FROM races WHERE raceId = (SELECT raceId FROM results WHERE driverId = (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1) LIMIT 1)) AS first_race_name FROM drivers WHERE dob = (SELECT MAX(dob) FROM drivers)",
        "compiler_hint": "no such function: CONCAT",
        "reflective_cot": "### Reflection\n\nThe initial SQL query attempted to use the `CONCAT` function, which is not supported in SQLite. Instead, I corrected it to use the `||` operator for string concatenation, which is the appropriate method in SQLite.\n\n### Tip\n\nTo avoid such errors in the future, familiarize yourself with the specific functions supported by the SQL dialect you are using. Always refer to the official documentation when in doubt, especially regarding string operations and functions.",
        "ground_truth_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
        "hint": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n",
        "error_sql": "SELECT COUNT(*) FROM results WHERE driverId = (SELECT driverId FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.name = 'Canadian Grand Prix' AND R.statusId = 3 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1) AND statusId = 3;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
        "hint": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
        "error_sql": "SELECT T1.forename || ' ' || T1.surname AS full_name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time = (SELECT MIN(time) FROM lapTimes) LIMIT 20;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "difficulty": "challenging"
    },
    {
        "question": "Please list the lap records for the circuits in Italy.",
        "hint": "lap record means the fastest time recorded which refers to time",
        "error_sql": "SELECT L.raceId, L.driverId, L.lap, L.time \nFROM lapTimes AS L \nJOIN races AS R ON L.raceId = R.raceId \nJOIN circuits AS C ON R.circuitId = C.circuitId \nWHERE C.country = 'Italy' \nORDER BY L.time ASC;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "hint": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "error_sql": "SELECT T1.superhero_name, T1.height_cm FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "difficulty": "moderate"
    },
    {
        "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "hint": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "error_sql": "SELECT C.colour, COUNT(S.id) AS superhero_count\nFROM superhero AS S\nINNER JOIN publisher AS P ON S.publisher_id = P.id\nINNER JOIN colour AS C ON S.eye_colour_id = C.id\nWHERE P.publisher_name = 'Marvel Comics'\nGROUP BY C.colour\nORDER BY superhero_count DESC;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "difficulty": "moderate"
    },
    {
        "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "hint": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "error_sql": "SELECT T1.superhero_name, T1.full_name \nFROM superhero AS T1 \nINNER JOIN publisher AS T2 ON T1.publisher_id = T2.id \nINNER JOIN hero_power AS T3 ON T1.id = T3.hero_id \nINNER JOIN superpower AS T4 ON T3.power_id = T4.id \nWHERE T2.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "challenging"
    },
    {
        "question": "Who is the dumbest superhero?",
        "hint": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
        "error_sql": "SELECT S.superhero_name FROM superhero S INNER JOIN hero_attribute HA ON S.id = HA.hero_id INNER JOIN attribute A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Intelligence' AND HA.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute HA2 INNER JOIN attribute A2 ON HA2.attribute_id = A2.id WHERE A2.attribute_name = 'Intelligence')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "hint": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
        "error_sql": "SELECT \n    CAST(SUM(CASE WHEN A.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(S.id) AS percentage,\n    COUNT(CASE WHEN A.alignment = 'Bad' THEN 1 END) AS marvel_bad_superheroes\nFROM \n    superhero AS S \nINNER JOIN \n    alignment AS A ON S.alignment_id = A.id \nINNER JOIN \n    publisher AS P ON S.publisher_id = P.id \nWHERE \n    P.publisher_name = 'Marvel Comics';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "difficulty": "challenging"
    },
    {
        "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
        "hint": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
        "error_sql": "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "hint": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "error_sql": "SELECT C.colour FROM superhero AS S \nINNER JOIN colour AS C ON S.hair_colour_id = C.id \nINNER JOIN race AS R ON S.race_id = R.id \nWHERE S.height_cm = 185 AND R.race = 'human';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the hero's full name with the highest attribute in strength?",
        "hint": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "error_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' AND T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'strength')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "hint": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "error_sql": "SELECT T1.superhero_name \nFROM superhero AS T1 \nINNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id \nINNER JOIN publisher AS T3 ON T1.publisher_id = T3.id \nWHERE T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute AS T4 \n                            INNER JOIN superhero AS T5 ON T4.hero_id = T5.id \n                            WHERE T4.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'durability') \n                            AND T5.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')) \nAND T3.publisher_name = 'Dark Horse Comics';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
        "hint": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "error_sql": "SELECT T3.colour AS eye_colour, T4.colour AS hair_colour, T5.colour AS skin_colour \nFROM superhero AS T1 \nINNER JOIN gender AS T2 ON T1.gender_id = T2.id \nINNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id \nINNER JOIN colour AS T4 ON T1.hair_colour_id = T4.id \nINNER JOIN colour AS T5 ON T1.skin_colour_id = T5.id \nINNER JOIN publisher AS T6 ON T1.publisher_id = T6.id \nWHERE T2.gender = 'Female' AND T6.publisher_name = 'Dark Horse Comics';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the average height for all superhero.",
        "hint": "average = DIVIDE(SUM(height_cm), COUNT(all heros));",
        "error_sql": "SELECT AVG(height_cm) FROM superhero;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
        "difficulty": "simple"
    },
    {
        "question": "Which hero was the fastest?",
        "hint": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';",
        "error_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed'))",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
        "hint": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
        "error_sql": "SELECT ABS(SUM(CASE WHEN T1.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS superhero_difference FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name IN ('DC Comics', 'Marvel Comics');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "difficulty": "challenging"
    },
    {
        "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
        "hint": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
        "error_sql": "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
        "difficulty": "simple"
    },
    {
        "question": "How many users last accessed the website after 2014/9/1?",
        "hint": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
        "error_sql": "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "difficulty": "simple"
    },
    {
        "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "hint": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "error_sql": "SELECT T1.LastEditorDisplayName FROM posts AS T1 WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "difficulty": "moderate"
    },
    {
        "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
        "hint": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
        "error_sql": "SELECT FavoriteCount FROM posts WHERE Id = (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014/4/23 20:29:39.0')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
        "difficulty": "moderate"
    },
    {
        "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
        "hint": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
        "error_sql": "SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'Not well-finished' ELSE 'Well-finished' END AS PostStatus \nFROM posts AS T1 \nWHERE T1.Id = (SELECT PostId FROM comments WHERE UserId = 23853 AND CreationDate = '2013-07-12 09:08:18.0');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
        "difficulty": "moderate"
    },
    {
        "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
        "hint": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
        "error_sql": "SELECT CAST(COUNT(posts.Id) AS REAL) / COUNT(votes.Id) FROM posts LEFT JOIN votes ON posts.Id = votes.PostId WHERE posts.OwnerUserId = 24;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
        "difficulty": "moderate"
    },
    {
        "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "hint": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
        "error_sql": "SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "difficulty": "moderate"
    },
    {
        "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "hint": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
        "error_sql": "SELECT U.DisplayName \nFROM votes AS V \nINNER JOIN posts AS P ON V.PostId = P.Id \nINNER JOIN users AS U ON V.UserId = U.Id \nWHERE V.BountyAmount = 50 AND P.Title LIKE '%variance%';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
        "hint": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
        "error_sql": "SELECT P.Title, C.Text, AVG(P.ViewCount) OVER() as AverageViewCount\nFROM posts AS P \nINNER JOIN comments AS C ON P.Id = C.PostId \nINNER JOIN postLinks AS PL ON P.Id = PL.PostId \nINNER JOIN tags AS T ON PL.RelatedPostId = T.Id \nWHERE T.TagName = 'humor' \nGROUP BY P.Id, C.Text;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
        "difficulty": "moderate"
    },
    {
        "question": "How many users are awarded with more than 5 badges?",
        "hint": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
        "error_sql": "SELECT COUNT(UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "difficulty": "simple"
    },
    {
        "question": "Which user have only one post history per post and having at least 1000 views?",
        "hint": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
        "error_sql": "SELECT OwnerUserId FROM posts WHERE ViewCount >= 1000 AND Id IN (SELECT PostId FROM postHistory GROUP BY PostId HAVING COUNT(*) = 1);",
        "compiler_hint": "no such column: UserId",
        "reflective_cot": "The initial SQL query failed because it incorrectly referenced `UserId` from the `posts` table, which does not have that column. The correction was made by using `OwnerUserId`, which is the correct column representing the user who owns the post.\n\n### Reasoning:\nIn the context of SQL, it's crucial to ensure that column references correspond to the correct table. Misidentifying column names can lead to errors that are often only revealed upon execution.\n\n### Tip:\nAlways review the schema and double-check the column names when constructing queries. Use specific table aliases if working with multiple tables to avoid ambiguity and ensure clarity in your SQL statements.",
        "ground_truth_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which post by slashnick has the most answers count? State the post ID.",
        "hint": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "error_sql": "SELECT Id FROM posts WHERE OwnerDisplayName = 'slashnick' AND AnswerCount = (SELECT MAX(AnswerCount) FROM posts WHERE OwnerDisplayName = 'slashnick')LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "hint": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "error_sql": "SELECT DisplayName, SUM(ViewCount) AS TotalViewCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T2.DisplayName ORDER BY TotalViewCount DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
        "hint": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;",
        "error_sql": "SELECT DISTINCT T.Tags \nFROM users AS T1 \nINNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId \nWHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0;",
        "compiler_hint": "no such table: postTags",
        "reflective_cot": "### Reflection on the Error\n\nThe initial SQL query attempted to reference a non-existent table, `postTags`, leading to the error message: \"no such table: postTags.\" This mistake likely stemmed from a misunderstanding of the schema, where the table responsible for tagging posts was not clearly identified. \n\nIn the corrected SQL, you removed the join with `postTags` and focused solely on finding posts by \"Mark Meckes\" with zero comments. However, this corrected query does not actually fetch the tag names, as it fails to include the tags association.\n\n### Tip to Avoid Future Mistakes\n\nTo avoid such errors in the future, always double-check the database schema for the correct table names and their relationships before writing your queries. Additionally, clearly outline all relationships and constraints between tables to ensure that you reference the correct tables and columns.",
        "ground_truth_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
        "difficulty": "moderate"
    },
    {
        "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "hint": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.Tags LIKE '%r%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM posts AS T1 \nWHERE T1.OwnerDisplayName = 'Community'",
        "compiler_hint": "no such column: T2.TagName",
        "reflective_cot": "### Reflection on the Error\n\nThe original SQL query attempted to join the `posts` table and the `postLinks` table to check for tags. However, `T2.TagName` was referenced directly in the `postLinks` table, which does not contain that column. The confusion stemmed from a misunderstanding of how tags are represented in the database. Tags should likely be extracted from the `Tags` column in the `posts` table rather than the `postLinks` table.\n\n### Corrected SQL Explanation\n\nThe corrected SQL uses the `Tags` column from the `posts` table to check if the R language tag is present. The `LIKE '%r%'` pattern match is employed to conveniently identify the usage of the \"r\" tag in a single string of tags.\n\n### Tip to Avoid Similar Mistakes\n\nAlways ensure you understand the schema and relationships of your tables before constructing queries. Verify the column names and their respective tables in the schema to avoid referencing non-existent columns. Additionally, consider using descriptive names and comments in your queries to clarify your intention and support troubleshooting.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
        "hint": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
        "error_sql": "SELECT SUM(CASE WHEN U.DisplayName = 'Mornington' THEN P.ViewCount ELSE 0 END) - \n       SUM(CASE WHEN U.DisplayName = 'Amos' THEN P.ViewCount ELSE 0 END) \nFROM posts AS P \nJOIN users AS U ON P.OwnerUserId = U.Id;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
        "difficulty": "moderate"
    },
    {
        "question": "What is the display name of the user who acquired the first Autobiographer badge?",
        "hint": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "error_sql": "SELECT U.DisplayName FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Autobiographer' AND B.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
        "hint": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
        "error_sql": "SELECT COUNT(DISTINCT Id) FROM users WHERE Location = 'United Kingdom' AND Id IN (SELECT OwnerUserId FROM posts WHERE FavoriteCount >= 4);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "difficulty": "moderate"
    },
    {
        "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
        "hint": "the most valuable post in 2010 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
        "error_sql": "SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreaionDate) = '2010') AND strftime('%Y', T1.CreaionDate) = '2010';",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "### Reflection on the Error\n\nThe original SQL query failed due to the usage of the `YEAR()` function, which is not supported in SQLite. Instead, the corrected SQL uses `strftime('%Y', CreaionDate)` to extract the year, which is the appropriate method for SQLite.\n\n### Tip\n\nAlways check the documentation for the SQL dialect you are using to confirm supported functions and their syntax. When in doubt, use native date and time functions specific to that SQL dialect, like `strftime` in SQLite.",
        "ground_truth_sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
        "hint": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
        "error_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / COUNT(*) \nFROM posts AS T1 \nINNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id \nWHERE strftime('%Y', T1.CreaionDate) = '2011' AND T2.Reputation > 1000;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "hint": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "error_sql": "SELECT P.ViewCount, U.DisplayName \nFROM posts AS P \nINNER JOIN users AS U ON P.LastEditorUserId = U.Id \nWHERE P.Title = 'Computer Game Datasets'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
        "hint": "the latest comment refers to MAX(CreationDate);",
        "error_sql": "SELECT C.Text, U.DisplayName \nFROM comments AS C \nINNER JOIN posts AS P ON C.PostId = P.Id \nINNER JOIN users AS U ON C.UserId = U.Id \nWHERE P.Title = 'Analysing wind data with R' \nORDER BY C.CreationDate DESC \nLIMIT 10;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "In posts with 1 comment, how many of the comments have 0 score?",
        "hint": "in posts with 1 comment refers to CommentCount = 1;",
        "error_sql": "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CommentCount = 1) AND Score = 0;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
        "difficulty": "simple"
    },
    {
        "question": "Which are the cards that have incredibly powerful foils.",
        "hint": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "error_sql": "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "What are the borderless cards available without powerful foils?",
        "hint": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
        "error_sql": "SELECT * FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "difficulty": "simple"
    },
    {
        "question": "List all the mythic rarity print cards banned in gladiator format.",
        "hint": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "error_sql": "SELECT T1.* FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "moderate"
    },
    {
        "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
        "hint": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
        "error_sql": "SELECT T1.name, T1.artist, T1.isPromo \nFROM cards AS T1 \nINNER JOIN rulings AS T2 ON T1.uuid = T2.uuid \nGROUP BY T1.uuid \nHAVING COUNT(T2.uuid) = (SELECT MAX(rule_count) FROM (SELECT COUNT(uuid) AS rule_count FROM rulings GROUP BY uuid)) \nLIMIT 1 \nORDER BY T1.name \nLIMIT 1;",
        "compiler_hint": "near \")\": syntax error",
        "reflective_cot": "### Reflection on the Error:\n\nThe original SQL query encountered a syntax error due to the misplaced `LIMIT 1` clause in the subquery. In SQL, each subquery should be logically structured to return a single value or set that can be used in the main query. In the corrected SQL, the `ORDER BY` clause was improperly sequenced after `LIMIT`, which can lead to confusion.\n\n### Corrected SQL Explanation:\nThe corrected SQL effectively calculates the maximum count of rulings for each card and selects the card with that maximum count. It also ensures to check if the card is a promotional printing by including `isPromo`.\n\n### Tip to Avoid Future Mistakes:\nAlways validate the structure of nested queries and the placement of clauses like `LIMIT` and `ORDER BY`. Testing each part of the query incrementally can also help identify where the logic or syntax may break.",
        "ground_truth_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
        "hint": "subtype other than Angel refers to subtypes is not 'Angel';",
        "error_sql": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';",
        "compiler_hint": "no such column: subtype",
        "reflective_cot": "The error in the original SQL query occurred because the column name was incorrectly referenced as `subtype` instead of `subtypes`, which is the correct column name in the `cards` table.\n\nIn the corrected SQL query, the condition `subtypes NOT LIKE '%Angel%'` accurately checks for any subtype that does not include \"Angel,\" effectively capturing the requirement to exclude it.\n\n### Tip:\nAlways double-check column names in the database schema before writing queries. Use tools or features available in your database management system to quickly view table structures to avoid referencing incorrect or non-existent columns.",
        "ground_truth_sql": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
        "difficulty": "simple"
    },
    {
        "question": "How many of the banned cards are white border?",
        "hint": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
        "error_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND uuid IN (SELECT uuid FROM legalities WHERE status = 'Banned')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "difficulty": "simple"
    },
    {
        "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
        "hint": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "error_sql": "SELECT DISTINCT C.name, F.language FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.originalType = 'Artifact' AND C.colors = 'B';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "difficulty": "moderate"
    },
    {
        "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
        "hint": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
        "error_sql": "SELECT COUNT(*) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.block = 'Commander' AND T1.language = 'Portuguese (Brasil)'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
        "difficulty": "moderate"
    },
    {
        "question": "How many unknown power cards contain info about the triggered ability",
        "hint": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
        "error_sql": "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT Count(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
        "difficulty": "moderate"
    },
    {
        "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
        "hint": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL",
        "error_sql": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'premodern' AND T1.side IS NULL AND T2.status = 'legal' AND EXISTS (SELECT 1 FROM rulings AS T3 WHERE T3.uuid = T1.uuid AND T3.text = 'This is a triggered mana ability.');",
        "compiler_hint": "no such column: T1.legalities",
        "reflective_cot": "### Reflection on SQL Error and Correction:\nThe initial SQL query attempted to filter cards using a non-existent column `T1.legalities`, which caused the error. In the corrected SQL, the filtering is done through the `legalities` table, specifically using the format and status. Additionally, the use of `EXISTS` to verify the ruling gives a more precise query.\n\n### Tip for Avoiding Similar Mistakes:\nAlways verify the column names and their respective tables in your SQL queries before execution. Listing out the schema or performing simple SELECT statements on each table can prevent referencing non-existent columns or misassociated columns. Keeping a clear relationship map between tables also helps in forming accurate JOIN statements.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
        "difficulty": "moderate"
    },
    {
        "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
        "hint": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
        "error_sql": "SELECT FD.name FROM foreign_data AS FD INNER JOIN cards AS C ON FD.uuid = C.uuid WHERE FD.language = 'French' AND C.type = 'Creature' AND C.layout = 'normal' AND C.borderColor = 'black' AND C.artist = 'Matthew D. Wilson'",
        "compiler_hint": "ambiguous column name: name",
        "reflective_cot": "### Reflection on the Error:\nThe error \"ambiguous column name: name\" occurred because both the `foreign_data` and `cards` tables have a column named `name`, causing confusion for the SQL engine when trying to identify which `name` column to reference in the `SELECT` statement. \n\n### Reasoning for the Correction:\nThe corrected SQL query explicitly specifies the table source for the `name` column by using `FD.name`, ensuring that the SQL engine knows to retrieve the `name` from the `foreign_data` table. Moreover, the correction added a filter for the artist to specify which card to retrieve.\n\n### Tip to Avoid Future Mistakes:\nAlways qualify column names with their respective table aliases, especially in JOIN queries, to avoid ambiguity and clearly indicate which table's column you are referencing. This practice enhances query clarity and prevents errors.",
        "ground_truth_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "difficulty": "moderate"
    },
    {
        "question": "What percentage of cards with format commander and legal status do not have a content warning?",
        "hint": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nINNER JOIN legalities AS T2 ON T1.uuid = T2.uuid \nWHERE T2.format = 'commander' AND T2.status = 'legal'",
        "compiler_hint": "no such column: T3.hasContentWarning",
        "reflective_cot": "The error encountered in the original SQL query was due to referencing `T3.hasContentWarning`, which did not exist; the correct reference was `T1.hasContentWarning`. This mistake stemmed from either a mislabeling or a misunderstanding of table aliases.\n\nThe corrected SQL successfully addresses this by consistently using the correct alias for the `cards` table (T1) to check the `hasContentWarning` condition.\n\n### Tip to Avoid Future Mistakes:\nAlways double-check the table aliases when referencing columns. Make a habit of keeping track of which alias corresponds to which table throughout your query to prevent similar referencing errors. A good practice is to write down or comment the aliases next to the tables they represent.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage of cards without power are in French?",
        "hint": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
        "error_sql": "SELECT COUNT(CASE WHEN fd.language = 'French' THEN 1 END) * 100.0 / COUNT(*) FROM cards AS c LEFT JOIN foreign_data AS fd ON c.uuid = fd.uuid WHERE c.power IS NULL OR c.power = '*'",
        "compiler_hint": "no such column: language",
        "reflective_cot": "The error in the original SQL query occurred because the \"language\" column doesn't exist in the \"cards\" table, but rather in the \"foreign_data\" table. To resolve this, the corrected SQL properly joins the \"cards\" table with the \"foreign_data\" table using the \"uuid\" column to access the \"language\" information.\n\n**Tip to Avoid Future Mistakes:** Always ensure you reference column names from the correct tables, especially in joins. Checking the schema before writing queries helps prevent such errors.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
        "difficulty": "challenging"
    },
    {
        "question": "What proportion of cards do not have a text box with a normal layout?",
        "hint": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100",
        "error_sql": "SELECT (CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) AS REAL) / COUNT(*)) * 100 FROM cards;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
        "difficulty": "simple"
    },
    {
        "question": "Which foreign language used by \"A Pedra Fellwar\"?",
        "hint": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "error_sql": "SELECT language FROM foreign_data WHERE uuid = (SELECT uuid FROM cards WHERE name = 'A Pedra Fellwar')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "difficulty": "simple"
    },
    {
        "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
        "hint": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
        "error_sql": "SELECT COUNT(*) > 0 FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen') AND language = 'Korean'",
        "compiler_hint": "near \"s\": syntax error",
        "reflective_cot": "The error encountered in the original SQL query was due to improper escaping of the single quote in \"Ancestor's Chosen.\" In SQL, to represent a single quote within a string, you need to double it. The corrected SQL fixed this by using `Ancestor''s Chosen`, successfully allowing the query engine to interpret it correctly.\n\n### Tip to Avoid Similar Mistakes:\nAlways double single quotes within string literals in SQL when it's part of the string. Regularly testing your queries in smaller parts can also help catch these errors early.",
        "ground_truth_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
        "difficulty": "moderate"
    },
    {
        "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "hint": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "error_sql": "SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS appears_on_mtgo FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Angel of Mercy') AND mtgoCode IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "difficulty": "moderate"
    },
    {
        "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
        "hint": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
        "error_sql": "SELECT isForeignOnly FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Adarkar Valkyrie') AND isForeignOnly = 1;",
        "compiler_hint": "no such column: isForeignOnly",
        "reflective_cot": "The error in the initial SQL query arose because it attempted to access the `isForeignOnly` column directly from the `cards` table, where it does not exist; this column is part of the `sets` table. \n\nThe corrected query properly retrieves the `isForeignOnly` status by first finding the `setCode` associated with the 'Adarkar Valkyrie' cards in the `cards` table, and then checking the `sets` table for that code.\n\n### Tip to Avoid Future Mistakes:\nAlways ensure that you verify the structure of the tables and their columns before writing your queries. Familiarize yourself with relationships and dependencies between tables, especially when dealing with joins or subqueries.",
        "ground_truth_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
        "hint": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
        "error_sql": "SELECT flavorText FROM foreign_data WHERE language = 'Italian' AND name = 'Ancestor''s Chosen'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "error_sql": "SELECT F.name FROM cards AS C \nINNER JOIN foreign_data AS F ON C.uuid = F.uuid \nWHERE C.setCode = 'Coldsnap' AND F.language = 'Italian' AND C.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE setCode = 'Coldsnap';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "difficulty": "challenging"
    },
    {
        "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
        "hint": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
        "error_sql": "SELECT T1.format, GROUP_CONCAT(T2.name) AS banned_cards \nFROM legalities AS T1 \nJOIN cards AS T2 ON T1.uuid = T2.uuid \nWHERE T1.status = 'Banned' \nGROUP BY T1.format \nHAVING COUNT(*) = (SELECT MAX(banned_count) \n                   FROM (SELECT COUNT(*) AS banned_count \n                         FROM legalities \n                         WHERE status = 'Banned' \n                         GROUP BY format));",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
        "difficulty": "moderate"
    },
    {
        "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
        "hint": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
        "error_sql": "SELECT S.name \nFROM sets AS S \nLEFT JOIN set_translations AS ST ON S.code = ST.setCode \nWHERE ST.language = 'Korean' \nAND S.code NOT IN (SELECT setCode FROM set_translations WHERE language LIKE '%Japanese%')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
        "difficulty": "moderate"
    },
    {
        "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "hint": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "error_sql": "SELECT DISTINCT frameVersion, uuid FROM cards WHERE artist = 'Allen Williams'\nUNION\nSELECT 'Banned Cards' AS frameVersion, uuid FROM legalities WHERE status = 'Banned';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "hint": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
        "error_sql": "SELECT AVG(O.oxygen_count) FROM (\n    SELECT COUNT(*) AS oxygen_count \n    FROM atom AS A \n    INNER JOIN connected AS C ON A.atom_id = C.atom_id \n    INNER JOIN bond AS B ON C.bond_id = B.bond_id \n    WHERE A.element = 'o' AND B.bond_type = '-' \n    GROUP BY C.bond_id\n) AS O;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "difficulty": "moderate"
    },
    {
        "question": "On average how many carcinogenic molecules are single bonded?",
        "hint": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
        "error_sql": "SELECT AVG(single_bond_count) FROM (SELECT COUNT(b.bond_id) AS single_bond_count FROM molecule AS m INNER JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '-' GROUP BY m.molecule_id);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of carbon in double-bond molecules?",
        "hint": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question": "What elements are in the TR004_8_9 bond atoms?",
        "hint": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
        "error_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR004_8_9'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "difficulty": "challenging"
    },
    {
        "question": "What elements are in a double type bond?",
        "hint": "double type bond refers to bond_type = '=';",
        "error_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "difficulty": "challenging"
    },
    {
        "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "hint": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
        "error_sql": "SELECT COUNT(DISTINCT T1.atom_id) \nFROM atom AS T1 \nINNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 \nINNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id \nWHERE (T1.element = 'i' OR T1.element = 's') AND T3.bond_type = '-' \nGROUP BY T3.molecule_id;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
        "hint": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
        "error_sql": "SELECT CAST(SUM(CASE WHEN A.element != 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT A.atom_id) FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE M.label = '+';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "hint": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.bond_id) FROM bond AS T3 INNER JOIN molecule AS T2 ON T3.molecule_id = T2.molecule_id WHERE T3.bond_type = '#';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
        "hint": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
        "error_sql": "SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond_id) AS percent FROM bond WHERE molecule_id = 'TR008'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
        "hint": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
        "error_sql": "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) AS percent FROM molecule;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
        "difficulty": "simple"
    },
    {
        "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
        "hint": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percent FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR206'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "difficulty": "moderate"
    },
    {
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "hint": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
        "error_sql": "SELECT T1.bond_type, T2.label, (SELECT COUNT(*) FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR010') OR atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR010')) > 0 AS is_carcinogenic \nFROM bond AS T1 \nINNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id \nWHERE T1.molecule_id = 'TR010' \nGROUP BY T1.bond_type \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "compiler_hint": "ambiguous column name: molecule_id",
        "reflective_cot": "### Reflection on the Error:\nThe original SQL query encountered an \"ambiguous column name\" error because both the `bond` and `connected` tables contain a column named `molecule_id`, which caused confusion in the context of the query. This ambiguity arises in JOIN operations when multiple tables are referenced without properly qualifying the column names.\n\n### Corrections Made:\nIn the corrected SQL query, the focus shifted to ensuring clarity by either avoiding ambiguous references or explicitly specifying the table from which the column is drawn. The use of `(SELECT atom_id FROM atom WHERE molecule_id = 'TR010')` clarified the context for the `connected` table update.\n\n### Tip to Avoid Future Mistakes:\nAlways qualify column names with their table aliases, especially in queries involving multiple tables, to prevent ambiguity. This practice improves readability and helps prevent SQL errors related to similarly named columns across different tables.",
        "ground_truth_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "difficulty": "challenging"
    },
    {
        "question": "How many bonds which involved atom 12 does molecule TR009 have?",
        "hint": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
        "error_sql": "SELECT COUNT(bond_id) FROM bond WHERE molecule_id = 'TR009' AND (bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12'));",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' OR T2.atom_id2 = T1.molecule_id || '_2'",
        "difficulty": "moderate"
    },
    {
        "question": "How many connections does the atom 19 have?",
        "hint": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';",
        "error_sql": "SELECT COUNT(bond_id) FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
        "difficulty": "simple"
    },
    {
        "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
        "hint": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic",
        "error_sql": "SELECT DISTINCT T4.molecule_id FROM atom AS T1 \nINNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id \nINNER JOIN connected AS T3 ON T2.atom_id2 = T3.atom_id \nINNER JOIN molecule AS T4 ON T2.bond_id = T4.molecule_id \nWHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T4.label = '+';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
        "hint": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
        "error_sql": "SELECT DISTINCT B.bond_id \nFROM bond AS B \nINNER JOIN atom AS A1 ON B.molecule_id = A1.molecule_id \nINNER JOIN atom AS A2 ON B.molecule_id = A2.molecule_id \nWHERE A1.element = 'p' AND A2.element = 'n';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
        "difficulty": "moderate"
    },
    {
        "question": "Is the molecule with the most double bonds carcinogenic?",
        "hint": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
        "error_sql": "SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' AND T2.label = '+' AND T1.molecule_id = (SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
        "difficulty": "moderate"
    },
    {
        "question": "List all the elements of atoms that can not bond with any other atoms.",
        "hint": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
        "error_sql": "SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
        "difficulty": "challenging"
    },
    {
        "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
        "hint": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
        "error_sql": "SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR041' AND T2.bond_type = '#'",
        "compiler_hint": "no such column: T2.atom_id2",
        "reflective_cot": "### Reflection on the Error\n\nThe error in the original SQL query stemmed from attempting to reference a non-existent column (`T2.atom_id2`) from the `bond` table (`T2`). The `bond` table does not contain an `atom_id2` column; it only has `bond_id`, `molecule_id`, and `bond_type`.\n\nIn the corrected SQL, I didn't change anything fundamentally, as the mistake merely involved a misunderstanding of where to find the relevant columns. The atom connections should actually be selected from the `connected` table.\n\n### Corrected SQL Query\n\nTo fix the query, it should join the `connected` table with the `bond` table and ensure the selection includes `T1.atom_id` and another `T1.atom_id2`, sourced from the `connected` table, since it represents connected atoms.\n\n```sql\nSELECT T1.atom_id, T2.atom_id2 \nFROM connected AS T1 \nINNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id \nWHERE T2.molecule_id = 'TR041' \nAND T2.bond_type = '#';\n```\n\n### Tip to Avoid Future Mistakes\n\nAlways double-check the structure of the tables you're querying from, including column names, to ensure that any joins or selections reference valid columns. Reading table schemas carefully can prevent similar errors.",
        "ground_truth_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
        "difficulty": "simple"
    },
    {
        "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
        "hint": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) * 100 AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
        "difficulty": "moderate"
    },
    {
        "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
        "hint": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
        "error_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
        "difficulty": "challenging"
    },
    {
        "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
        "hint": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "error_sql": "SELECT label, CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(element) AS hydrogen_ratio FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR006' GROUP BY label;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
        "difficulty": "challenging"
    },
    {
        "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
        "hint": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT MAX((`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`)) \nFROM satscores \nWHERE (NumGE1500 * 1.0 / NumTstTakr) > 0.3 \nAND `Enrollment (Ages 5-17)` > 0;",
        "compiler_hint": "no such column: Percent (%) Eligible Free (Ages 5-17)",
        "reflective_cot": "### Reflection on the Error\n\nThe original SQL query encountered an error because it attempted to use the column `Percent (%) Eligible Free (Ages 5-17)` from the `satscores` table, which does not exist there. Instead, the eligible free rate for students aged 5-17 is calculated using `Free Meal Count (Ages 5-17)` and `Enrollment (Ages 5-17)`, which are fields present in the `frpm` table, not `satscores`. \n\nThe corrected SQL accurately computes the eligible free rate using the proper fields but fails to join the two tables. You need to join the `frpm` table with `satscores` to correctly filter and retrieve the relevant data.\n\n### Revised SQL Query\n\n```sql\nSELECT MAX((fr.`Free Meal Count (Ages 5-17)` / fr.`Enrollment (Ages 5-17)`)) \nFROM satscores ss\nJOIN frpm fr ON ss.cds = fr.CDSCode \nWHERE (ss.NumGE1500 * 1.0 / ss.NumTstTakr) > 0.3 \nAND fr.`Enrollment (Ages 5-17)` > 0;\n```\n\n### Tip to Avoid Similar Mistakes\n\nAlways ensure you are referencing the correct table when selecting fields, particularly when dealing with multiple tables. It\u2019s also helpful to read through the schema and data relationships carefully before writing your SQL queries to understand where specific data exists.",
        "ground_truth_sql": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
        "difficulty": "moderate"
    },
    {
        "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
        "hint": "Valid charter number means the number is not null",
        "error_sql": "SELECT schools.CharterNum, AVG(satscores.AvgScrWrite) AS AverageWritingScore \nFROM schools \nINNER JOIN satscores ON schools.CDSCode = satscores.cds \nWHERE satscores.AvgScrWrite > 499 AND schools.CharterNum IS NOT NULL \nGROUP BY schools.CharterNum \nORDER BY AverageWritingScore DESC;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
        "difficulty": "simple"
    },
    {
        "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
        "hint": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT S.School, S.Street, S.StreetAbr, S.City, S.State, S.Zip \nFROM schools AS S\nINNER JOIN frpm AS F ON S.CDSCode = F.CDSCode\nWHERE ABS(F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > 30;",
        "compiler_hint": "no such column: Enrollment (K-12)",
        "reflective_cot": "### Reflection on the Error\n\nThe initial SQL query failed because it attempted to access the `Enrollment (K-12)` and `Enrollment (Ages 5-17)` columns directly from the `schools` table, which does not contain those columns. Instead, they reside in the `frpm` table. The corrected query properly joins the `frpm` table with the `schools` table, allowing access to the enrollment columns.\n\n### Tip to Avoid Similar Mistakes\n\nAlways verify the table structure and ensure you are referencing the correct columns from the appropriate tables. Utilizing proper `JOIN` operations is crucial when dealing with multiple tables. Before writing the query, understanding the relationships in your database schema can help avoid misunderstandings about where specific data resides.",
        "ground_truth_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
        "difficulty": "moderate"
    },
    {
        "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
        "hint": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)",
        "error_sql": "SELECT S.School, S.County, S.District \nFROM frpm AS S \nJOIN satscores AS T ON S.CDSCode = T.cds \nWHERE (S.FreeMealCountK12 / S.EnrollmentK12) > 0.1 AND T.NumTstTakr > 0 AND (T.AvgScrRead >= 1500 OR T.AvgScrMath >= 1500 OR T.AvgScrWrite >= 1500);",
        "compiler_hint": "no such column: S.FreeMealCountK12",
        "reflective_cot": "### Reflection on the Error and Correction\n\nThe initial error stemmed from referencing columns `FreeMealCountK12` and `EnrollmentK12` in the `schools` table (aliased as `S`), which do not exist. These columns are actually in the `frpm` table. Upon correcting, I changed the table alias to `frpm` to access the correct columns.\n\n### Tip to Avoid Similar Mistakes\n\nAlways double-check the table structure and ensure that you reference columns from the correct table according to your query context. It helps to list out relevant columns for each table before writing your SQL to avoid misreferences.",
        "ground_truth_sql": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
        "difficulty": "moderate"
    },
    {
        "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
        "hint": "Average of average math = sum(average math scores) / count(schools).",
        "error_sql": "SELECT S.FundingType \nFROM schools AS S \nINNER JOIN satscores AS SAT ON S.CDSCode = SAT.cds \nWHERE S.County = 'Riverside' \nGROUP BY S.CDSCode \nHAVING SUM(SAT.AvgScrMath) / COUNT(S.CDSCode) > 400;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
        "difficulty": "moderate"
    },
    {
        "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "hint": "Full communication address should include Street, City, State and zip code if any.",
        "error_sql": "SELECT School, Street, City, State, Zip FROM schools AS S INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE County = 'Monterey' AND F.`Free Meal Count (Ages 5-17)` > 800 AND `School Type` = 'High School';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
        "hint": "Communication number refers to phone number.",
        "error_sql": "SELECT S.School, AVG(SA.AvgScrWrite) AS Average_Writing_Score, S.Phone \nFROM schools AS S \nINNER JOIN satscores AS SA ON S.CDSCode = SA.cds \nWHERE (S.OpenDate > '1991-01-01' OR S.ClosedDate < '2000-01-01') \nGROUP BY S.School, S.Phone;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
        "difficulty": "moderate"
    },
    {
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "hint": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT School, DOCType \nFROM schools \nWHERE CDSCode IN (\n    SELECT CDSCode \n    FROM frpm \n    WHERE `County Code` IS NOT NULL \n) AND \n    (`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) > (\n        SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) \n        FROM frpm \n        WHERE `County Code` IS NOT NULL\n    );",
        "compiler_hint": "no such column: Enrollment (K-12)",
        "reflective_cot": "### Reflection on the Error and Correction:\n\nThe error encountered was due to the use of column names directly in the `SELECT` statement without properly referencing the table from which they belonged. The database engine cannot recognize `Enrollment (K-12)` and `Enrollment (Ages 5-17)` because they are fields in the `frpm` table, not the `schools` table.\n\nThe corrected SQL failed to address this issue. To fix the SQL, you must join the `frpm` table with the `schools` table to correctly reference the enrollment columns.\n\n### Tip to Avoid Making This Mistake:\n\nAlways ensure you're fully qualifying your columns with the appropriate table name when referencing fields from multiple tables, especially in queries involving subqueries or joins. Using table aliases can help make your SQL clearer and prevent ambiguity.",
        "ground_truth_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "difficulty": "challenging"
    },
    {
        "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
        "hint": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
        "error_sql": "SELECT T1.`FRPM Count (K-12)` / T1.`Enrollment (K-12)` AS Eligible_Free_Reduced_Price_Meal_Rate \nFROM frpm AS T1 \nINNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode \nWHERE T2.Charter = 66 \nORDER BY T1.`FRPM Count (K-12)` DESC \nLIMIT 5;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
        "hint": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
        "error_sql": "SELECT S.Street, S.City, S.Zip, S.State \nFROM schools AS S \nJOIN satscores AS SA ON S.CDSCode = SA.cds \nORDER BY (SA.NumGE1500 * 1.0 / SA.NumTstTakr) ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
        "hint": "between 1/1/1980 and 12/31/1980 means the year = 1980",
        "error_sql": "SELECT AVG(enroll12) FROM satscores AS S INNER JOIN schools AS SC ON S.cds = SC.CDSCode WHERE SC.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND SC.County = 'Fresno'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
        "difficulty": "simple"
    },
    {
        "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
        "hint": "Fresno Unified is a name of district;",
        "error_sql": "SELECT S.Phone \nFROM schools AS S \nINNER JOIN satscores AS SS ON S.CDSCode = SS.cds \nWHERE S.District = 'Fresno Unified' \nORDER BY SS.AvgScrRead ASC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
        "hint": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
        "error_sql": "SELECT School, County, AvgScrRead \nFROM (\n    SELECT S.School, S.County, SA.AvgScrRead,\n           ROW_NUMBER() OVER (PARTITION BY S.County ORDER BY SA.AvgScrRead DESC) as rank\n    FROM schools AS S\n    INNER JOIN satscores AS SA ON S.CDSCode = SA.cds\n    WHERE S.Virtual = 'F'\n) \nWHERE rank <= 5;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
        "difficulty": "simple"
    },
    {
        "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
        "hint": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
        "error_sql": "SELECT State, SUM(`Enrollment (K-12)`) AS TotalEnrollment FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE DOC = 31 GROUP BY State ORDER BY TotalEnrollment DESC LIMIT 1;",
        "compiler_hint": "no such column: Enrollment",
        "reflective_cot": "In the original SQL query, the error \"no such column: Enrollment\" occurred because the column name `Enrollment` was incorrectly referenced. The correct column for enrollment data in the `frpm` table is `Enrollment (K-12)`.\n\nIn the corrected SQL query, by changing the reference to `SUM(Enrollment (K-12))`, the query now accurately points to the correct column, resolving the error.\n\n### Tip:\nAlways double-check the column names in your tables before referencing them in your queries. Using descriptive column names in SQL can help avoid confusion and errors. Additionally, reviewing the schema for any necessary prefixes or suffixes can improve accuracy.",
        "ground_truth_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
        "hint": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
        "error_sql": "SELECT \n    (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = 54) * 1.0 / \n    (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = 52) \nAS ratio;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
        "hint": "Postal street and mailing street are synonyms.",
        "error_sql": "SELECT School, Street FROM schools WHERE CDSCode = (SELECT CDSCode FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6)",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
        "difficulty": "simple"
    },
    {
        "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
        "hint": "State Special School means EdOpsCode = 'SSS'",
        "error_sql": "SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T1.`Academic Year` = '2014-2015'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
        "difficulty": "moderate"
    },
    {
        "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
        "hint": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
        "error_sql": "SELECT T1.`School Name`, (T1.`FRPM Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) * 100 AS `Percent Eligible FRPM (Ages 5-17)` \nFROM frpm AS T1 \nINNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode \nWHERE T1.`Low Grade` = 'K' AND T1.`High Grade` = '9' AND T2.County = 'Los Angeles';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
        "difficulty": "moderate"
    },
    {
        "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
        "hint": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
        "error_sql": "SELECT COUNT(DISTINCT City) AS NumberOfCities, COUNT(School) AS TotalSchools \nFROM schools \nWHERE Magnet = 1 AND GSoffered = 'K-8' AND `NSLP Provision Status` = 'Multiple Provision Types' \nGROUP BY City;",
        "compiler_hint": "no such column: Low Grade",
        "reflective_cot": "### Reflection:\n\nThe error in the original SQL query arose because the `Low Grade` and `High Grade` columns are part of the `frpm` table, not the `schools` table. Since the join between `schools` and `frpm` wasn't included, the query couldn\u2019t access those columns. \n\nIn the corrected SQL, using `GSoffered = 'K-8'` allowed it to filter for schools offering a Kindergarten to 8th grade span, but it still overlooks that `NSLP Provision Status` is also found in the `frpm` table and would need a join for proper filtering.\n\n### Tip to Avoid Similar Mistakes:\nAlways ensure you're aware of the table structure and the location of each column, especially when dealing with multiple tables. Prior to running a query, verify that all necessary joins are included to access all relevant data points.",
        "ground_truth_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
        "difficulty": "challenging"
    },
    {
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "hint": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "error_sql": "SELECT `Percent (%) Eligible Free (K-12)`, `District Code` FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE AdmFName1 = 'Alusine')",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
        "hint": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
        "error_sql": "SELECT AdmEmail1, AdmEmail2, AdmEmail3 \nFROM schools \nWHERE County = 'San Bernardino' \nAND District = 'San Bernardino City Unified' \nAND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' \nAND (SOC = 62 OR DOC = 54) \nAND (AdmEmail1 IS NOT NULL OR AdmEmail2 IS NOT NULL OR AdmEmail3 IS NOT NULL);",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
        "difficulty": "challenging"
    },
    {
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "hint": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "error_sql": "SELECT COUNT(DISTINCT T1.account_id) \nFROM account AS T1 \nINNER JOIN trans AS T2 ON T1.account_id = T2.account_id \nWHERE T2.operation = 'POPLATEK PO OBRATU' AND T1.district_id IN (SELECT district_id FROM district WHERE A3 = 'East Bohemia');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "hint": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "error_sql": "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "difficulty": "moderate"
    },
    {
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "hint": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "error_sql": "SELECT A.account_id, \n  (SELECT MAX(avg_salary) FROM (SELECT AVG(A11) AS avg_salary FROM district GROUP BY district_id)) - \n  (SELECT MIN(avg_salary) FROM (SELECT AVG(A11) AS avg_salary FROM district GROUP BY district_id)) AS salary_gap\nFROM account AS A\nINNER JOIN client AS C ON A.client_id = C.client_id \nWHERE C.gender = 'F' \nAND C.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F');",
        "compiler_hint": "no such column: A3.A11",
        "reflective_cot": "### Reflection on Errors:\n\nThe initial SQL query encountered an error because it incorrectly attempted to reference a non-existent column `A3.A11`, which was meant to refer to the average salary column. The AVG function was applied incorrectly to the `client` table instead of the `district` table, where the salary data is presumably stored.\n\n### Corrected SQL Explanation:\n\nThe corrected SQL query accurately computes the `salary_gap` by selecting the maximum and minimum average salaries from the `district` table, which likely contains the relevant salary data (A11). It then filters for female clients with the oldest birthdate.\n\n### Tip to Avoid Future Mistakes:\n\nAlways ensure that your references in subqueries correspond to actual columns in the relevant tables. Double-check the table schema and correct any misalignments between the columns you intend to aggregate and the tables being queried. When dealing with averages, make sure to apply the aggregation function to the right set of data.",
        "ground_truth_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "hint": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
        "error_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.birth_date = (SELECT MIN(birth_date) FROM client) AND (SELECT AVG(A11) FROM district WHERE district_id = T1.district_id) = (SELECT MAX((SELECT AVG(A11) FROM district GROUP BY district_id)) FROM district)",
        "compiler_hint": "no such column: T1.A11",
        "reflective_cot": "### Reflection:\n\nThe initial SQL attempt failed because it referenced `T1.A11`, which does not exist in the `account` table. The corrected SQL successfully joins the `account`, `disp`, and `client` tables to find the youngest clients while correctly calculating A11 from the `district` table. It follows the logic of finding the minimum birth date and checks for the highest average salary within the respective districts.\n\n### Tip:\n\nAlways ensure that you are referencing the correct tables and columns in your SQL queries. Before executing, double-check the schema to confirm that the columns are part of the respective tables involved in the joins. Keeping track of which attributes belong to which tables will prevent such errors.",
        "ground_truth_sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
        "difficulty": "moderate"
    },
    {
        "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "hint": "'POPLATEK TYDNE' stands for weekly issuance",
        "error_sql": "SELECT account_id, amount FROM loan WHERE date LIKE '1997%' ORDER BY amount ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "hint": "Loan validity more than 12 months refers to duration > 12",
        "error_sql": "SELECT A.account_id, MAX(L.amount) AS highest_approved_amount \nFROM account AS A \nINNER JOIN loan AS L ON A.account_id = L.account_id \nWHERE L.duration > 12 AND A.date LIKE '1993%' \nGROUP BY A.account_id;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "hint": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM client AS T2 \nINNER JOIN district AS T1 ON T2.district_id = T1.district_id \nWHERE T1.A3 = 'South Bohemia' \nAND T1.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'South Bohemia');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "hint": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
        "error_sql": "SELECT \n    (T3.balance - T4.balance) * 100.0 / T4.balance AS increase_rate\nFROM \n    account AS T1 \nINNER JOIN \n    loan AS T2 ON T1.account_id = T2.account_id \nINNER JOIN \n    trans AS T3 ON T1.account_id = T3.account_id \nINNER JOIN \n    trans AS T4 ON T1.account_id = T4.account_id \nWHERE \n    T2.status = 'approved' \n    AND T2.date = '1993-07-05' \n    AND T3.date = '1998-12-27' \n    AND T4.date = '1993-03-22' \n    AND (SELECT MIN(date) FROM loan WHERE account_id = T1.account_id) = '1993-07-05';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "difficulty": "challenging"
    },
    {
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "hint": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "error_sql": "SELECT district.A2, ((district.A13 - district.A12) / district.A12) * 100 AS unemployment_increment_rate \nFROM loan \nINNER JOIN account ON loan.account_id = account.account_id \nINNER JOIN client ON account.district_id = client.district_id \nINNER JOIN district ON client.district_id = district.district_id \nWHERE loan.status = 'D';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "difficulty": "challenging"
    },
    {
        "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "hint": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "error_sql": "SELECT COUNT(loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE' AND T1.status = 'approved' AND T1.date BETWEEN '1995-01-01' AND '1997-12-31';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
        "difficulty": "moderate"
    },
    {
        "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "hint": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
        "error_sql": "SELECT D.A2 AS district_name, SUM(T.amount) AS total_withdrawal \nFROM trans AS T \nINNER JOIN account AS A ON T.account_id = A.account_id \nINNER JOIN district AS D ON A.district_id = D.district_id \nWHERE T.type = 'VYDAJ' AND T.date LIKE '1996-01%' \nGROUP BY D.A2 \nORDER BY total_withdrawal DESC \nLIMIT 10;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
        "hint": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
        "error_sql": "SELECT DISTINCT T1.account_id \nFROM trans AS T1 \nWHERE T1.operation = 'VYBER KARTOU' \n    AND T1.amount < (SELECT AVG(T2.amount) FROM trans AS T2 WHERE T2.operation = 'VYBER KARTOU' AND strftime('%Y', T2.date) = '1998');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
        "hint": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995.",
        "error_sql": "SELECT AVG(A15) FROM district WHERE A15 > 4000 AND district_id IN (SELECT DISTINCT district_id FROM account WHERE date >= '1997-01-01') AND A3 IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
        "difficulty": "moderate"
    },
    {
        "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
        "hint": "operation = 'VYBER' refers to withdrawal in cash",
        "error_sql": "SELECT * FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 3356) AND operation = 'VYBER'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "difficulty": "simple"
    },
    {
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "hint": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "error_sql": "SELECT (SUM(CASE WHEN strftime('%Y', L.date) = '1997' THEN L.amount ELSE 0 END) - \n        SUM(CASE WHEN strftime('%Y', L.date) = '1996' THEN L.amount ELSE 0 END)) * 100.0 / \n        NULLIF(SUM(CASE WHEN strftime('%Y', L.date) = '1996' THEN L.amount ELSE 0 END), 0) AS growth_rate \nFROM loan AS L \nINNER JOIN client AS C ON L.account_id = C.client_id \nWHERE C.gender = 'M' AND (strftime('%Y', L.date) = '1996' OR strftime('%Y', L.date) = '1997');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "difficulty": "challenging"
    },
    {
        "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "hint": "k_symbol refers to the purpose of payments",
        "error_sql": "SELECT COUNT(*) AS statement_requests, SUM(amount) AS total_debit FROM trans WHERE account_id = 3 AND operation = 'Debit';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage of male clients request for weekly statements to be issued?",
        "hint": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
        "error_sql": "SELECT CAST(SUM(CASE WHEN C.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM client AS C \nINNER JOIN account AS A ON C.district_id = A.district_id \nWHERE A.frequency = 'POPLATEK TYDNE'",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "difficulty": "moderate"
    },
    {
        "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
        "hint": "Female refers to 'F' in the gender; A11 contains information about average salary",
        "error_sql": "SELECT T1.account_id \nFROM account AS T1 \nINNER JOIN client AS T2 ON T1.district_id = T2.district_id \nINNER JOIN district AS T3 ON T1.district_id = T3.district_id \nWHERE T2.gender = 'F' \nORDER BY T2.birth_date ASC, T3.A11 ASC \nLIMIT 1;",
        "compiler_hint": "no such column: T1.A11",
        "reflective_cot": "The original SQL query failed because it attempted to access `T1.A11`, which does not exist in the `account` table. The composite nature of the data meant that `A11` is actually a column in the `district` table. \n\nIn the corrected SQL, the additional join with the `district` table allows access to `A11` using the alias `T3`, enabling the proper ordering by average salary.\n\n**Tip to Avoid Future Mistakes:**\nAlways double-check which tables contain the columns you're referencing, especially when using joins. It's beneficial to explicitly list all the columns in your select clause during development to familiarize yourself with your data structure.",
        "ground_truth_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
        "hint": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "error_sql": "SELECT AVG(amount) FROM loan WHERE status IN ('C', 'D') AND loan_id IN (SELECT loan_id FROM trans WHERE operation = 'POPLATEK PO OBRATU');",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
        "hint": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
        "error_sql": "SELECT C.client_id, strftime('%Y', 'now') - strftime('%Y', C.birth_date) AS age \nFROM client AS C \nINNER JOIN disp AS D ON C.client_id = D.client_id \nINNER JOIN card AS Ca ON D.account_id = Ca.card_id \nWHERE Ca.type = 'gold' AND D.type = 'OWNER';",
        "compiler_hint": null,
        "reflective_cot": null,
        "ground_truth_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "difficulty": "moderate"
    }
]