{
    "0": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers\t----- bird -----\tdebit_card_specializing",
    "1": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '2012%' AND T1.Segment = 'LAM' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "2": "SELECT AVG(T1.Consumption) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND SUBSTR(T1.Date, 1, 4) = '2013'\t----- bird -----\tdebit_card_specializing",
    "3": "SELECT (SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND substr(T2.Date, 1, 4) = '2012') - (SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND substr(T2.Date, 1, 4) = '2012')\t----- bird -----\tdebit_card_specializing",
    "4": "SELECT T1.Date FROM yearmonth AS T1 WHERE T1.Date LIKE (SELECT SUBSTR(T2.Date, 1, 4) FROM yearmonth AS T2 GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1) GROUP BY SUBSTR(T1.Date, 1, 4) ORDER BY SUM(T1.Consumption) DESC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "5": "SELECT T2.Date FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' GROUP BY SUBSTR(T2.Date, 6, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "6": "SELECT ( SELECT SUM(T2.Consumption) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' ) ) - ( SELECT SUM(T2.Consumption) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' ) ) AS SME_LAM_DIFF , ( SELECT SUM(T2.Consumption) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' ) ) - ( SELECT SUM(T2.Consumption) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' ) ) AS LAM_KAM_DIFF , ( SELECT SUM(T2.Consumption) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' ) ) - ( SELECT SUM(T2.Consumption) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' AND T1.Currency = 'CZK' ) ) AS KAM_SME_DIFF\t----- bird -----\tdebit_card_specializing",
    "7": "SELECT T1.Segment , CAST(SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T2.Date LIKE '2012%', T2.Consumption, 0)) AS REAL) * 100 / SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY CAST(SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T2.Date LIKE '2012%', T2.Consumption, 0)) AS REAL) * 100 / SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) DESC LIMIT 1 UNION ALL SELECT T1.Segment , CAST(SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T2.Date LIKE '2012%', T2.Consumption, 0)) AS REAL) * 100 / SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY CAST(SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T2.Date LIKE '2012%', T2.Consumption, 0)) AS REAL) * 100 / SUM(IIF(T2.Date LIKE '2013%', T2.Consumption, 0)) ASC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "8": "SELECT SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201308' AND '201311' AND T2.CustomerID = 6\t----- bird -----\tdebit_card_specializing",
    "9": "SELECT COUNT(CASE WHEN T1.Country = 'CZE' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.Country = 'SVK' THEN 1 ELSE NULL END) FROM gasstations AS T1 WHERE T1.Segment = 'Discount'\t----- bird -----\tdebit_card_specializing",
    "10": "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) FROM customers AS T1 WHERE T1.Segment = 'SME'\t----- bird -----\tdebit_card_specializing",
    "11": "SELECT CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'\t----- bird -----\tdebit_card_specializing",
    "12": "SELECT CAST(SUM(CASE WHEN T2.Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '201202%'\t----- bird -----\tdebit_card_specializing",
    "13": "SELECT MAX(T1.Consumption) FROM yearmonth AS T1 WHERE SUBSTR(T1.Date, 1, 4) = '2012'\t----- bird -----\tdebit_card_specializing",
    "14": "SELECT T2.Description FROM yearmonth AS T1 INNER JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID INNER JOIN products AS T2 ON T3.ProductID = T2.ProductID WHERE T1.Date LIKE '201309%'\t----- bird -----\tdebit_card_specializing",
    "15": "SELECT DISTINCT T2.Country FROM yearmonth AS T1 INNER JOIN gasstations AS T2 ON T1.CustomerID = T2.GasStationID WHERE T1.Date LIKE '201306%'\t----- bird -----\tdebit_card_specializing",
    "16": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000 GROUP BY T1.CustomerID\t----- bird -----\tdebit_card_specializing",
    "17": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'\t----- bird -----\tdebit_card_specializing",
    "18": "SELECT DISTINCT T1.Date FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID WHERE T3.ChainID = 11\t----- bird -----\tdebit_card_specializing",
    "19": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'\t----- bird -----\tdebit_card_specializing",
    "20": "SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'\t----- bird -----\tdebit_card_specializing",
    "21": "SELECT T1.Segment FROM customers AS T1 INNER JOIN \"transactions_1k\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'\t----- bird -----\tdebit_card_specializing",
    "22": "SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time BETWEEN '08:00:00' AND '09:00:00' AND GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE')\t----- bird -----\tdebit_card_specializing",
    "23": "SELECT T1.Currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Consumption = 548.4\t----- bird -----\tdebit_card_specializing",
    "24": "SELECT CAST(SUM(IIF(T2.Date = '2012-08-25', 1, 0)) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'\t----- bird -----\tdebit_card_specializing",
    "25": "SELECT CAST((T1.Consumption - T2.Consumption) AS REAL) / T1.Consumption FROM (SELECT Consumption FROM yearmonth WHERE Date = '2012-08-25' AND CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Price * Amount = 634.8)) AS T1, (SELECT Consumption FROM yearmonth WHERE Date = '2013-08-25' AND CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Price * Amount = 634.8)) AS T2\t----- bird -----\tdebit_card_specializing",
    "26": "SELECT CAST(SUM(CASE WHEN T2.Segment='premium' THEN 1 ELSE 0 END) AS REAL)*100 / COUNT(T2.Segment) FROM `transactions_1k` AS T2 INNER JOIN gasstations AS T1 ON T1.GasStationID=T2.GasStationID WHERE T1.Country='SVK'\t----- bird -----\tdebit_card_specializing",
    "27": "SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND Date LIKE '201201%'\t----- bird -----\tdebit_card_specializing",
    "28": "SELECT T1.CustomerID, T1.Currency, SUM(T2.Price * T2.Amount) / SUM(T2.Amount) AS AveragePricePerItem FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T2.Price * T2.Amount) DESC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "29": "SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ProductID = 5 AND T2.Price / T2.Amount > 29.00 AND T1.Date = '201208'\t----- bird -----\tdebit_card_specializing",
    "30": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'\t----- bird -----\tstudent_club",
    "31": "SELECT COUNT(*) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T2.link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Women''s Soccer' )\t----- bird -----\tstudent_club",
    "32": "SELECT COUNT(*) FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_event) > 10) AND type = 'Meeting'\t----- bird -----\tstudent_club",
    "33": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type != 'fundraiser' GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 20\t----- bird -----\tstudent_club",
    "34": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'\t----- bird -----\tstudent_club",
    "35": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'\t----- bird -----\tstudent_club",
    "36": "SELECT T1.approved FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T3.event_date = '2019-10-08'\t----- bird -----\tstudent_club",
    "37": "SELECT AVG(T3.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN (SELECT * FROM expense WHERE strftime('%m', expense_date) IN ('09', '10')) AS T3 ON T1.member_id = T3.link_to_member WHERE T1.first_name = 'Elijah' AND T1.last_name = 'Allen'\t----- bird -----\tstudent_club",
    "38": "SELECT ABS(SUM(CASE WHEN SUBSTR(T1.event_date,1,4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date,1,4) = '2020' THEN T2.spent ELSE 0 END)) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Student_Club' AND T2.event_status = 'Student_Club'\t----- bird -----\tstudent_club",
    "39": "SELECT T1.notes FROM income AS T1 WHERE T1.date_received = '2019-09-14' AND T1.source = 'Fundraising'\t----- bird -----\tstudent_club",
    "40": "SELECT T1.phone FROM member AS T1 WHERE T1.first_name = 'Carlo' AND T1.last_name = 'Jacobs'\t----- bird -----\tstudent_club",
    "41": "SELECT T3.status FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-08-20'\t----- bird -----\tstudent_club",
    "42": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'\t----- bird -----\tstudent_club",
    "43": "SELECT COUNT(*) FROM member WHERE t_shirt_size = 'Medium' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business')\t----- bird -----\tstudent_club",
    "44": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'\t----- bird -----\tstudent_club",
    "45": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'\t----- bird -----\tstudent_club",
    "46": "SELECT SUM(CASE WHEN T1.category = 'Advertisement' AND T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) / SUM(CASE WHEN T1.category = 'Advertisement' AND T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id\t----- bird -----\tstudent_club",
    "47": "SELECT SUM(T1.cost) FROM expense AS T1 WHERE T1.expense_description = 'Pizza'\t----- bird -----\tstudent_club",
    "48": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'\t----- bird -----\tstudent_club",
    "49": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'\t----- bird -----\tstudent_club",
    "50": "SELECT COUNT(T2.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women's Soccer'\t----- bird -----\tstudent_club",
    "51": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'\t----- bird -----\tstudent_club",
    "52": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.spent / T2.amount = ( SELECT MAX(T2.spent / T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' )\t----- bird -----\tstudent_club",
    "53": "SELECT MAX(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id\t----- bird -----\tstudent_club",
    "54": "SELECT SUM(T1.spent) FROM budget AS T1 WHERE T1.category = 'Food'\t----- bird -----\tstudent_club",
    "55": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7\t----- bird -----\tstudent_club",
    "56": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'\t----- bird -----\tstudent_club",
    "57": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'event' AND T2.spent IS NOT NULL ORDER BY T2.spent ASC LIMIT 1\t----- bird -----\tstudent_club",
    "58": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) AS REAL) * 100 / SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')\t----- bird -----\tstudent_club",
    "59": "SELECT T1.source FROM income AS T1 WHERE T1.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY T1.source ORDER BY SUM(T1.amount) DESC LIMIT 1\t----- bird -----\tstudent_club",
    "60": "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching')\t----- bird -----\tstudent_club",
    "61": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1\t----- bird -----\tstudent_club",
    "62": "SELECT T1.member_id FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'\t----- bird -----\tstudent_club",
    "63": "SELECT T2.cost FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Speaker' AND T2.expense_description = 'Posters'\t----- bird -----\tstudent_club",
    "64": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0 ORDER BY T2.remaining ASC LIMIT 1\t----- bird -----\tstudent_club",
    "65": "SELECT SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Meeting' AND T2.approved = 'Yes'\t----- bird -----\tstudent_club",
    "66": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC\t----- bird -----\tstudent_club",
    "67": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'\t----- bird -----\tstudent_club",
    "68": "SELECT T1.first_name, T1.last_name, SUM(T3.cost) FROM member AS T1 INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'\t----- bird -----\tstudent_club",
    "69": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'\t----- bird -----\tstudent_club",
    "70": "SELECT T1.type FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' GROUP BY T1.type\t----- bird -----\tstudent_club",
    "71": "SELECT T1.last_name, T3.department, T3.college FROM member AS T1 INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T3.major_name = 'Environmental Engineering'\t----- bird -----\tstudent_club",
    "72": "SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0\t----- bird -----\tstudent_club",
    "73": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T2.amount = 50 AND T1.position = 'Member'\t----- bird -----\tstudent_club",
    "74": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'\t----- bird -----\tstudent_club",
    "75": "SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)\t----- bird -----\tstudent_club",
    "76": "SELECT T1.first_name, T1.last_name, SUM(T3.cost) FROM member AS T1 INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.expense_description = 'Water, Veggie tray, supplies'\t----- bird -----\tstudent_club",
    "77": "SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '9/9/2019' AND T2.amount IS NOT NULL\t----- bird -----\tstudent_club",
    "78": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T1.Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.SEX = 'M' AND T1.Admission = '-' THEN 1 ELSE 0 END) - 100 FROM Patient AS T1 WHERE T1.Admission IN ('+', '-') AND T1.SEX = 'M'\t----- bird -----\tthrombosis_prediction",
    "79": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND strftime('%Y', T1.Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T1.SEX = 'F' THEN 1 ELSE NULL END) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'\t----- bird -----\tthrombosis_prediction",
    "80": "SELECT CAST(SUM(CASE WHEN T1.Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Admission = '-' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE'\t----- bird -----\tthrombosis_prediction",
    "81": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609\t----- bird -----\tthrombosis_prediction",
    "82": "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500\t----- bird -----\tthrombosis_prediction",
    "83": "SELECT T1.ID, strftime('%Y', CURRENT_DATE) - strftime('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'\t----- bird -----\tthrombosis_prediction",
    "84": "SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2\t----- bird -----\tthrombosis_prediction",
    "85": "SELECT COUNT(T1.SEX) FROM Patient AS T1 WHERE T1.SEX = 'F' AND T1.Birthday IN (SELECT STRFTIME('%Y', T1.Birthday)) = '1997' AND T1.Admission = '-'\t----- bird -----\tthrombosis_prediction",
    "86": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T1.SEX = 'F' AND strftime('%Y', T2.`Examination Date`) = '1997'\t----- bird -----\tthrombosis_prediction",
    "87": "SELECT T1.Symptoms, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE T1.Symptoms IS NOT NULL) AND T1.Symptoms IS NOT NULL\t----- bird -----\tthrombosis_prediction",
    "88": "SELECT T2.Date, (strftime('%Y', T1.`First Date`) - strftime('%Y', T1.Birthday)) AS age\nFROM Patient AS T1\nJOIN Laboratory AS T2 ON T1.ID = T2.ID\nWHERE T1.Diagnosis = 'SJS'\nORDER BY T1.Birthday ASC\nLIMIT 1\t----- bird -----\tthrombosis_prediction",
    "89": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T2.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.SEX = 'F' AND T2.UA <= 6.5 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA IS NOT NULL\t----- bird -----\tthrombosis_prediction",
    "90": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) < strftime('%Y', datetime('now')) - 18 AND T2.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'\t----- bird -----\tthrombosis_prediction",
    "91": "SELECT T1.Birthday, T3.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN (SELECT ID, MAX(HGB) AS max_hgb FROM Laboratory GROUP BY ID) AS T3 ON T1.ID = T3.ID WHERE T3.max_hgb = (SELECT MAX(HGB) FROM Laboratory)\t----- bird -----\tthrombosis_prediction",
    "92": "SELECT T2.aCL_IgM FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.Description = '1994-02-19' AND T2.Examination_Date = '1993/11/12' AND T1.ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19') AND T2.Examination_Date = '1993/11/12'\t----- bird -----\tthrombosis_prediction",
    "93": "SELECT CAST(SUM(CASE WHEN T1.Birthday = '1959-02-18' AND T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Birthday = '1959-02-18' AND T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.Birthday = '1959-02-18' AND T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID\t----- bird -----\tthrombosis_prediction",
    "94": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date BETWEEN '1987-07-06' AND '1996-01-31' AND T2.GPT > 30 AND T2.ALB < 4 GROUP BY T1.ID\t----- bird -----\tthrombosis_prediction",
    "95": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.ANA = 'S' AND T2.`aCL IgM` > ( SELECT AVG(`aCL IgM`) FROM Examination ) * 1.2 AND T2.Thrombosis = 2\t----- bird -----\tthrombosis_prediction",
    "96": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '1991-10%' AND T2.`T-BIL` < 2.0\t----- bird -----\tthrombosis_prediction",
    "97": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T1.Diagnosis = 'SLE' AND T2.PLT > 400\t----- bird -----\tthrombosis_prediction",
    "98": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'\t----- bird -----\tthrombosis_prediction",
    "99": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SEX) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday LIKE '1980%' AND T2.Diagnosis = 'RA'\t----- bird -----\tthrombosis_prediction",
    "100": "SELECT CASE WHEN T1.TP <= 8.0 AND T2.SEX = 'M' THEN 'Yes' WHEN T1.TP <= 6.5 AND T2.SEX = 'F' THEN 'Yes' ELSE 'No' END AS `Was uric acid within a normal range?` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 57266\t----- bird -----\tthrombosis_prediction",
    "101": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60\t----- bird -----\tthrombosis_prediction",
    "102": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC\t----- bird -----\tthrombosis_prediction",
    "103": "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29\t----- bird -----\tthrombosis_prediction",
    "104": "SELECT GROUP_CONCAT(DISTINCT T1.SEX) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0\t----- bird -----\tthrombosis_prediction",
    "105": "SELECT AVG(CAST(strftime('%Y', date('now')) - strftime('%Y', T1.Birthday) AS REAL)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-CHO` >= 250\t----- bird -----\tthrombosis_prediction",
    "106": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T1.Birthday) > 50\t----- bird -----\tthrombosis_prediction",
    "107": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CPK >= 250 AND strftime('%Y', T1.Birthday) BETWEEN '1936' AND '1956'\t----- bird -----\tthrombosis_prediction",
    "108": "SELECT T1.ID, T1.SEX, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250\t----- bird -----\tthrombosis_prediction",
    "109": "SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5 AND T1.Birthday IS NOT NULL\t----- bird -----\tthrombosis_prediction",
    "110": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "111": "SELECT T1.ID, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T1.ID) > 2\t----- bird -----\tthrombosis_prediction",
    "112": "SELECT SUM(CASE WHEN T1.PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.PLT > 400 THEN 1 ELSE 0 END) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (T1.PLT < 100 OR T1.PLT > 400)\t----- bird -----\tthrombosis_prediction",
    "113": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T2.Date LIKE '1984%' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T1.Birthday) < 50\t----- bird -----\tthrombosis_prediction",
    "114": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT >= 14 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 55\t----- bird -----\tthrombosis_prediction",
    "115": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)\t----- bird -----\tthrombosis_prediction",
    "116": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG >= 2000\t----- bird -----\tthrombosis_prediction",
    "117": "SELECT COUNT(*) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE IGG > 900 AND IGG < 2000) AND ID IN (SELECT ID FROM Examination WHERE Symptoms IS NOT NULL)\t----- bird -----\tthrombosis_prediction",
    "118": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA > 80 AND T2.IGA < 500 AND strftime('%Y', T1.`First Date`) >= '1990'\t----- bird -----\tthrombosis_prediction",
    "119": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM <= 40 OR T2.IGM >= 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "120": "SELECT COUNT(*) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE CRP = '+' AND Description IS NULL)\t----- bird -----\tthrombosis_prediction",
    "121": "SELECT COUNT(*) FROM (SELECT * FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE CRE >= 1.5) AND (strftime('%Y', 'now') - strftime('%Y', Birthday)) < 70) AS T1\t----- bird -----\tthrombosis_prediction",
    "122": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = '-' AND T1.Admission = '+' OR T2.RNP = '+-' AND T1.Admission = '+'\t----- bird -----\tthrombosis_prediction",
    "123": "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('-', '+-') AND T1.Thrombosis = 0\t----- bird -----\tthrombosis_prediction",
    "124": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SCR70 IN('negative', '0') AND T1.SEX = 'F' AND T2.Symptoms IS NULL\t----- bird -----\tthrombosis_prediction",
    "125": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'\t----- bird -----\tthrombosis_prediction",
    "126": "SELECT T1.Birthday FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "127": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+') AND EXISTS (SELECT 1 FROM Laboratory AS T3 WHERE T3.ID = T1.ID AND T3.CPK < 250)\t----- bird -----\tthrombosis_prediction",
    "128": "SELECT T2.name FROM (SELECT league_id, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id ORDER BY total_goals DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "129": "SELECT T2.team_long_name FROM (SELECT away_team_api_id, COUNT(*) AS win_count FROM Match WHERE season = '2009/2010' AND away_team_goal > home_team_goal AND league_id IN (SELECT id FROM League WHERE name = 'Scotland Premier League') GROUP BY away_team_api_id) AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id ORDER BY T1.win_count DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "130": "SELECT buildUpPlaySpeed FROM Team_Attributes WHERE buildUpPlaySpeed IN (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes GROUP BY team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 4)\t----- bird -----\teuropean_football_2",
    "131": "SELECT T2.name FROM (SELECT league_id FROM `Match` WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id) AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T1.league_id ORDER BY COUNT(*) DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "132": "SELECT strftime('%Y', 'now') - strftime('%Y', T1.birthday) - (strftime('%m-%d', 'now') < strftime('%m-%d', T1.birthday)) AS age FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND strftime('%Y', T2.date) BETWEEN '2013' AND '2015'\t----- bird -----\teuropean_football_2",
    "133": "SELECT T2.name ,  COUNT(*) AS num FROM Match AS T1 JOIN League AS T2 ON T1.league_id  =  T2.id GROUP BY T1.league_id ORDER BY num DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "134": "SELECT T1.team_fifa_api_id FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed > 50 AND T2.buildUpPlaySpeed < 60\t----- bird -----\teuropean_football_2",
    "135": "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' ) AND strftime('%Y', T2.date) = '2012'\t----- bird -----\teuropean_football_2",
    "136": "SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE strftime('%Y', T2.birthday) BETWEEN '1987' AND '1992'\t----- bird -----\teuropean_football_2",
    "137": "SELECT AVG(T2.long_shots) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Ahmed Samir Farag'\t----- bird -----\teuropean_football_2",
    "138": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10\t----- bird -----\teuropean_football_2",
    "139": "SELECT T2.name FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2009/2010' GROUP BY T1.league_id HAVING SUM(T1.home_team_goal) / COUNT(DISTINCT T1.id) > SUM(T1.away_team_goal) / COUNT(DISTINCT T1.id)\t----- bird -----\teuropean_football_2",
    "140": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10'\t----- bird -----\teuropean_football_2",
    "141": "SELECT T2.overall_rating FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Gabriel Tamas' AND strftime('%Y', T2.date) = '2011'\t----- bird -----\teuropean_football_2",
    "142": "SELECT AVG(T1.home_team_goal) FROM `Match` AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Poland' AND T1.season = '2010/2011'\t----- bird -----\teuropean_football_2",
    "143": "SELECT AVG(T1.finishing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.height = ( SELECT MAX(height) FROM Player UNION SELECT MIN(height) FROM Player ) GROUP BY T1.player_fifa_api_id ORDER BY AVG(T1.finishing) DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "144": "SELECT AVG(T2.overall_rating) FROM Player_Attributes AS T2 JOIN Player AS T1 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 170 AND strftime('%Y', T2.date) BETWEEN '2010' AND '2015'\t----- bird -----\teuropean_football_2",
    "145": "SELECT SUM(CASE WHEN T2.player_name = 'Abdou Diallo' THEN T1.ball_control ELSE 0 END) / COUNT(CASE WHEN T2.player_name = 'Abdou Diallo' THEN T1.id ELSE NULL END) - SUM(CASE WHEN T2.player_name = 'Aaron Appindangoye' THEN T1.ball_control ELSE 0 END) / COUNT(CASE WHEN T2.player_name = 'Aaron Appindangoye' THEN T1.id ELSE NULL END) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id\t----- bird -----\teuropean_football_2",
    "146": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') AND birthday = (SELECT MIN(birthday) FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada'))\t----- bird -----\teuropean_football_2",
    "147": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)\t----- bird -----\teuropean_football_2",
    "148": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'\t----- bird -----\teuropean_football_2",
    "149": "SELECT COUNT(DISTINCT T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.birthday) < '1986' AND T2.defensive_work_rate = 'high'\t----- bird -----\teuropean_football_2",
    "150": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.volleys > 70 AND T1.dribbling > 70\t----- bird -----\teuropean_football_2",
    "151": "SELECT COUNT(*) FROM Match WHERE SUBSTR(date, 1, 7) = '2009-04' AND league_id IN (SELECT id FROM League WHERE name = 'Belgium Jupiler League')\t----- bird -----\teuropean_football_2",
    "152": "SELECT T2.name FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "153": "SELECT CAST((SUM(CASE WHEN T1.player_name = 'Ariel Borysiuk' THEN T2.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END)) * 100.0 / SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T2.overall_rating ELSE 0 END)) AS REAL FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name IN ('Ariel Borysiuk', 'Paulin Puel')\t----- bird -----\teuropean_football_2",
    "154": "SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'\t----- bird -----\teuropean_football_2",
    "155": "SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax'\t----- bird -----\teuropean_football_2",
    "156": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = 77 AND T2.date = '2016-06-23' ORDER BY T1.birthday ASC LIMIT 1\t----- bird -----\teuropean_football_2",
    "157": "SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Mooy' AND T2.date LIKE '2016-02-04%'\t----- bird -----\teuropean_football_2",
    "158": "SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date LIKE '2015-05-01%'\t----- bird -----\teuropean_football_2",
    "159": "SELECT T1.date FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' ORDER BY T1.crossing DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "160": "SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date LIKE '2010-02-22%'\t----- bird -----\teuropean_football_2",
    "161": "SELECT T2.defenceAggressionClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date LIKE '2015-09-10%'\t----- bird -----\teuropean_football_2",
    "162": "SELECT AVG(T2.overall_rating) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND strftime('%Y-%m-%d', T2.date) BETWEEN '2007-02-22' AND '2016-04-21'\t----- bird -----\teuropean_football_2",
    "163": "SELECT CAST((SUM(IIF(T1.player_name = 'Landon Donovan', T2.overall_rating, 0)) - SUM(IIF(T1.player_name = 'Jordan Bowery', T2.overall_rating, 0))) AS REAL) * 100 / SUM(IIF(T1.player_name = 'Landon Donovan', T2.overall_rating, 0)) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.date = '2013-07-12'\t----- bird -----\teuropean_football_2",
    "164": "SELECT T1.player_name FROM Player AS T1 WHERE T1.height = ( SELECT MAX(T1.height) FROM Player AS T1 ) LIMIT 1\t----- bird -----\teuropean_football_2",
    "165": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.strength = ( SELECT MAX(strength) FROM Player_Attributes )\t----- bird -----\teuropean_football_2",
    "166": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high' LIMIT 10\t----- bird -----\teuropean_football_2",
    "167": "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'\t----- bird -----\teuropean_football_2",
    "168": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND strftime('%Y', birthday) > '1990'\t----- bird -----\teuropean_football_2",
    "169": "SELECT ABS(T1.jumping - T2.jumping) FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 WHERE T1.id = 6 AND T2.id = 23\t----- bird -----\teuropean_football_2",
    "170": "SELECT T1.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 4\t----- bird -----\teuropean_football_2",
    "171": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = ( SELECT MAX(crossing) FROM Player_Attributes )\t----- bird -----\teuropean_football_2",
    "172": "SELECT T1.home_team_goal, T1.away_team_goal FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.date LIKE '2008-09-24%' AND T2.name = 'Belgium Jupiler League'\t----- bird -----\teuropean_football_2",
    "173": "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_api_id IN (SELECT id FROM Team WHERE team_long_name = 'KSV Cercle Brugge')\t----- bird -----\teuropean_football_2",
    "174": "SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.weight = ( SELECT MAX(weight) FROM Player )\t----- bird -----\teuropean_football_2",
    "175": "SELECT T2.name FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 4\t----- bird -----\teuropean_football_2",
    "176": "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.away_team_goal = ( SELECT MAX(away_team_goal) FROM Match )\t----- bird -----\teuropean_football_2",
    "177": "SELECT player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes )\t----- bird -----\teuropean_football_2",
    "178": "SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id\t----- bird -----\teuropean_football_2",
    "179": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 AND T2.q1 = ( SELECT MAX(q1) FROM qualifying WHERE raceId = 20 GROUP BY driverId LIMIT 5 ) ORDER BY T2.q1 DESC LIMIT 5\t----- bird -----\tformula_1",
    "180": "SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)\t----- bird -----\tformula_1",
    "181": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'\t----- bird -----\tformula_1",
    "182": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Australian Grand Prix'\t----- bird -----\tformula_1",
    "183": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Abu Dhabi Grand Prix'\t----- bird -----\tformula_1",
    "184": "SELECT T2.q1 FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Bruno' AND T1.surname = 'Senna' AND T2.raceId = 354\t----- bird -----\tformula_1",
    "185": "SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 LIKE 'M:SS%'\t----- bird -----\tformula_1",
    "186": "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL\t----- bird -----\tformula_1",
    "187": "SELECT T1.forename, T1.surname, T1.dob FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1\t----- bird -----\tformula_1",
    "188": "SELECT T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.raceId = 161 AND T2.time LIKE '01:27%'\t----- bird -----\tformula_1",
    "189": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix'\t----- bird -----\tformula_1",
    "190": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.raceId = 9 ORDER BY T2.points DESC LIMIT 1\t----- bird -----\tformula_1",
    "191": "SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 LIKE '1:33%'\t----- bird -----\tformula_1",
    "192": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901\t----- bird -----\tformula_1",
    "193": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1\t----- bird -----\tformula_1",
    "194": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)\t----- bird -----\tformula_1",
    "195": "SELECT CAST((T1.fastestLapSpeed - T2.fastestLapSpeed) * 100.0 / T1.fastestLapSpeed AS REAL) FROM (SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results WHERE raceId = 853) AS T1, (SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results WHERE raceId = 854) AS T2\t----- bird -----\tformula_1",
    "196": "SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'\t----- bird -----\tformula_1",
    "197": "SELECT T1.name FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T2.year = (SELECT MIN(year) FROM seasons) AND strftime('%m', T1.date) = (SELECT MIN(strftime('%m', date)) FROM races WHERE year = (SELECT MIN(year) FROM seasons))\t----- bird -----\tformula_1",
    "198": "SELECT T1.forename, T1.surname, MAX(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY T2.points DESC LIMIT 1\t----- bird -----\tformula_1",
    "199": "SELECT T3.forename, T3.surname, T2.name FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes )\t----- bird -----\tformula_1",
    "200": "SELECT AVG(T3.milliseconds) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId AND T2.driverId = T3.driverId INNER JOIN drivers AS T4 ON T2.driverId = T4.driverId WHERE T1.name = 'Malaysian Grand Prix' AND T1.year = 2009 AND T4.forename = 'Lewis' AND T4.surname = 'Hamilton'\t----- bird -----\tformula_1",
    "201": "SELECT CAST(SUM(CASE WHEN T1.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.position) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.surname = 'Hamilton' AND T2.year >= 2010\t----- bird -----\tformula_1",
    "202": "SELECT T3.forename, T3.surname, T3.nationality, MAX(T1.points) FROM driverStandings AS T1 INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId GROUP BY T3.driverRef ORDER BY SUM(T1.points) DESC LIMIT 1\t----- bird -----\tformula_1",
    "203": "SELECT strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T1.dob) AS age, T1.forename, T1.surname FROM drivers AS T1 WHERE T1.nationality = 'Japanese' ORDER BY T1.dob DESC LIMIT 1\t----- bird -----\tformula_1",
    "204": "SELECT T1.name, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE strftime('%Y-%m', T1.date) = '2005-09'\t----- bird -----\tformula_1",
    "205": "SELECT T1.raceId FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20\t----- bird -----\tformula_1",
    "206": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' AND T2.fastestLap = ( SELECT MIN(milliseconds) FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher' ) )\t----- bird -----\tformula_1",
    "207": "SELECT T2.year, T4.points FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN driverStandings AS T4 ON T2.raceId = T4.raceId AND T2.driverId = T4.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T3.year ASC LIMIT 1\t----- bird -----\tformula_1",
    "208": "SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'\t----- bird -----\tformula_1",
    "209": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'\t----- bird -----\tformula_1",
    "210": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'\t----- bird -----\tformula_1",
    "211": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers)\t----- bird -----\tformula_1",
    "212": "SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 AND T1.position = 1\t----- bird -----\tformula_1",
    "213": "SELECT T1.raceId FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1\t----- bird -----\tformula_1",
    "214": "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009\t----- bird -----\tformula_1",
    "215": "SELECT T3.position FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008\t----- bird -----\tformula_1",
    "216": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.position = 2\t----- bird -----\tformula_1",
    "217": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Chinese Grand Prix' AND T1.time IS NOT NULL AND EXISTS(SELECT * FROM results WHERE driverId = T1.driverId)\t----- bird -----\tformula_1",
    "218": "SELECT CAST((T1.champion_time - T2.last_driver_time) AS REAL) * 100 / T2.last_driver_time FROM (SELECT T3.champion_time, T3.last_driver_time FROM results AS T1 JOIN (SELECT raceId, MIN(lastDriverTime) AS last_driver_time, MIN(championTime) AS champion_time FROM (SELECT T1.raceId, T1.driverId, T1.statusId, T1.fastestLap, T1.rank, T1.fastestLapTime, T1.fastestLapSpeed, T1.grid, T1.laps, T1.milliseconds, T1.points, T1.position, T1.positionOrder, T1.positionText, T1.number, T1.time, T1.constructorId, T1.statusId, T1.driverId, T1.raceId, T2.lastDriverTime, T2.championTime FROM results AS T1 JOIN (SELECT raceId, MAX(incremental_time) AS lastDriverTime, MIN(incremental_time) AS championTime FROM (SELECT T1.raceId, T1.driverId, T1.statusId, T1.fastestLap, T1.rank, T1.fastestLapTime, T1.fastestLapSpeed, T1.grid, T1.laps, T1.milliseconds, T1.points, T1.position, T1.positionOrder, T1.positionText, T1.number, T1.time, T1.constructorId, T1.statusId, T1.driverId, T1.raceId, T2.incremental_time AS lastDriverTime, T2.incremental_time AS championTime FROM results AS T1 JOIN (SELECT raceId, driverId, incremental_time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') ORDER BY incremental_time DESC LIMIT 1) AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = T2.raceId AND T1.driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND position = 1) ) GROUP BY raceId ) AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') ) AS T3) AS T1 JOIN (SELECT T3.last_driver_time FROM results AS T1 JOIN (SELECT raceId, MAX(incremental_time) AS lastDriverTime FROM (SELECT T1.raceId, T1.driverId, T1.statusId, T1.fastestLap, T1.rank, T1.fastestLapTime, T1.fastestLapSpeed, T1.grid, T1.laps, T1.milliseconds, T1.points, T1.position, T1.positionOrder, T1.positionText, T1.number, T1.time, T1.constructorId, T1.statusId, T1.driverId, T1.raceId, T2.incremental_time AS lastDriverTime FROM results AS T1 JOIN (SELECT raceId, driverId, incremental_time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') ORDER BY incremental_time DESC LIMIT 1) AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = T2.raceId AND T1.driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND position = LAST) ) GROUP BY raceId ) AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') ) AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND T1.driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND position = 1)\t----- bird -----\tformula_1",
    "219": "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide'\t----- bird -----\tformula_1",
    "220": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'\t----- bird -----\tformula_1",
    "221": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0\t----- bird -----\tformula_1",
    "222": "SELECT COUNT(*) FROM (SELECT constructorId FROM constructorResults WHERE points = 0 GROUP BY constructorId HAVING COUNT(raceId) = 2) AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Japanese'\t----- bird -----\tformula_1",
    "223": "SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.time) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year BETWEEN 2007 AND 2009 AND T3.nationality = 'Japanese'\t----- bird -----\tformula_1",
    "224": "SELECT AVG(strftime('%s', T1.time)) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year < 1975 AND T1.time IS NOT NULL AND T1.position = 1\t----- bird -----\tformula_1",
    "225": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.position = 1\t----- bird -----\tformula_1",
    "226": "SELECT AVG(T1.fastestLapSpeed) FROM (SELECT T1.fastestLapSpeed FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009) AS T1\t----- bird -----\tformula_1",
    "227": "SELECT CAST(SUM(CASE WHEN T2.dob < '1985-01-01' AND T1.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2000 AND 2005)\t----- bird -----\tformula_1",
    "228": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.time < '02:00.00'\t----- bird -----\tformula_1",
    "229": "SELECT T1.code FROM drivers AS T1 WHERE T1.nationality = 'American'\t----- bird -----\tformula_1",
    "230": "SELECT COUNT(*) FROM (SELECT driverId FROM drivers WHERE nationality = 'Dutch' AND driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3))\t----- bird -----\tformula_1",
    "231": "SELECT T1.driverRef FROM drivers AS T1 WHERE T1.dob = ( SELECT MIN(T1.dob) FROM drivers AS T1 WHERE T1.nationality = 'German' ) AND T1.nationality = 'German'\t----- bird -----\tformula_1",
    "232": "SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE strftime('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL\t----- bird -----\tformula_1",
    "233": "SELECT COUNT(*) FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NOT NULL\t----- bird -----\tformula_1",
    "234": "SELECT location, lat, lng FROM circuits WHERE country = 'Austria'\t----- bird -----\tformula_1",
    "235": "SELECT T1.date, T1.time, T2.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.dob = (SELECT MIN(dob) FROM drivers) ORDER BY T1.date ASC LIMIT 1\t----- bird -----\tformula_1",
    "236": "SELECT T1.forename, T1.surname, T3.driverId FROM drivers AS T1 INNER JOIN ( SELECT T2.driverId, AVG(T2.duration) AS avg_duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1980' AND '1985' GROUP BY T2.driverId ) AS T3 ON T1.driverId = T3.driverId ORDER BY T3.avg_duration ASC LIMIT 3\t----- bird -----\tformula_1",
    "237": "SELECT T1.driverId, T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.position = 1 AND T1.time LIKE '%:%:%.%'\t----- bird -----\tformula_1",
    "238": "SELECT T2.constructorRef, T2.url FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = ( SELECT raceId FROM races WHERE name = '2009 Singapore Grand Prix' ) AND T1.position = 1 ORDER BY T1.time DESC LIMIT 1\t----- bird -----\tformula_1",
    "239": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = ( SELECT id FROM superhero WHERE superhero_name = '3-D Man' )\t----- bird -----\tsuperhero",
    "240": "SELECT T3.points, T2.name, T2.nationality FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.name = 'Monaco Grand Prix' AND T1.year BETWEEN 1980 AND 2010 GROUP BY T3.constructorId ORDER BY SUM(T2.points) DESC LIMIT 1\t----- bird -----\tformula_1",
    "241": "SELECT T3.forename, T3.surname FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Marina Bay Street Circuit' AND T2.year = 2008 AND T1.position = 1 AND T1.q3 = ( SELECT MIN(q3) FROM qualifying WHERE raceId IN ( SELECT raceId FROM races WHERE name = 'Marina Bay Street Circuit' AND year = 2008 ) )\t----- bird -----\tformula_1",
    "242": "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) ORDER BY T3.year ASC LIMIT 1\t----- bird -----\tformula_1",
    "243": "SELECT COUNT(*) FROM results WHERE statusId = 3 AND raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1\t----- bird -----\tformula_1",
    "244": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.time = ( SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId LIMIT 20 ) GROUP BY T2.driverId LIMIT 20\t----- bird -----\tformula_1",
    "245": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ORDER BY T1.time LIMIT 1\t----- bird -----\tformula_1",
    "246": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200\t----- bird -----\tsuperhero",
    "247": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN colour AS T3 ON T2.eye_colour_id = T3.id WHERE T3.colour = 'Blue' AND T1.power_id IN (SELECT id FROM superpower WHERE power_name = 'Agility')\t----- bird -----\tsuperhero",
    "248": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'\t----- bird -----\tsuperhero",
    "249": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1\t----- bird -----\tsuperhero",
    "250": "SELECT T1.superhero_name, T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') GROUP BY T2.colour ORDER BY COUNT(T1.id) DESC\t----- bird -----\tsuperhero",
    "251": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T3.power_name = 'Super Strength' AND T4.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "252": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value ASC LIMIT 1\t----- bird -----\tsuperhero",
    "253": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "254": "SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T1.attribute_value ASC LIMIT 1\t----- bird -----\tsuperhero",
    "255": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'\t----- bird -----\tsuperhero",
    "256": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50\t----- bird -----\tsuperhero",
    "257": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'\t----- bird -----\tsuperhero",
    "258": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female')\t----- bird -----\tsuperhero",
    "259": "SELECT CAST(SUM(CASE WHEN T3.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "260": "SELECT SUM(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id\t----- bird -----\tsuperhero",
    "261": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'\t----- bird -----\tsuperhero",
    "262": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL\t----- bird -----\tsuperhero",
    "263": "SELECT AVG(T2.weight_kg) FROM gender AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.gender_id WHERE T1.gender = 'Female'\t----- bird -----\tsuperhero",
    "264": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.gender_id = ( SELECT id FROM gender WHERE gender = 'Male' ) LIMIT 5\t----- bird -----\tsuperhero",
    "265": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'\t----- bird -----\tsuperhero",
    "266": "SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T1.height_cm = 185 AND T3.race = 'human'\t----- bird -----\tsuperhero",
    "267": "SELECT CAST(SUM(CASE WHEN T2.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180\t----- bird -----\tsuperhero",
    "268": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)\t----- bird -----\tsuperhero",
    "269": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1\t----- bird -----\tsuperhero",
    "270": "SELECT COUNT(*) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'\t----- bird -----\tsuperhero",
    "271": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' ORDER BY T2.attribute_value DESC LIMIT 1\t----- bird -----\tsuperhero",
    "272": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'durability' AND T1.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') ORDER BY T2.attribute_value DESC LIMIT 1\t----- bird -----\tsuperhero",
    "273": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.gender_id = ( SELECT id FROM gender WHERE gender = 'Female' ) AND T2.publisher_name = 'Dark Horse Comics'\t----- bird -----\tsuperhero",
    "274": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.hair_colour_id = T1.skin_colour_id\t----- bird -----\tsuperhero",
    "275": "SELECT CAST(SUM(CASE WHEN T3.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'\t----- bird -----\tsuperhero",
    "276": "SELECT COUNT(T2.power_id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'\t----- bird -----\tsuperhero",
    "277": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'\t----- bird -----\tsuperhero",
    "278": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'\t----- bird -----\tsuperhero",
    "279": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'\t----- bird -----\tsuperhero",
    "280": "SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = ( SELECT id FROM attribute WHERE attribute_name = 'Strength' ) AND attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = ( SELECT id FROM attribute WHERE attribute_name = 'Strength' ) )\t----- bird -----\tsuperhero",
    "281": "SELECT CAST(SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.publisher_name) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Marvel Comics' AND T2.gender_id IN (SELECT id FROM gender WHERE gender = 'Female')\t----- bird -----\tsuperhero",
    "282": "SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler')\t----- bird -----\tsuperhero",
    "283": "SELECT CAST(SUM(T1.height_cm) AS REAL) / COUNT(T1.height_cm) FROM superhero AS T1 WHERE T1.height_cm IS NOT NULL\t----- bird -----\tsuperhero",
    "284": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Abomination' )\t----- bird -----\tsuperhero",
    "285": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1\t----- bird -----\tsuperhero",
    "286": "SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = (SELECT id FROM superhero WHERE superhero_name = '3-D Man')\t----- bird -----\tsuperhero",
    "287": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'\t----- bird -----\tsuperhero",
    "288": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy') GROUP BY T2.publisher_name HAVING COUNT(T1.superhero_name) = 3\t----- bird -----\tsuperhero",
    "289": "SELECT CAST(SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id\t----- bird -----\tsuperhero",
    "290": "SELECT CAST(SUM(CASE WHEN T2.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id\t----- bird -----\tsuperhero",
    "291": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'\t----- bird -----\tsuperhero",
    "292": "SELECT SUM(CASE WHEN T2.id  = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id  = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL\t----- bird -----\tsuperhero",
    "293": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'\t----- bird -----\tsuperhero",
    "294": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC\t----- bird -----\tsuperhero",
    "295": "SELECT T2.gender FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T3.power_name = 'Phoenix Force' AND T2.gender_id = (SELECT id FROM gender WHERE gender = 'Male')\t----- bird -----\tsuperhero",
    "296": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id\t----- bird -----\tsuperhero",
    "297": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 WHERE T1.DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY T1.Reputation DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "298": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'\t----- bird -----\tcodebase_community",
    "299": "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01'\t----- bird -----\tcodebase_community",
    "300": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Eliciting priors from experts'\t----- bird -----\tcodebase_community",
    "301": "SELECT COUNT(*) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "302": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Title = 'Examples for teaching: Correlation does not mean causation'\t----- bird -----\tcodebase_community",
    "303": "SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20\t----- bird -----\tcodebase_community",
    "304": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian'\t----- bird -----\tcodebase_community",
    "305": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "306": "SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5\t----- bird -----\tcodebase_community",
    "307": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 3025 AND T2.CreationDate = '2014-04-23 20:29:39'\t----- bird -----\tcodebase_community",
    "308": "SELECT CASE WHEN (SELECT ClosedDate FROM posts WHERE Id = (SELECT PostId FROM postLinks WHERE RelatedPostId = (SELECT PostId FROM comments WHERE UserId = 23853 AND CreationDate = '2013-07-12 09:08:18.0'))) IS NULL THEN 'Not Well-finished' ELSE 'Well-finished' END\t----- bird -----\tcodebase_community",
    "309": "SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Tiago Pasqualini'\t----- bird -----\tcodebase_community",
    "310": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347\t----- bird -----\tcodebase_community",
    "311": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / COUNT(T2.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.OwnerUserId = 24 AND T2.UserId = 24\t----- bird -----\tcodebase_community",
    "312": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'\t----- bird -----\tcodebase_community",
    "313": "SELECT Text FROM comments WHERE Score = 17\t----- bird -----\tcodebase_community",
    "314": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'\t----- bird -----\tcodebase_community",
    "315": "SELECT T1.DisplayName, T2.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'\t----- bird -----\tcodebase_community",
    "316": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Open source tools for visualizing multi-dimensional data'\t----- bird -----\tcodebase_community",
    "317": "SELECT T1.Text FROM comments AS T1 INNER JOIN postHistory AS T2 ON T1.PostId = T2.PostId WHERE T2.Comment = 'Why square the difference instead of taking the absolute value in standard deviation?'\t----- bird -----\tcodebase_community",
    "318": "SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id WHERE T1.BountyAmount = 50 AND T3.Title LIKE '%variance%'\t----- bird -----\tcodebase_community",
    "319": "SELECT T1.Title, T3.Text, AVG(T1.ViewCount) FROM posts AS T1 INNER JOIN postTags AS T2 ON T1.Id = T2.PostId INNER JOIN comments AS T3 ON T1.Id = T3.PostId WHERE T2.TagName = 'humor' GROUP BY T1.Id\t----- bird -----\tcodebase_community",
    "320": "SELECT COUNT(T1.UserId) FROM (SELECT UserId, COUNT(*) AS cnt FROM badges GROUP BY UserId) AS T1 WHERE T1.cnt > 5\t----- bird -----\tcodebase_community",
    "321": "SELECT T1.Id, T1.ViewCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.ViewCount >= 1000 AND (SELECT COUNT(*) FROM postHistory WHERE PostId = T1.Id) = 1 GROUP BY T1.Id HAVING COUNT(T3.PostId) = 1\t----- bird -----\tcodebase_community",
    "322": "SELECT CAST((SUM(CASE WHEN strftime('%Y', T1.Date) = '2011' THEN 1 ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T1.Date) = '2010' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.Name = 'Student' THEN 1 ELSE 0 END) FROM badges AS T1 WHERE T1.Name = 'Student'\t----- bird -----\tcodebase_community",
    "323": "SELECT CAST(SUM(T1.UpVotes) AS REAL) / COUNT(T1.Id) AS AverageUpVotes, CAST(SUM(T2.Age) AS REAL) / COUNT(T2.Id) AS AverageAge FROM (SELECT UserId, SUM(UpVotes) AS UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes FROM (SELECT UserId, UpVotes\t----- bird -----\tcodebase_community",
    "324": "SELECT CAST(SUM(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END) FROM votes;\t----- bird -----\tcodebase_community",
    "325": "SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "326": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' OR T2.DisplayName = 'Noah Snyder' ORDER BY T1.ViewCount DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "327": "SELECT T1.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T2.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes') AND T2.CommentCount = 0\t----- bird -----\tcodebase_community",
    "328": "SELECT CAST(SUM(CASE WHEN T2.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Community' )\t----- bird -----\tcodebase_community",
    "329": "SELECT SUM(CASE WHEN T1.DisplayName = 'Mornington' THEN T2.ViewCount ELSE 0 END) - SUM(CASE WHEN T1.DisplayName = 'Amos' THEN T2.ViewCount ELSE 0 END) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId\t----- bird -----\tcodebase_community",
    "330": "SELECT CAST(SUM(CASE WHEN strftime('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2 THEN 1 ELSE 0 END) AS REAL) * 12 / COUNT(DISTINCT strftime('%m', T1.CreationDate)) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id\t----- bird -----\tcodebase_community",
    "331": "SELECT T1.CreationDate FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl' ORDER BY T1.CreationDate ASC LIMIT 1\t----- bird -----\tcodebase_community",
    "332": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' ORDER BY T2.Date ASC LIMIT 1\t----- bird -----\tcodebase_community",
    "333": "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4\t----- bird -----\tcodebase_community",
    "334": "SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "335": "SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2010' ORDER BY T1.FavoriteCount DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "336": "SELECT CAST(SUM(CASE WHEN T1.Reputation > 1000 AND STRFTIME('%Y', T2.CreationDate) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.CreationDate BETWEEN '2011-01-01' AND '2011-12-31'\t----- bird -----\tcodebase_community",
    "337": "SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets' ORDER BY T1.LasActivityDate DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "338": "SELECT COUNT(*) FROM comments WHERE PostId = ( SELECT Id FROM posts WHERE Score = ( SELECT MAX(Score) FROM posts ) LIMIT 1 )\t----- bird -----\tcodebase_community",
    "339": "SELECT T1.Text, T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id WHERE T3.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10\t----- bird -----\tcodebase_community",
    "340": "SELECT CAST(SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Reputation = ( SELECT MAX(Reputation) FROM users )\t----- bird -----\tcodebase_community",
    "341": "SELECT T1.Id FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'sample' UNION SELECT T1.Id FROM tags AS T1 INNER JOIN posts AS T2 ON T1.WikiPostId = T2.Id WHERE T1.TagName = 'sample'\t----- bird -----\tcodebase_community",
    "342": "SELECT T1.Reputation, T1.UpVotes FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'fine, you win :)'\t----- bird -----\tcodebase_community",
    "343": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 ORDER BY T1.Score DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "344": "SELECT COUNT(*) FROM (SELECT PostId FROM comments WHERE Score = 0 GROUP BY PostId HAVING COUNT(*) = 1)\t----- bird -----\tcodebase_community",
    "345": "SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.UpVotes) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10\t----- bird -----\tcodebase_community",
    "346": "SELECT uuid FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL\t----- bird -----\tcard_games",
    "347": "SELECT * FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND cardKingdomFoilId = cardKingdomId\t----- bird -----\tcard_games",
    "348": "SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'\t----- bird -----\tcard_games",
    "349": "SELECT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.types = 'Artifact' AND T2.side IS NULL AND T1.format = 'vintage'\t----- bird -----\tcard_games",
    "350": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'\t----- bird -----\tcard_games",
    "351": "SELECT T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniel'\t----- bird -----\tcard_games",
    "352": "SELECT T1.name, T1.artist, T3.isPromo FROM cards AS T1 INNER JOIN ( SELECT uuid, COUNT(uuid) AS cnt FROM rulings GROUP BY uuid ORDER BY cnt DESC LIMIT 1 ) AS T2 ON T1.uuid = T2.uuid INNER JOIN ( SELECT uuid, isPromo FROM cards ) AS T3 ON T1.uuid = T3.uuid WHERE T3.isPromo = 1\t----- bird -----\tcard_games",
    "353": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'\t----- bird -----\tcard_games",
    "354": "SELECT COUNT(*) FROM cards WHERE power = '*'\t----- bird -----\tcard_games",
    "355": "SELECT T1.borderColor FROM cards AS T1 WHERE T1.name = 'Ancestor''s Chosen'\t----- bird -----\tcard_games",
    "356": "SELECT T2.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'\t----- bird -----\tcard_games",
    "357": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards\t----- bird -----\tcard_games",
    "358": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1\t----- bird -----\tcard_games",
    "359": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'\t----- bird -----\tcard_games",
    "360": "SELECT id FROM cards WHERE duelDeck = 'a'\t----- bird -----\tcard_games",
    "361": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'\t----- bird -----\tcard_games",
    "362": "SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType LIKE '%Artifact%' AND T1.colors = 'B' AND T2.language != ''\t----- bird -----\tcard_games",
    "363": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper'\t----- bird -----\tcard_games",
    "364": "SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0 UNION SELECT id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0 ORDER BY id\t----- bird -----\tcard_games",
    "365": "SELECT COUNT(T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brasil)'\t----- bird -----\tcard_games",
    "366": "SELECT DISTINCT T2.subtypes, T2.supertypes FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.subtypes IS NOT NULL AND T2.supertypes IS NOT NULL\t----- bird -----\tcard_games",
    "367": "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'\t----- bird -----\tcard_games",
    "368": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'premodern' AND T1.side IS NULL AND EXISTS(SELECT * FROM rulings AS T3 WHERE T3.uuid = T1.uuid AND T3.text = 'This is a triggered mana ability.')\t----- bird -----\tcard_games",
    "369": "SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.artist = 'Matthew D. Wilson' AND T1.type = 'Creature' AND T2.language = 'French'\t----- bird -----\tcard_games",
    "370": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'\t----- bird -----\tcard_games",
    "371": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.hasContentWarning) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'\t----- bird -----\tcard_games",
    "372": "SELECT CAST(SUM(CASE WHEN T1.language = 'French' AND (T2.power IS NULL OR T2.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T2.power IS NULL OR T2.power = '*' THEN 1 ELSE NULL END) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.power IS NULL OR T2.power = '*'\t----- bird -----\tcard_games",
    "373": "SELECT language FROM foreign_data WHERE multiverseid = 149934;\t----- bird -----\tcard_games",
    "374": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards\t----- bird -----\tcard_games",
    "375": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T1.code = 'ARC'\t----- bird -----\tcard_games",
    "376": "SELECT T2.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'A Pedra Fellwar'\t----- bird -----\tcard_games",
    "377": "SELECT T1.name FROM cards AS T1 WHERE T1.convertedManaCost > ( SELECT MIN(T1.convertedManaCost) FROM cards AS T1 WHERE T1.name IN ('Serra Angel', 'Shrine Keeper') ) AND T1.name IN ('Serra Angel', 'Shrine Keeper') ORDER BY T1.convertedManaCost DESC LIMIT 1\t----- bird -----\tcard_games",
    "378": "SELECT T2.translation FROM set_translations AS T2 WHERE T2.language = 'Italian' AND T2.setCode IN (SELECT T1.setCode FROM cards AS T1 WHERE T1.name = 'Ancestor''s Chosen')\t----- bird -----\tcard_games",
    "379": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'\t----- bird -----\tcard_games",
    "380": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'\t----- bird -----\tcard_games",
    "381": "SELECT T2.translation FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'\t----- bird -----\tcard_games",
    "382": "SELECT T1.mtgoCode IS NOT NULL FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Angel of Mercy'\t----- bird -----\tcard_games",
    "383": "SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL\t----- bird -----\tcard_games",
    "384": "SELECT T1.isForeignOnly FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Adarkar Valkyrie'\t----- bird -----\tcard_games",
    "385": "SELECT COUNT(*) FROM sets WHERE baseSetSize < 100 AND EXISTS(SELECT 1 FROM set_translations WHERE set_translations.setCode = sets.code AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL)\t----- bird -----\tcard_games",
    "386": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')\t----- bird -----\tcard_games",
    "387": "SELECT COUNT(*) FROM cards AS T1 WHERE T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL) AND T1.setCode IN (SELECT T2.setCode FROM sets AS T2 WHERE T2.name = 'Coldsnap')\t----- bird -----\tcard_games",
    "388": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Italian' AND T1.name = 'Ancestor''s Chosen'\t----- bird -----\tcard_games",
    "389": "SELECT T2.text FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.setCode = 'Coldsnap' AND T2.language = 'Italian'\t----- bird -----\tcard_games",
    "390": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Italian' AND T2.setCode = 'Coldsnap' ORDER BY T2.convertedManaCost DESC LIMIT 1\t----- bird -----\tcard_games",
    "391": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'\t----- bird -----\tcard_games",
    "392": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.cardKingdomId) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'\t----- bird -----\tcard_games",
    "393": "SELECT T1.format, T2.name FROM (SELECT format, COUNT(*) AS BannedCount FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY BannedCount DESC LIMIT 1) AS T1 JOIN legalities AS T2 ON T1.format = T2.format JOIN cards AS T3 ON T2.uuid = T3.uuid WHERE T2.status = 'Banned'\t----- bird -----\tcard_games",
    "394": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'\t----- bird -----\tcard_games",
    "395": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.set = (SELECT code FROM sets WHERE name = 'Hour of Devastation') AND T2.status = 'Legal' GROUP BY T2.format\t----- bird -----\tcard_games",
    "396": "SELECT T1.name FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Korean' AND NOT EXISTS(SELECT * FROM set_translations WHERE setCode = T1.code AND language = 'Japanese') GROUP BY T1.name HAVING COUNT(T2.id) > 0\t----- bird -----\tcard_games",
    "397": "SELECT DISTINCT T1.frameVersion, T1.artist, T2.status FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' AND T2.status = 'Banned'\t----- bird -----\tcard_games",
    "398": "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T1.bond_id) DESC LIMIT 1\t----- bird -----\ttoxicology",
    "399": "SELECT AVG(CASE WHEN T1.element = 'o' THEN 1 ELSE 0 END) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '-'\t----- bird -----\ttoxicology",
    "400": "SELECT CAST(SUM(CASE WHEN T3.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T4.label = '+'\t----- bird -----\ttoxicology",
    "401": "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '+'\t----- bird -----\ttoxicology",
    "402": "SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '='\t----- bird -----\ttoxicology",
    "403": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9' UNION SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR004_8_9'\t----- bird -----\ttoxicology",
    "404": "SELECT DISTINCT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '='\t----- bird -----\ttoxicology",
    "405": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'H' GROUP BY T2.label ORDER BY COUNT(T1.atom_id) DESC LIMIT 1\t----- bird -----\ttoxicology",
    "406": "SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1\t----- bird -----\ttoxicology",
    "407": "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')\t----- bird -----\ttoxicology",
    "408": "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE (T1.element = 'i' OR T1.element = 's') AND T3.bond_type = '-'\t----- bird -----\ttoxicology",
    "409": "SELECT CAST(SUM(CASE WHEN T1.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'\t----- bird -----\ttoxicology",
    "410": "SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) * 100 / COUNT(T2.bond_id) AS REAL) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'\t----- bird -----\ttoxicology",
    "411": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3\t----- bird -----\ttoxicology",
    "412": "SELECT CAST(SUM(CASE WHEN T2.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR008'\t----- bird -----\ttoxicology",
    "413": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 WHERE T1.label = '+'\t----- bird -----\ttoxicology",
    "414": "SELECT CAST(SUM(CASE WHEN T1.element = 'H' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 WHERE T1.molecule_id = 'TR206'\t----- bird -----\ttoxicology",
    "415": "SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'\t----- bird -----\ttoxicology",
    "416": "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR010') AND T1.atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR010') GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_type) DESC LIMIT 1\t----- bird -----\ttoxicology",
    "417": "SELECT T1.label FROM molecule AS T1 WHERE T1.molecule_id IN (SELECT T2.molecule_id FROM bond AS T2 WHERE T2.bond_type = '-' GROUP BY T2.molecule_id HAVING COUNT(T2.bond_id) = 1) AND T1.label = '-' ORDER BY T1.label LIMIT 3\t----- bird -----\ttoxicology",
    "418": "SELECT COUNT(*) FROM connected WHERE (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12') AND EXISTS (SELECT 1 FROM atom WHERE atom_id = connected.atom_id AND molecule_id = 'TR009' OR atom_id2 = connected.atom_id2 AND molecule_id = 'TR009')\t----- bird -----\ttoxicology",
    "419": "SELECT T1.bond_type, T2.atom_id, T3.atom_id AS atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR001_6_9'\t----- bird -----\ttoxicology",
    "420": "SELECT COUNT(*) FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19'\t----- bird -----\ttoxicology",
    "421": "SELECT element FROM atom WHERE molecule_id = 'TR004'\t----- bird -----\ttoxicology",
    "422": "SELECT DISTINCT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T2.atom_id, 7, 2) BETWEEN '21' AND '25' AND T1.label = '+'\t----- bird -----\ttoxicology",
    "423": "SELECT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'p' AND (SELECT T4.element FROM atom AS T4 WHERE T4.atom_id = T2.atom_id2) = 'n' UNION SELECT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'p' AND (SELECT T4.element FROM atom AS T4 WHERE T4.atom_id = T2.atom_id) = 'n'\t----- bird -----\ttoxicology",
    "424": "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1\t----- bird -----\ttoxicology",
    "425": "SELECT AVG(COUNT(T2.bond_id)) FROM (SELECT COUNT(T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 WHERE T1.element = 'I' GROUP BY T1.atom_id) AS subquery\t----- bird -----\ttoxicology",
    "426": "SELECT atom_id FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected) AND atom_id NOT IN (SELECT atom_id2 FROM connected)\t----- bird -----\ttoxicology",
    "427": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T1.molecule_id = 'TR041'\t----- bird -----\ttoxicology",
    "428": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19'\t----- bird -----\ttoxicology",
    "429": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#'\t----- bird -----\ttoxicology",
    "430": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) * 100 AS REAL) / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'\t----- bird -----\ttoxicology",
    "431": "SELECT COUNT(*) FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T1.atom_id = T3.atom_id JOIN connected AS T4 ON T3.bond_id = T4.bond_id AND T3.atom_id2 = T4.atom_id2 WHERE (T1.element = 'p' OR T1.element = 'br') AND T2.bond_type = '#'\t----- bird -----\ttoxicology",
    "432": "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '-'\t----- bird -----\ttoxicology",
    "433": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11' UNION SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR001_10_11'\t----- bird -----\ttoxicology",
    "434": "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'\t----- bird -----\ttoxicology",
    "435": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4'\t----- bird -----\ttoxicology",
    "436": "SELECT T1.label, CAST(SUM(CASE WHEN T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.element) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'\t----- bird -----\ttoxicology",
    "437": "SELECT T1.label FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5\t----- bird -----\ttoxicology",
    "438": "SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 400 AND T2.Virtual = 'F'\t----- bird -----\tcalifornia_schools",
    "439": "SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500\t----- bird -----\tcalifornia_schools",
    "440": "SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr > 0.3\t----- bird -----\tcalifornia_schools",
    "441": "SELECT T2.CharterNum FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite > 499 AND T2.Charter IS NOT NULL ORDER BY T1.AvgScrWrite DESC\t----- bird -----\tcalifornia_schools",
    "442": "SELECT T1.School, T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30\t----- bird -----\tcalifornia_schools",
    "443": "SELECT T3.School FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds INNER JOIN schools AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.NumGE1500 >= 1500\t----- bird -----\tcalifornia_schools",
    "444": "SELECT T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Riverside' AND T2.AvgScrMath > 400 GROUP BY T1.FundingType\t----- bird -----\tcalifornia_schools",
    "445": "SELECT T1.School, T1.Street, T1.City, T1.State, T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`County Name` = 'Monterey' AND T2.`FRPM Count (Ages 15-17)` > 800 AND T1.School LIKE '%High%'\t----- bird -----\tcalifornia_schools",
    "446": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.OpenDate > '1991-01-01' OR T2.ClosedDate < '2000-01-01' AND T1.AvgScrWrite IS NOT NULL\t----- bird -----\tcalifornia_schools",
    "447": "SELECT T1.School, T1.DOCType FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Local' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm WHERE FundingType = 'Local')\t----- bird -----\tcalifornia_schools",
    "448": "SELECT T1.`Percent (%) Eligible Free (K-12)` FROM frpm AS T1 INNER JOIN (SELECT CDSCode FROM schools ORDER BY `Enrollment (K-12)` DESC LIMIT 10, 2) AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL\t----- bird -----\tcalifornia_schools",
    "449": "SELECT T2.`Percent (%) Eligible FRPM (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.ownership_code = '66' ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5\t----- bird -----\tcalifornia_schools",
    "450": "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr != 0 AND T1.NumGE1500 / T1.NumTstTakr = (SELECT MIN(NumGE1500 / NumTstTakr) FROM satscores WHERE NumTstTakr != 0)\t----- bird -----\tcalifornia_schools",
    "451": "SELECT T3.AdmFName1, T3.AdmLName1, T3.AdmFName2, T3.AdmLName2, T3.AdmFName3, T3.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN schools AS T3 ON T2.CDSCode = T3.CDSCode WHERE T1.NumGE1500 >= 1500 ORDER BY T1.NumGE1500 DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "452": "SELECT AVG(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND T1.City = 'Fresno'\t----- bird -----\tcalifornia_schools",
    "453": "SELECT T3.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN frpm AS T3 ON T2.CDSCode = T3.CDSCode WHERE T2.District = 'Fresno Unified' ORDER BY T1.AvgScrRead ASC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "454": "SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' AND T2.AvgScrRead IN (SELECT AVG(AvgScrRead) FROM satscores GROUP BY County ORDER BY AVG(AvgScrRead) DESC LIMIT 5) GROUP BY T1.County, T1.School ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 5\t----- bird -----\tcalifornia_schools",
    "455": "SELECT T2.School, AVG(T1.AvgScrWrite) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich' GROUP BY T2.School\t----- bird -----\tcalifornia_schools",
    "456": "SELECT T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' AND T2.`Enrollment (K-12)` IS NOT NULL ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "457": "SELECT CAST(COUNT(T1.CDSCode) AS REAL) / 12 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T1.County = 'Alameda' AND T2.DOC = '52'\t----- bird -----\tcalifornia_schools",
    "458": "SELECT CAST(SUM(CASE WHEN T1.DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.DOC = 52 THEN 1 ELSE 0 END) FROM schools AS T1 WHERE T1.County = 'Orange' AND (T1.DOC = 52 OR T1.DOC = 54)\t----- bird -----\tcalifornia_schools",
    "459": "SELECT T1.Street FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath IN (SELECT AVG(AvgScrMath) FROM satscores ORDER BY AvgScrMath DESC LIMIT 6, 1)\t----- bird -----\tcalifornia_schools",
    "460": "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Charter School (Y/N)` = 0 AND `Percent (%) Eligible Free (K-12)` < 0.18\t----- bird -----\tcalifornia_schools",
    "461": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.School = 'State Special School' AND T1.`Academic Year` = '2014-2015' AND T2.City = 'Fremont' AND T2.EILCode = 'SSS'\t----- bird -----\tcalifornia_schools",
    "462": "SELECT T2.School, T1.`Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`County Name` = 'Los Angeles' AND T1.`Low Grade` = 'Kindergarten' AND T1.`High Grade` = '9'\t----- bird -----\tcalifornia_schools",
    "463": "SELECT T1.County, COUNT(T1.County) FROM schools AS T1 INNER JOIN ( SELECT County FROM schools WHERE Virtual = 'F' GROUP BY County ) AS T2 ON T1.County = T2.County WHERE T1.County IN ('San Diego', 'Santa Barbara') GROUP BY T1.County ORDER BY COUNT(T1.County) DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "464": "SELECT GSoffered FROM schools WHERE ABS(Longitude) = (SELECT MAX(ABS(Longitude)) FROM schools)\t----- bird -----\tcalifornia_schools",
    "465": "SELECT COUNT(*) AS School_Count, City, COUNT(*) AS School_Number FROM schools WHERE GSserved = 'K-8' AND Magnet = 1 AND `NSLP Provision Status` = 'Multiple Provision Types' GROUP BY City ORDER BY School_Number DESC LIMIT 10\t----- bird -----\tcalifornia_schools",
    "466": "SELECT T1.`Percent (%) Eligible Free (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine' OR T2.AdmFName2 = 'Alusine' OR T2.AdmFName3 = 'Alusine'\t----- bird -----\tcalifornia_schools",
    "467": "SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino' AND School LIKE '%City Unified%' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54') AND AdmEmail1 IS NOT NULL OR AdmEmail2 IS NOT NULL OR AdmEmail3 IS NOT NULL;\t----- bird -----\tcalifornia_schools",
    "468": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'East Bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'\t----- bird -----\tfinancial",
    "469": "SELECT COUNT(*) FROM district WHERE A11 > 6000 AND A11 < 10000 AND (SELECT AVG(T1.A11) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F') BETWEEN 6000 AND 10000;\t----- bird -----\tfinancial",
    "470": "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000\t----- bird -----\tfinancial",
    "471": "SELECT (SELECT AVG(T1.A11) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T2.birth_date = (SELECT MIN(T3.birth_date) FROM client AS T3 WHERE T3.gender = 'F') ORDER BY AVG(T1.A11) ASC LIMIT 1) - (SELECT AVG(T1.A11) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T2.birth_date = (SELECT MIN(T3.birth_date) FROM client AS T3 WHERE T3.gender = 'F') ORDER BY AVG(T1.A11) DESC LIMIT 1) AS gap\t----- bird -----\tfinancial",
    "472": "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.birth_date = (SELECT MIN(T3.birth_date) FROM client AS T3 INNER JOIN disp AS T2 ON T3.client_id = T2.client_id INNER JOIN account AS T1 ON T2.account_id = T1.account_id) AND T1.A11 = (SELECT MAX(T1.A11) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id) GROUP BY T1.account_id ORDER BY AVG(T1.A11) DESC LIMIT 1\t----- bird -----\tfinancial",
    "473": "SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1997-01-01' AND T2.amount = ( SELECT MIN(amount) FROM loan WHERE date = '1997-01-01' ) AND T1.frequency = 'POPLATEK TYDNE'\t----- bird -----\tfinancial",
    "474": "SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 12 AND T2.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12) AND T1.date = '1993-01-01'\t----- bird -----\tfinancial",
    "475": "SELECT COUNT(*) FROM client WHERE gender = 'F' AND birth_date < '1950-01-01' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'Sokolov')\t----- bird -----\tfinancial",
    "476": "SELECT T2.A2 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'\t----- bird -----\tfinancial",
    "477": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia' AND T2.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'South Bohemia')\t----- bird -----\tfinancial",
    "478": "SELECT CAST((T1.balance - T2.balance) AS REAL) * 100 / T2.balance FROM trans AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1998-12-27' AND T2.date = '1993-03-22' AND T1.account_id = ( SELECT account_id FROM loan WHERE date = '1993-07-05' AND status = 'approved' ORDER BY date ASC LIMIT 1 )\t----- bird -----\tfinancial",
    "479": "SELECT CAST(SUM(CASE WHEN T1.status = 'A' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'A'\t----- bird -----\tfinancial",
    "480": "SELECT CAST(SUM(CASE WHEN T2.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount < 100000\t----- bird -----\tfinancial",
    "481": "SELECT T3.A2, ((T3.A13 - T3.A12) / T3.A12) * 100 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D' AND T2.client_id IN (SELECT client_id FROM client WHERE gender = 'M')\t----- bird -----\tfinancial",
    "482": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' GROUP BY T1.A2 ORDER BY COUNT(T2.client_id) DESC LIMIT 9\t----- bird -----\tfinancial",
    "483": "SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE'\t----- bird -----\tfinancial",
    "484": "SELECT COUNT(*) FROM account WHERE district_id = 1 AND frequency = 'C'\t----- bird -----\tfinancial",
    "485": "SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE A15 = (SELECT MAX(A15) FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1))\t----- bird -----\tfinancial",
    "486": "SELECT T2.A2 FROM trans AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' ORDER BY T1.amount DESC LIMIT 10\t----- bird -----\tfinancial",
    "487": "SELECT COUNT(*) FROM account WHERE account_id IN (SELECT account_id FROM disp WHERE district_id = 1 AND type = 'C')\t----- bird -----\tfinancial",
    "488": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'M' AND T1.A15 = (SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1, 1)\t----- bird -----\tfinancial",
    "489": "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.operation = 'VYBER KARTOU' AND T2.amount < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU') AND T2.date LIKE '1998%'\t----- bird -----\tfinancial",
    "490": "SELECT DISTINCT T1.type FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.type != 'OWNER' AND T2.A11 BETWEEN 8000 AND 9000\t----- bird -----\tfinancial",
    "491": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND strftime('%Y', T2.date) >= '1997'\t----- bird -----\tfinancial",
    "492": "SELECT * FROM trans WHERE operation = 'VYBER' AND account_id = 3356\t----- bird -----\tfinancial",
    "493": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000\t----- bird -----\tfinancial",
    "494": "SELECT CAST((SUM(CASE WHEN strftime('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN strftime('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'\t----- bird -----\tfinancial",
    "495": "SELECT T1.frequency , SUM(T3.amount) FROM account AS T1 INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T1.account_id = 3 AND T3.k_symbol = 'account_statement' AND T3.amount = 3539\t----- bird -----\tfinancial",
    "496": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'\t----- bird -----\tfinancial",
    "497": "SELECT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T2.gender = 'F' GROUP BY T1.account_id ORDER BY AVG(T2.A11) ASC LIMIT 1\t----- bird -----\tfinancial",
    "498": "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'C' AND T2.type = 'POPLATEK PO OBRATU' UNION SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'D' AND T2.type = 'POPLATEK PO OBRATU'\t----- bird -----\tfinancial",
    "499": "SELECT T1.client_id, T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold' AND T2.type = 'OWNER'\t----- bird -----\tfinancial"
}