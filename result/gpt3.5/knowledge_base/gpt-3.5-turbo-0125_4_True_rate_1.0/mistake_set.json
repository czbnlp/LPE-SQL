[
    {
        "question": "List out student names that enrolled in two schools and two organizations?",
        "hint": "enrolled in two schools refers to COUNT(school) = 2; two organizations refers to COUNT(organ) = 2;",
        "error_sql": "SELECT T1.name FROM (SELECT name, COUNT(school) FROM enrolled GROUP BY name HAVING COUNT(school) = 2) T1 INNER JOIN (SELECT name, COUNT(organ) FROM enlist GROUP BY name HAVING COUNT(organ) = 2) T2 ON T1.name = T2.name",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining two tables, ensure that the join condition is correct and that the columns being joined are the correct ones. In this case, the error was due to the fact that the join was done on the count of schools and organizations, rather than the actual names of the schools and organizations. Additionally, the subqueries were not necessary, and a simple inner join with a group by and having clause would have sufficed. To avoid this mistake in the future, take the time to carefully review the join conditions and ensure that they are correct, and consider whether subqueries are truly necessary or if a simpler approach can be used.",
        "ground_truth_sql": "SELECT T.name FROM ( SELECT T1.name, COUNT(T1.organ) AS num FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num = 2",
        "difficulty": ""
    },
    {
        "question": "How many distinct movies in English stars a male actor who acts the best?",
        "hint": "Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English",
        "error_sql": "SELECT COUNT(DISTINCT T1.movieid) FROM movies2actors AS T1 INNER JOIN actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T2.a_gender = 'M' AND T3.isEnglish = 'T' AND T2.a_quality = ( SELECT MAX(a_quality) FROM actors )",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables and selecting distinct values, ensure that the column you are selecting is from the correct table and is the one you intend to count. In this case, the error was in selecting `T1.movieid` and `T3.movieid` instead of `T1.actorid` which is the correct column to count distinct male actors who act the best in English movies. Also, note that the subquery `( SELECT MAX(a_quality) FROM actors )` should be replaced with the actual maximum value `5` to get the correct result.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.isEnglish = 'T' AND T1.a_gender = 'M' AND T1.a_quality = 5",
        "difficulty": ""
    },
    {
        "question": "What percentage of authors of the paper about Charged particle multiplicity are affiliated with INFN?",
        "hint": "about Charged particle multiplicity refers to Title which contains 'Charged particle multiplicity'; affiliated with INFN refers to Affiliation LIKE '%INFN%' ; percentage refers to DIVIDE(COUNT(Affiliation LIKE '%INFN%' ), COUNT(AuthorId)) * 100%",
        "error_sql": "SELECT CAST(SUM(CASE WHEN Affiliation LIKE '%INFN%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Affiliation) FROM Author WHERE Id IN ( SELECT AuthorId FROM PaperAuthor WHERE PaperId IN ( SELECT Id FROM Paper WHERE Title LIKE '%Charged particle multiplicity%' ))",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join is performed on the correct tables and that the columns used for joining are the correct ones. In this case, the error was due to joining the `Author` table directly, whereas the correct approach was to join the `PaperAuthor` table with the `Paper` table, and then use the `PaperAuthor` table to count the affiliations. Additionally, when counting the total number of authors, make sure to count the `Id` column from the correct table, which in this case is the `PaperAuthor` table.",
        "ground_truth_sql": "SELECT CAST((SUM(CASE WHEN T1.Affiliation LIKE '%INFN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T2.Id) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title LIKE '%Charged particle multiplicity%'",
        "difficulty": ""
    },
    {
        "question": "How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count.",
        "hint": "category refers to category_name; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Active Life'), SUM(review_count = 'LOW')), 1.0);",
        "error_sql": "SELECT CAST(SUM(IIF(T2.category_name = 'Active Life' AND T3.review_count = 'Low', 1, 0)) AS REAL) * 100 / COUNT(T3.review_count) \nFROM Business_Categories AS T1 \nINNER JOIN Categories AS T2 \nON T1.category_id = T2.category_id\nINNER JOIN Business AS T3 \nON T1.business_id = T3.business_id",
        "compiler_hint": "no such column: T1.category_name",
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that you are referencing the correct table and column names. In the initial error, the column 'category_name' was referenced from the wrong table 'T1' which is actually 'Business_Categories'. It should be referenced from 'T2' which is 'Categories'. Additionally, the subquery in the Ground Truth SQL is used to calculate the total count of 'Low' review counts, which is not present in the initial error or the SQL after reflection. To avoid making the same mistake in the future, carefully review the table and column names, and ensure that the logic of the query is correct.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id",
        "difficulty": ""
    },
    {
        "question": "Which two countries share the second highest mountain? Give the country code.",
        "hint": "",
        "error_sql": "SELECT T1.Code, T2.Code FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T2.Mountain = T3.Name ORDER BY T3.Height DESC LIMIT 1 OFFSET 1",
        "compiler_hint": "no such column: T2.Code",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the correct column is being referenced. In the Error SQL Query, the join condition was incorrect, and in the SQL after Reflection, the query was still incorrect because it was trying to return two country codes, but the question was asking for the country codes of the two countries that share the second highest mountain, which requires a different approach. The correct approach is to first find the name of the second highest mountain and then find the country codes of the countries that have this mountain.",
        "ground_truth_sql": "SELECT T1.Code FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1, 1 )",
        "difficulty": ""
    },
    {
        "question": "Among the classic movies, how many movies have a rental rate of less than 1?",
        "hint": "classic movie refers to name = 'Classics'; rental rate of less than 1 refers to rental_rate < 1; movie refers to film_id",
        "error_sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN category AS T2 ON T1.film_id = T2.category_id WHERE T2.name = 'Classics' AND T1.rental_rate < 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and that the tables are joined in the correct order. In this case, the error was due to joining the `film` table directly with the `category` table, instead of joining it with the `film_category` table first, which is the correct intermediate table. Additionally, the join order was incorrect, leading to incorrect results. To avoid this mistake, carefully examine the database schema and ensure that the join conditions are correct and that the tables are joined in the correct order.",
        "ground_truth_sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate < 1 AND T2.name = 'Classics'",
        "difficulty": ""
    },
    {
        "question": "Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations?",
        "hint": "Georgia refer to school_state = 'GA'\n",
        "error_sql": "SELECT payment_method FROM donations WHERE projectid IN ( SELECT projectid FROM projects WHERE school_state = 'GA' ) GROUP BY payment_method ORDER BY COUNT(payment_method) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and grouping by a column, ensure that the column used in the GROUP BY clause is the one that makes sense for the query. In this case, grouping by T1.payment_method would give the count of each payment method, but it would not guarantee that the count is specific to the schools in Georgia. Grouping by T2.school_state ensures that the count of payment methods is specific to the schools in Georgia, and then the ORDER BY and LIMIT clauses can be used to find the most common payment method.",
        "ground_truth_sql": "SELECT T1.payment_method FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_state = 'GA' GROUP BY T2.school_state ORDER BY COUNT(T1.payment_method) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What ingredients does the longest cooking time recipe have?",
        "hint": "the longest cooking time refers to MAX(cook_min)",
        "error_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T2.ingredient_id = T3.ingredient_id WHERE T1.cook_min = ( SELECT MAX(cook_min) FROM Recipe )",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the maximum or minimum value of a column and then using that value to filter the results, consider whether there might be multiple rows with the same maximum or minimum value. In this case, the Error SQL Query and SQL after Reflection would return all recipes with the longest cooking time, not just one. However, the Ground Truth SQL uses ORDER BY and LIMIT to ensure that only one recipe is returned, even if there are multiple recipes with the same longest cooking time. To avoid making the same mistake in the future, always consider the possibility of multiple rows with the same value and use techniques like ORDER BY and LIMIT to ensure that the correct number of rows is returned.",
        "ground_truth_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Which supplier can provide the most number of \"hot spring dodger dim light\"? Please give the supplier's phone number.",
        "hint": "the most number refers to max(ps_availqty); \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone",
        "error_sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey INNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light' GROUP BY T1.s_phone ORDER BY COUNT(T3.p_partkey) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and the columns being joined are from the correct tables. In this case, the join condition was incorrect in the Error SQL Query. The correct join condition should be based on the relationship between the tables, which is that a supplier provides a part. Therefore, the correct join condition is that the supplier's suppkey is equal to the partsupp's suppkey, and the partsupp's partkey is equal to the part's partkey. Additionally, when filtering for a specific part, ensure that the filter condition is applied to the correct table, which is the part table in this case.",
        "ground_truth_sql": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Which address type does \"Fun Toys and Bikes\" fall under?",
        "hint": "Fun Toys and Bikes is name of a store",
        "error_sql": "SELECT Name FROM StateProvince",
        "compiler_hint": "no such column: T2.Name",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names in the SELECT statement match the table aliases used in the JOIN clause. In this case, the error occurred because the column 'Name' was referenced with the wrong table alias 'T2', which was actually 'AddressType', not 'Store'. To avoid this mistake, double-check the table aliases and column names in the SELECT statement to ensure they match the correct tables.",
        "ground_truth_sql": "SELECT T2.Name FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Fun Toys and Bikes'",
        "difficulty": ""
    },
    {
        "question": "What is the average score for the movie Versailles Rive-Gauche?",
        "hint": "Versailles Rive-Gauche' is movie_title; average score refers to Avg(rating_score);",
        "error_sql": "SELECT AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Versailles Rive-Gauche'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and selecting an aggregate value, ensure that the table alias used in the aggregate function matches the table alias used in the JOIN clause. In this case, the correct table alias for the ratings table is T1, not T2. Additionally, using LIKE instead of = for string comparison can help to avoid issues with exact matching, especially when dealing with titles that may have varying punctuation or capitalization.",
        "ground_truth_sql": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Versailles Rive-Gauche'",
        "difficulty": ""
    },
    {
        "question": "Calculate the average number of disabled female students enrolled in UCI.",
        "hint": "average = DIVIDE(SUM(disabled.name who are not in male.name WHERE school = 'uci'), COUNT(enrolled.name)); female students refers to disabled.name who are NOT in male.name; UCI refers to school = 'uci';",
        "error_sql": "SELECT AVG(T1.num) FROM ( SELECT COUNT(T2.name) AS num FROM disabled AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name INNER JOIN male AS T3 ON T1.name = T3.name WHERE T2.school = 'uci' AND T3.name IS NULL GROUP BY T1.name ) T1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating averages or performing aggregations, ensure that the subquery or join conditions accurately reflect the problem requirements. In this case, the error was due to incorrectly joining the 'male' table, which should have been a LEFT JOIN to identify females (those not in the 'male' table). Additionally, the use of IIF and CAST is necessary to accurately calculate the average, as the COUNT function returns an integer, and dividing by it would result in integer division. Always carefully review the query logic and consider the data types involved in the calculation.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T1.school = 'uci' AND T4.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN person AS T3 ON T1.name = T3.name LEFT JOIN male AS T4 ON T3.name = T4.name",
        "difficulty": ""
    },
    {
        "question": "List down the author ID of authors with a name of \"Peter\".",
        "hint": "\"Peter\" is the name of author",
        "error_sql": "SELECT Id FROM Author WHERE Name = \"Peter\"",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying a database, it's essential to consider the relationships between tables and the specific columns you're interested in. In this case, the error was assuming that the `Author` table directly contains the author's name, when in fact, the `PaperAuthor` table contains the author's name and ID. To avoid this mistake, always review the database schema and consider the relationships between tables before writing a query. Additionally, be cautious when using quotes, as SQL uses single quotes for string literals, not double quotes.",
        "ground_truth_sql": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'",
        "difficulty": ""
    },
    {
        "question": "Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively.",
        "hint": "viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));",
        "error_sql": "SELECT T.gender, COUNT(T.gender) FROM ( SELECT T1.gender FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)' ) T GROUP BY T.gender ORDER BY COUNT(T.gender) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen aggregating data based on specific conditions, consider using conditional aggregation (e.g., `SUM(CASE WHEN ... THEN 1 ELSE 0 END)`) instead of grouping and counting, especially when you need to count occurrences of specific values within a group. This approach allows for more flexibility and can help avoid incorrect results due to grouping or counting issues.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "difficulty": ""
    },
    {
        "question": "List out full name and email of employees who are working in Paris?",
        "hint": "full name = firstName+LastName; Paris is a city;",
        "error_sql": "SELECT T1.firstName || ' ' || T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that the SELECT clause accurately reflects the desired output. In this case, the full name was requested, but the correct approach is to return the first name and last name as separate columns, rather than concatenating them. This allows for greater flexibility in handling the output data.",
        "ground_truth_sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'",
        "difficulty": ""
    },
    {
        "question": "Which flight carrier operator flies from Atlantic City to Fort Lauderdale?",
        "hint": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; from Atlantic City refers to ORIGIN = 'ACY'; to Fort Lauderdale refers to DEST = 'FLL';",
        "error_sql": "SELECT OP_CARRIER_AIRLINE_ID FROM Airlines WHERE ORIGIN = 'ACY' AND DEST = 'FLL'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and filtering data, consider the potential for multiple results and whether aggregation or grouping is necessary to accurately represent the data. In this case, the initial query and the revised query after reflection both returned multiple potential carriers, but the ground truth query correctly accounted for this by grouping the results by carrier description. To avoid similar mistakes in the future, always consider the potential for multiple results and whether aggregation or grouping is necessary to accurately represent the data.",
        "ground_truth_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description",
        "difficulty": ""
    },
    {
        "question": "What is the first name of the driver who transported shipment id 1028?",
        "hint": "shipment id 1028 refers to ship_id = 1028",
        "error_sql": "SELECT T1.first_name FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id WHERE T2.ship_id = 1028",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the alias used in the SELECT statement matches the alias used in the JOIN clause. In the Error SQL Query, the alias 'T1' was used for the 'driver' table in the SELECT statement, but 'T1' was actually used for the 'shipment' table in the JOIN clause. Similarly, in the SQL after Reflection, the alias 'T2' was used for the 'driver' table in the SELECT statement, but 'T2' was actually used for the 'driver' table in the JOIN clause, however, the query was still incorrect because it only returned the 'first_name' instead of both 'first_name' and 'last_name'. To avoid this mistake, double-check the aliases used in the SELECT statement and the JOIN clause to ensure they match.",
        "ground_truth_sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = 1028",
        "difficulty": ""
    },
    {
        "question": "How many trips which subscription types were Subscriber and ended in San Jose city?",
        "hint": "ended in refers to end_station_name;",
        "error_sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join condition is based on the correct columns. In this case, the error occurred because the join was done on `end_station_id` instead of `end_station_name`. To avoid this mistake, carefully examine the schema of the tables involved and verify that the join condition is correct. Additionally, consider using the `ON` clause with the correct column names, and also consider using the `USING` clause if the column names are the same in both tables.",
        "ground_truth_sql": "SELECT COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'",
        "difficulty": ""
    },
    {
        "question": "For each donation not from a teacher, state the donor account id and calculate the percentage of donation given for optional support.",
        "hint": "not from a teacher refers to is_teacher_acct = 'f'; donor account id refers to donor_acctid; percentage of donation = divide(donation_optional_support, donation_total)*100%",
        "error_sql": "SELECT donor_acctid, CAST(donation_optional_support AS REAL) * 100 / donation_total FROM donations WHERE is_teacher_acct = 'f'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen calculating percentages, ensure that the division is performed correctly and that the result is not multiplied by 100 unnecessarily. In SQLite, the division of two integers results in an integer, so it's essential to cast at least one of the operands to a REAL type to get a decimal result. However, in this case, the percentage calculation is not required as the problem only asks for the percentage of donation given for optional support, which can be represented as a decimal value. Therefore, simply dividing donation_optional_support by donation_total is sufficient.",
        "ground_truth_sql": "SELECT donor_acctid, donation_optional_support / donation_total FROM donations WHERE is_teacher_acct = 'f'",
        "difficulty": ""
    },
    {
        "question": "What is the average rating of inactive businesses?",
        "hint": "rating refers to stars; inactive refers to active = 'False'; average rating of inactive businesses = DIVIDE(SUM(stars), COUNT(business_id));",
        "error_sql": "SELECT CAST(SUM(stars) AS REAL) / COUNT(business_id) FROM Business WHERE active = 'False'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen comparing string values in SQL, it's generally safer to use the LIKE operator instead of the equals operator (=) to account for potential case differences or leading/trailing whitespace. In this case, the 'active' column might contain 'FALSE' (uppercase) instead of 'False' (mixed case), so using LIKE 'FALSE' ensures the query works correctly regardless of the case.",
        "ground_truth_sql": "SELECT CAST(SUM(stars) AS REAL) / COUNT(business_id) AS \"average\" FROM Business WHERE active LIKE 'FALSE'",
        "difficulty": ""
    },
    {
        "question": "Has the product Chainring Bolts been on any of the sales?",
        "hint": "a product that's been on sale refers to SellStartDate NOT null and vice versa;",
        "error_sql": "SELECT Name FROM Product WHERE SellStartDate IS NOT NULL AND Name = 'Chainring Bolts'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen checking if a product has been on sale, consider the relationship between the product and the sales data. In this case, the error SQL query only checks if the product's SellStartDate is not null, which is not sufficient to determine if the product has been on sale. The correct approach is to check if the product is associated with any special offers, which is done by joining the Product table with the SpecialOfferProduct table and then with the SpecialOffer table. This ensures that we are checking if the product has been part of any sales promotions, rather than just relying on the SellStartDate field.",
        "ground_truth_sql": "SELECT CASE WHEN COUNT(T1.Description) >= 1 THEN 'Yes' ELSE 'No' END FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Chainring Bolts'",
        "difficulty": ""
    },
    {
        "question": "Compare the total number of orders between customer \"Apollo Ltd\" and \"Pacific Ltd\".",
        "hint": "\"Apollo Ltd\" and \"Pacific Ltd\" are both Customer Names; total number of orders refers to COUNT(OrderNumber)",
        "error_sql": "SELECT COUNT(CASE WHEN T2.`Customer Names` = 'Apollo Ltd' THEN T1.OrderNumber END) - COUNT(CASE WHEN T2.`Customer Names` = 'Pacific Ltd' THEN T1.OrderNumber END) \nFROM `Sales Orders` AS T1 \nINNER JOIN Customers AS T2 \nON T1._CustomerID = T2.CustomerID",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using conditional aggregation with `CASE` statements, it's essential to use `SUM` instead of `COUNT` when comparing values. `COUNT` counts the number of non-NULL values, whereas `SUM` adds up the values. In this case, using `COUNT` would count the number of rows where the condition is true, but it would not provide the correct total count. Additionally, when using `CASE` statements with `SUM`, it's crucial to include an `ELSE` clause to handle cases where the condition is false, to avoid counting those rows.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.`Customer Names` = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.`Customer Names` = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID",
        "difficulty": ""
    },
    {
        "question": "Name the neighborhood of the community area in crime with report number 23843?",
        "hint": "neighborhood refers to neighborhood_name; '23778' is the report_no",
        "error_sql": "SELECT T4.neighborhood_name FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T4 ON T2.community_area_no = T4.community_area_no WHERE T1.report_no = 23843",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join order makes logical sense and that the correct table is being joined first. In this case, the Crime table should be joined first with the Community_Area table, and then the result should be joined with the Neighborhood table. Additionally, double-check the values used in the WHERE clause to ensure they match the problem description. In this case, the report number in the WHERE clause was incorrect, it should be '23778' instead of '23843'.",
        "ground_truth_sql": "SELECT T3.neighborhood_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T2.report_no = 23778",
        "difficulty": ""
    },
    {
        "question": "Identify the user who has been yelping since 2004. Is he or she an Yelp Elite member?",
        "hint": "has been yelping since 2004 refers to user_yelping_since_year = 2004",
        "error_sql": "SELECT user_id FROM Users WHERE user_yelping_since_year = 2004",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, always consider the possibility of duplicate rows in the result set. In this case, the `Elite` table has multiple rows for the same `user_id` (one for each year they were an Elite member), so joining it with the `Users` table without using `DISTINCT` would result in duplicate `user_id` values. To avoid this, use `SELECT DISTINCT` to ensure that each `user_id` is only returned once.",
        "ground_truth_sql": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004",
        "difficulty": ""
    },
    {
        "question": "How many inspection points with serious point level that have no fine?",
        "hint": "serious point level refers to point_level = 'Serious '; have no fine refers to fine = 0",
        "error_sql": "SELECT COUNT(point_id) FROM inspection_point WHERE point_level = 'Serious' AND fine = 0",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the correct columns are being referenced. In this case, the error SQL query was incorrect because it did not join the inspection_point table with the violation table, which is necessary to filter inspection points with no fine. The SQL after reflection was also incorrect because it did not account for the space in the 'Serious ' string. To avoid making the same mistake in the future, always carefully review the schema of the database and ensure that the join conditions and column references are correct. Additionally, pay close attention to details such as spaces in string values.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0",
        "difficulty": ""
    },
    {
        "question": "List the names of authors affiliated with the University of Oxford in alphabetical order.",
        "hint": "affiliated with the University of Oxford refers to Affiliation = 'University of Oxford'",
        "error_sql": "SELECT Name FROM PaperAuthor WHERE Affiliation = 'University of Oxford' ORDER BY Name",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying a database, it's essential to carefully consider the table structure and relationships. In this case, the error occurred because the query was executed on the `PaperAuthor` table, which contains duplicate author information (since an author can be affiliated with multiple papers). The correct table to query is the `Author` table, which stores unique author information. To avoid similar mistakes in the future, always verify that the query is being executed on the correct table and consider the potential for duplicate data in joined tables.",
        "ground_truth_sql": "SELECT Name FROM Author WHERE Affiliation = 'University of Oxford' ORDER BY Name ASC",
        "difficulty": ""
    },
    {
        "question": "Among students registered for the most difficult course, list the students' full names who got grade A.",
        "hint": "difficulty refers to diff; most difficult course refers to MAX(diff); student's full names = f_name, l_name;",
        "error_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = ( SELECT MAX(diff) FROM course ) AND T2.grade = 'A'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen dealing with queries that involve finding the maximum or minimum value of a column and then using that value to filter results, consider whether the query should return multiple rows or just one row. In this case, the original query was trying to find students who got grade A in the most difficult course, but it was using a subquery to find the maximum difficulty and then filtering the results based on that value. However, this approach would return all students who got grade A in any course with the maximum difficulty, not just the students in the single most difficult course. To avoid this mistake, use the ORDER BY and LIMIT clauses to ensure that only one row (or a limited number of rows) is returned, as shown in the Ground Truth SQL.",
        "ground_truth_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' ORDER BY T3.diff DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "In the state with the highest number of schools, how many institutions have a percentage of no less than 90 of undergraduates who attend full-time? List all of the institutions' names.",
        "hint": "highest number of schools refers to MAX(schools_count); percentage of no less than 90 of undergraduates who attend full-time refers to ft_pct > 90; institutions' names refers to chronname;",
        "error_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T1.state = T2.state WHERE T2.schools_count = ( SELECT MAX(schools_count) FROM state_sector_details ) AND T1.ft_pct > 90",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, it's essential to carefully analyze the question and identify the correct order of operations. In this case, the question asks for institutions in the state with the highest number of schools, where the percentage of full-time undergraduates is at least 90%. The correct approach is to first find the state with the highest number of schools (using ORDER BY and LIMIT 1) and then filter the institutions in that state based on the full-time undergraduate percentage. The incorrect queries attempted to find the maximum number of schools using a subquery and then joined the tables, which is not the correct order of operations. To avoid making the same mistake in the future, always carefully read the question and identify the correct order of operations, and consider using ORDER BY and LIMIT when finding the maximum or minimum value of a column.",
        "ground_truth_sql": "SELECT COUNT(t1.unitid), t1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state WHERE t1.ft_pct > 90 ORDER BY t2.schools_count DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Provide the zip code, city, and congress representative's full names of the area which has highest population in 2020.",
        "hint": "representative's full names refer to first_name, last_name; area which has highest population in 2020 refers to MAX(population_2020);",
        "error_sql": "SELECT T1.zip_code, T1.city, T2.first_name, T2.last_name \nFROM zip_data AS T1 \nINNER JOIN zip_congress AS T3 \nON T1.zip_code = T3.zip_code \nINNER JOIN congress AS T2 \nON T3.district = T2.cognress_rep_id \nWHERE T1.population_2020 = ( SELECT MAX(population_2020) FROM zip_data )",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen writing SQL queries, be careful with the use of aggregate functions and the WHERE clause. In this case, the WHERE clause was used to filter the results based on the maximum population in 2020, but this approach is incorrect because it will return all rows that have the maximum population, not necessarily the single area with the highest population. To get the single area with the highest population, use the ORDER BY clause with the LIMIT clause, as in the Ground Truth SQL query. This will ensure that only one row is returned, which is the area with the highest population in 2020.",
        "ground_truth_sql": "SELECT T1.zip_code, T1.city, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id GROUP BY T2.district ORDER BY T1.population_2020 DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the average value of the sales order?",
        "hint": "calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "error_sql": "SELECT CAST(SUM(T1.UnitPrice * T1.Quantity * (1 - T1.Discount)) AS REAL) / COUNT(T1.OrderID) FROM OrderDetails AS T1",
        "compiler_hint": "no such column: T1.UnitPrice",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the column names used in the query match the actual column names in the database tables. In this case, the error occurred because the column name 'UnitPrice' was not present in the 'OrderDetails' table. Also, the 'Discount' column was not present in the 'OrderDetails' table. The correct query should use the actual column names present in the 'OrderDetails' table. Additionally, the 'OrderDetails' table name should be enclosed in backticks or square brackets to avoid any syntax errors due to the space in the table name.",
        "ground_truth_sql": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(OrderID) FROM `Order Details`",
        "difficulty": ""
    },
    {
        "question": "To which user group do most of the users who uses a vivo device belong?",
        "hint": "user group where most of the users belong refers to MAX(COUNT(group)); vivo device refers to phone_brand = 'vivo';",
        "error_sql": "SELECT T1.`group` FROM ( SELECT T1.`group`, COUNT(T1.`group`) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' GROUP BY T1.`group` ) T ORDER BY T.num DESC LIMIT 1",
        "compiler_hint": "near \"group\": syntax error",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names are correctly referenced from the correct table. In the Error SQL Query, the column 'group' was referenced from 'T1' which is 'phone_brand_device_model2' table, but 'group' column actually exists in 'gender_age' table. In the SQL after Reflection, the subquery was removed, but the correct way to reference the column 'group' is by using a subquery as shown in the Ground Truth SQL. To avoid making the same mistake in the future, always double-check the table and column names when joining tables.",
        "ground_truth_sql": "SELECT T.`group` FROM ( SELECT T2.`group`, COUNT(`group`) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.`group` ) AS T ORDER BY T.num DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many games were published by Activision?",
        "hint": "Activision refers to publisher_name = 'Activision';",
        "error_sql": "SELECT COUNT(T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Activision'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen counting the number of games published by a specific publisher, it's essential to join the game table to ensure that each game is only counted once. The initial error SQL query only joined the game_publisher and publisher tables, which could lead to counting the same game multiple times if it has multiple publishers. The SQL after reflection corrected this by joining the game table and using COUNT(DISTINCT T3.id) to ensure each game is only counted once. However, the initial error SQL query and the SQL after reflection both missed the fact that the game_publisher table is a many-to-many relationship table and does not directly relate to the game table. The correct approach is to join the game_publisher table with the game table through the game_id, and then join the publisher table through the publisher_id. The Ground Truth SQL query correctly implements this approach.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T3.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T2.publisher_name = 'Activision'",
        "difficulty": ""
    },
    {
        "question": "What is the Asian population in the city with the alias Leeds?",
        "hint": "",
        "error_sql": "SELECT T1.asian_population FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T2.alias = 'Leeds'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join order and alias assignments are correct. In this case, the initial error was due to the incorrect assignment of aliases (T1 and T2) in the SELECT and WHERE clauses. The corrected query assigns the alias 'T1' to the 'alias' table and 'T2' to the 'zip_data' table, allowing for the correct retrieval of the Asian population. Additionally, using SUM() is necessary to account for the possibility of multiple zip codes with the alias 'Leeds'.",
        "ground_truth_sql": "SELECT SUM(T2.asian_population) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Leeds'",
        "difficulty": ""
    },
    {
        "question": "Among the seafoods, how many of them have an order quantity of more than 50?",
        "hint": "\"Seafood\" is the CategoryName; order quantity of more than 50 refers to Quantity > 50",
        "error_sql": "SELECT COUNT(T1.OrderDetailID) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T1.Quantity > 50",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join conditions are correct and the column references are accurate. In this case, the error was in the COUNT() function, where it should count the ProductID from the Products table, not the OrderDetailID from the OrderDetails table. Additionally, verify that the table and column names match the actual schema, including any backticks or quotes required for table names with spaces, such as `Order Details`.",
        "ground_truth_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50",
        "difficulty": ""
    },
    {
        "question": "How many horror movies were made by the worst directors?",
        "hint": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst",
        "error_sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T2.d_quality = 0 AND T1.genre = 'Horror'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions are correct and that all necessary tables are included. In this case, the `movies` table was missing in the initial query, and the join order was incorrect in the second query. To avoid this mistake, carefully review the schema and the relationships between tables, and make sure to include all necessary tables in the query. Additionally, use table aliases consistently and ensure that the join conditions are correct to avoid errors.",
        "ground_truth_sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T1.directorid = T3.directorid WHERE T1.genre = 'horror' AND T3.d_quality = 0",
        "difficulty": ""
    },
    {
        "question": "Does the length of the tip influence the number of likes for hotel and travel business category?",
        "hint": "the longer the tip_length, the lesser the likes OR the longer the tip length the higher the likes; hotel and travel business category refers to category_name = 'Hotels & Travel';",
        "error_sql": "SELECT T1.tip_length, T1.likes FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T4.category_name = 'Hotels & Travel'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order and the columns used for joining are correct. In this case, the error SQL query was missing the join with the Categories table and the correct join order. Additionally, the query was not grouping the results by tip_length and was not summing the likes. To avoid making the same mistake in the future, carefully review the schema of the database, ensure that the join order is correct, and verify that the query is grouping and aggregating the results as intended.",
        "ground_truth_sql": "SELECT T3.tip_length, SUM(T3.likes) AS likes FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Hotels & Travel' GROUP BY T3.tip_length",
        "difficulty": ""
    },
    {
        "question": "What is the total ordered quantity for products under the 'Touring' line?",
        "hint": "The Touring line refers to the product line, therefore ProductLine = 'T'",
        "error_sql": "SELECT SUM(OrderQty) FROM SalesOrderDetail AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'T'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being joined based on the query's requirements. In this case, the error was due to joining `SalesOrderDetail` instead of `PurchaseOrderDetail` with the `Product` table. To avoid this mistake, carefully evaluate the query's requirements and verify that the correct tables are being joined. Additionally, ensure that the correct columns are being referenced in the join condition and the WHERE clause.",
        "ground_truth_sql": "SELECT SUM(T2.OrderQty) FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'T'",
        "difficulty": ""
    },
    {
        "question": "List all the customer company names and cities located in Canada.",
        "hint": "located in Canada refers to Country = 'Canada'",
        "error_sql": "SELECT CustomerName, City FROM Customers WHERE Country = 'Canada'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen generating SQL queries, ensure that the column names in the SELECT clause match the actual column names in the table. In this case, the correct column name is 'CustomerName', not 'CompanyName'. Always double-check the table schema to avoid such mistakes.",
        "ground_truth_sql": "SELECT CompanyName, City FROM Customers WHERE Country = 'Canada'",
        "difficulty": ""
    },
    {
        "question": "Please provide the full name of the conference where one of the papers of Jean-luc Hainaut were published.",
        "hint": "papers of Jean-luc Hainaut refers to Name = 'Jean-luc Hainaut'",
        "error_sql": "SELECT T3.FullName FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id INNER JOIN Conference AS T3 ON T2.ConferenceId = T3.Id WHERE T1.Name = 'Jean-luc Hainaut'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and the tables are joined in the correct order. In this case, the initial error was due to joining PaperAuthor with Paper on PaperId, but then joining Paper with Conference on ConferenceId, which is correct. However, the join order was incorrect. The correct order is to join Paper with PaperAuthor on PaperId, and then join Paper with Conference on ConferenceId. Additionally, using DISTINCT is necessary to avoid duplicate results, and LIMIT 1 is necessary to return only one result as per the question's requirement.",
        "ground_truth_sql": "SELECT DISTINCT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T2.Name = 'Jean-luc Hainaut' LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Which nations have a 100% Spanish-speaking population?",
        "hint": "",
        "error_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Spanish' AND T2.Percentage = 100",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the columns being joined are of the same data type. In this case, the join condition was incorrect as it was joining the 'Code' column from the 'country' table with the 'Country' column from the 'language' table. However, the 'Country' column in the 'language' table actually refers to the 'Code' column in the 'country' table. But in this case, the join was not necessary because the 'language' table already contains the 'Country' column which can be used directly to get the desired result.",
        "ground_truth_sql": "SELECT Country FROM language WHERE Name = 'Spanish' AND Percentage = 100",
        "difficulty": ""
    },
    {
        "question": "How old was Mr. Stacy Morar at the time of his first emergency room admission due to a drug overdose?",
        "hint": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); his first emergency room admission refers to MIN(encounters.DATE); drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose' ;",
        "error_sql": "SELECT (strftime('%J', T1.DATE) - strftime('%J', T2.birthdate)) / 365.25 AS age \nFROM encounters AS T1 \nINNER JOIN patients AS T2 \nON T1.PATIENT = T2.patient \nWHERE T2.first = 'Stacy' AND T2.last = 'Morar' AND T1.REASONDESCRIPTION = 'Drug overdose' \nORDER BY T1.DATE \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the age of a person, it's essential to consider the correct date format and the context of the calculation. In this case, the error SQL query and the SQL after reflection both attempted to calculate the age by subtracting the birthdate from the encounter date. However, the correct approach is to simply subtract the birthdate from the encounter date without converting the dates to Julian dates or dividing by 365.25. This is because the question asks for the age at the time of the first emergency room admission, which can be calculated by simply subtracting the birthdate from the encounter date. Additionally, the SQL after reflection incorrectly used the strftime function to convert the dates, which is not necessary in this case. To avoid making the same mistake in the future, it's crucial to carefully consider the context of the calculation and the correct date format to use.",
        "ground_truth_sql": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Stacy' AND T1.last = 'Morar' AND T2.DESCRIPTION = 'Emergency Room Admission' AND T2.REASONDESCRIPTION = 'Drug overdose' ORDER BY T2.DATE LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Please list the bowling skills of all the players from Australia.",
        "hint": "Australia refers to Country_Name = 'Australia'",
        "error_sql": "SELECT T1.Bowling_skill FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill WHERE T2.Country_Name = 'Australia'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order and conditions are correct. In this case, the error was due to incorrect join order and missing join with the Country table. To avoid this mistake, carefully analyze the relationships between the tables and ensure that the join conditions are correct. Additionally, when filtering data based on a specific condition, consider using the correct table and column names to avoid ambiguity. In this case, the correct join order is Player -> Country -> Bowling_Style, and the filter condition should be applied to the Country table.",
        "ground_truth_sql": "SELECT T2.Bowling_Skill FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id INNER JOIN Country AS T3 ON T1.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Australia' GROUP BY T2.Bowling_Skill",
        "difficulty": ""
    },
    {
        "question": "What kind of expression correlation occurs in physical type interacting gene pairs and what percentage of these are negatively correlated?",
        "hint": "If the Expression_Corr value is negative then it's negatively correlated. Percentage of Negative Correlation = count(negative Expression_Corr physical type) / count(Expression_Corr physical type) * 100%",
        "error_sql": "SELECT Type, CAST(SUM(CASE WHEN Expression_Corr < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Expression_Corr) FROM Interactions WHERE Type = 'physical'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, it's essential to carefully read and understand the question. In this case, the question asked for two different results: the type of expression correlation and the percentage of negatively correlated interactions. However, the initial attempts tried to combine these two results into a single query, which led to incorrect results. To avoid this mistake, break down the problem into smaller parts and create separate queries for each part. In this case, the correct solution uses a UNION ALL operator to combine two separate queries: one for retrieving the expression correlation values and another for calculating the percentage of negatively correlated interactions.",
        "ground_truth_sql": "SELECT Expression_Corr FROM Interactions WHERE Type = 'Physical' UNION ALL SELECT CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*) FROM Interactions WHERE Type = 'Physical'",
        "difficulty": ""
    },
    {
        "question": "Among the orders placed by Ei, how many orders have quantity greater than 4?",
        "hint": "Ei is the name of the customer; orders have quantity greater than 4 refer to OrderNumber WHERE Order Quantity > 4;",
        "error_sql": "SELECT COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T1._CustomerID = T2.CustomerID WHERE T2.`Customer Names` = 'Ei' AND T1.`Order Quantity` > 4",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the ON clause match the table aliases used in the query. In the Error SQL Query, the join condition was `T1._CustomerID = T2.CustomerID`, but it should be `T2.CustomerID = T1._CustomerID` to match the table aliases. Additionally, when using aggregate functions like COUNT, consider using SUM with a CASE statement to handle conditional counting, as seen in the Ground Truth SQL.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.`Order Quantity` > 4 AND T2.`Customer Names` = 'Ei ' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID",
        "difficulty": ""
    },
    {
        "question": "Which employee is in charge of the sales in Hollis? Please give the employee's full name.",
        "hint": "Hollis refers to TerritoryDescription = 'Hollis'; full name = FirstName, LastName;",
        "error_sql": "SELECT T1.FirstName, T1.LastName \nFROM Employees AS T1 \nINNER JOIN Orders AS T2 \nON T1.EmployeeID = T2.EmployeeID \nINNER JOIN Customers AS T3 \nON T2.CustomerID = T3.CustomerID \nWHERE T3.City = 'Hollis'",
        "compiler_hint": "no such table: Territories",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that all referenced tables actually exist in the provided schema. In this case, the initial error occurred because the 'Territories' table was not present in the schema. However, upon re-examining the schema, it's clear that the 'Territories' table is missing, but 'EmployeeTerritories' is present, which is a many-to-many relationship table between 'Employees' and 'Territories'. To avoid this mistake, always verify the existence of tables and their relationships in the schema before generating SQL queries.",
        "ground_truth_sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'",
        "difficulty": ""
    },
    {
        "question": "For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price.",
        "hint": "in May 2013 refers to month(date) = 5 AND year(date) = 2013; time to achieve the highest price refers to time_high; time to achieve the lowest price refers to time_low; WRAP refers to name = 'WARP'",
        "error_sql": "SELECT T2.time_high, T2.time_low FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WRAP' AND STRFTIME('%Y', T2.date) = '2016' AND STRFTIME('%m', T2.date) = '08'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the column names and values are accurate and match the provided schema and problem description. In this case, the error was due to a typo in the coin name ('WRAP' instead of 'WARP') and the format of the date filter. To avoid such mistakes, double-check the schema and problem description, and verify the accuracy of column names and values. Additionally, consider using exact matching instead of substring matching for string values to prevent errors.",
        "ground_truth_sql": "SELECT T2.time_high, T2.time_low, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND STRFTIME('%Y-%m', T2.date) = '2016-08'",
        "difficulty": ""
    },
    {
        "question": "Please list the starting stations of the bike trips made on a day with a max humidity over 80 in 2013 in the area where the zip code is 94107.",
        "hint": "starting stations refers to start_station_name; day with a max humidity over 80 refers to max_humidity>80; in 2013 refers to date LIKE'%2013';",
        "error_sql": "SELECT T1.start_station_name FROM trip AS T1 INNER JOIN weather AS T2 ON T1.zip_code = T2.zip_code WHERE T2.max_humidity > 80 AND T2.date LIKE '%2013'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and consistent with the data types of the columns being joined. In this case, the initial error was due to the incorrect assumption that the zip_code column in the weather table is of type TEXT, when in fact it is of type INTEGER in the trip table. Additionally, when filtering dates, use a more robust method such as SUBSTR(CAST(date AS TEXT), -4) to extract the year, rather than relying on the LIKE operator with a wildcard. Finally, double-check the conditions in the WHERE clause to ensure they match the problem requirements, in this case, the max_humidity condition was incorrect and should be max_temperature_f instead.",
        "ground_truth_sql": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 80",
        "difficulty": ""
    },
    {
        "question": "Give the full name of legislators who have accounts on OpenSecrets.org.",
        "hint": "full name refers to first_name, last_name; have accounts on OpenSecrets.org refers to opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "error_sql": "SELECT first_name, last_name FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen generating SQL queries, carefully consider the column names and table structure to avoid selecting incorrect columns or using non-existent columns. In this case, the error SQL query and SQL after reflection were incorrect because they selected the wrong columns. The correct query should select the full name of legislators, which is likely a combination of first_name and last_name, or possibly the official_full_name column. Additionally, the SQL after reflection incorrectly selected the count of rows instead of the actual names. To avoid this mistake, double-check the column names and table structure before generating the SQL query.",
        "ground_truth_sql": "SELECT COUNT(*) FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "difficulty": ""
    },
    {
        "question": "How much more expensive in percentage is the product with the highest selling price from the product with the lowest selling price in the Clothing category?",
        "hint": "selling price refers to ListPrice; highest selling price refers to MAX(ListPrice); lowest selling price refers to MIN(ListPrice);",
        "error_sql": "SELECT CAST(((MAX(ListPrice) - MIN(ListPrice)) * 100.0) / MIN(ListPrice) AS REAL) FROM Product WHERE ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM ProductSubcategory WHERE Name = 'Clothing')",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions are correct and that all necessary tables are included in the join. In this case, the error SQL query only joined the Product table with the ProductSubcategory table, but missed the ProductCategory table which is necessary to filter the products by category name. Additionally, when performing calculations with aggregate functions like MAX and MIN, ensure that the calculation is correct and that the data types are compatible. In this case, the calculation was correct, but the CAST function was unnecessary and could be removed.",
        "ground_truth_sql": "SELECT (MAX(T1.ListPrice) - MIN(T1.ListPrice)) * 100 / MIN(T1.ListPrice) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'",
        "difficulty": ""
    },
    {
        "question": "How many turnovers per game did the assist champion had in the 2003 NBA season?",
        "hint": "turnovers per game = avg(turnovers); 2003 refers to year = 2003; NBA refers to lgID = 'NBA'",
        "error_sql": "SELECT AVG(T1.turnovers / T1.GP) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.year = 2003 AND T2.lgID = 'NBA'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, it's essential to carefully analyze the question and identify the correct tables and columns to use. In this case, the error SQL query and the SQL after reflection both failed to correctly identify the assist champion and calculate the average turnovers per game. The key mistake was not using the `GROUP BY` and `ORDER BY` clauses to find the player with the maximum assists in the 2003 season and then calculate the average turnovers for that player. Additionally, the `LIMIT 1` clause is necessary to ensure that only the top assist champion is considered. To avoid similar mistakes in the future, it's crucial to carefully read the problem statement, identify the relevant tables and columns, and use the correct SQL clauses to achieve the desired result.",
        "ground_truth_sql": "SELECT AVG(T2.turnovers) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2003 GROUP BY T1.playerID, T2.assists ORDER BY T2.assists DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the independent countries, how many of them has a GDP per capita of over 5000?",
        "hint": "",
        "error_sql": "SELECT COUNT(T1.Code) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T1.Code = T3.Country WHERE T2.Independence IS NOT NULL AND T3.GDP / T1.Population > 5000",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and consistent. In the Error SQL Query, the join condition for the economy table was incorrect, using T1.Code = T3.Country instead of T3.Country = T1.Code. Additionally, when counting the number of countries, use COUNT(DISTINCT T1.Name) to avoid counting duplicate countries. Also, be careful when using aggregate functions like SUM, AVG, MAX, MIN, etc., as they can return incorrect results if not used correctly. In this case, the GDP per capita was calculated incorrectly, and the condition should be T3.GDP > 5000, not T3.GDP / T1.Population > 5000.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Independence IS NOT NULL AND T3.GDP > 5000",
        "difficulty": ""
    },
    {
        "question": "Which order have the highest unit cost?",
        "hint": "order have the highest unit cost refers to OrderNumber where MAX(Unit Cost);",
        "error_sql": "SELECT OrderNumber FROM `Sales Orders` ORDER BY CAST(REPLACE(`Unit Cost`, ',', '') AS REAL) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find the maximum or minimum value in a column, avoid using ORDER BY and LIMIT, as this can return incorrect results if there are multiple rows with the same maximum or minimum value. Instead, use a subquery to find the maximum or minimum value, and then use this value to select the corresponding rows. This ensures that all rows with the maximum or minimum value are returned, not just one of them.",
        "ground_truth_sql": "SELECT OrderNumber FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 )",
        "difficulty": ""
    },
    {
        "question": "List the names and business certificates of the eateries which got inspection score under 50.",
        "hint": "eateries which got inspection score under 50 refer to business_id where score < 50;",
        "error_sql": "SELECT T1.name, T1.business_certificate FROM businesses AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE T2.score < 50",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the correct table alias is used to access the columns. In this case, the `businesses` table is being joined with the `inspections` table, and the `businesses` table contains the columns `name` and `business_certificate`. Therefore, the correct query should use the alias of the `businesses` table (`T2`) to access these columns. Additionally, the `business_id` column should be accessed from the `businesses` table (`T2`) instead of the `inspections` table (`T1`).",
        "ground_truth_sql": "SELECT T2.name, T2.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score < 50",
        "difficulty": ""
    },
    {
        "question": "What is the average number of less severe crimes reported a day in February of 2018?",
        "hint": "day in February of 2018 refers to date LIKE '2/%/2018'; less severe crime refers to index_code = 'N'; average = Divide (Count(case_number), 28)",
        "error_sql": "SELECT CAST(COUNT(T1.case_number) AS REAL) / 28 FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.index_code = 'N' AND T1.date LIKE '2/%/2018'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the SELECT and WHERE clauses match the table aliases used in the JOIN clause. In this case, the Error SQL Query used T1.case_number, but T1 was the alias for the IUCR table, which does not have a case_number column. The correct column name is T2.case_number, where T2 is the alias for the Crime table. Always double-check the table aliases and column names to avoid this mistake.",
        "ground_truth_sql": "SELECT CAST(COUNT(T2.case_number) AS REAL) / 28 FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.date LIKE '2/%/2018%' AND T1.index_code = 'N'",
        "difficulty": ""
    },
    {
        "question": "How many universities have no less than 20,000 female students in 2016? Identify how many of the said universities are located in the United States of America.",
        "hint": "have no less than 20,000 female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100) > 20000; in 2016 refers to year = 2016; located in the United States of America refers to country_name = 'United States of America'",
        "error_sql": "SELECT COUNT(IIF(T2.country_name = 'United States of America', T1.id, NULL)) AS usa_universities, COUNT(T1.id) AS total_universities \nFROM university AS T1 \nINNER JOIN country AS T2 \nON T1.country_id = T2.id \nINNER JOIN university_year AS T3 \nON T1.id = T3.university_id \nWHERE T3.year = 2016 AND (T3.num_students * T3.pct_female_students / 100) > 20000",
        "compiler_hint": "no such column: T1.university_id",
        "reflective_cot": "### Tip:\nWhen using aggregate functions like COUNT() or SUM() with conditional statements, it's essential to ensure that the column being referenced exists in the table or subquery being used. In this case, the error occurred because the column 'university_id' was not present in the 'university' table, but rather 'id'. Additionally, using IIF() or CASE WHEN is not necessary when counting rows that meet a specific condition, as SUM(CASE WHEN) can be used instead. Always verify the column names and data types to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(*) , SUM(CASE WHEN T3.country_name = 'United States of America' THEN 1 ELSE 0 END) AS nums_in_usa FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2016 AND T2.num_students * T2.pct_female_students / 100 > 20000",
        "difficulty": ""
    },
    {
        "question": "What is the total number of fans or followers who received most likes of their comments in the business?",
        "hint": "fans and followers refers to user_fans; most likes of their comments refer to Max(likes)",
        "error_sql": "SELECT MAX(T1.user_fans) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen solving SQL problems, it's essential to carefully read and understand the question. In this case, the question asks for the \"total number of fans or followers\" who received the most likes for their comments. The mistake in the initial attempts was focusing on finding the maximum number of fans (MAX(T1.user_fans)) or incorrectly ordering by likes. The correct approach is to count the number of fans who received the most likes, which involves grouping by user_id, counting the likes for each user, and then ordering by this count in descending order to find the maximum. This requires a more nuanced understanding of the problem and the use of aggregate functions (COUNT, GROUP BY) in conjunction with ordering and limiting results.",
        "ground_truth_sql": "SELECT COUNT(T1.user_fans) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id ORDER BY COUNT(T2.likes) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the patients who were immunized with meningococcal MCV4P, how many have viral sinusitis disorder after getting the immunization?",
        "hint": "immunized with meningococcal MCV4P refers to DESCRIPTION = 'meningococcal MCV4P' from immunizations; viral sinusitis disorder refers to DESCRIPTION = 'Viral sinusitis (disorder)' from conditions;",
        "error_sql": "SELECT COUNT(T1.PATIENT) FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.DESCRIPTION = 'meningococcal MCV4P' AND T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and counting the number of distinct entities, it's essential to consider the potential for duplicate records in the joined table. In this case, the error SQL query and the SQL after reflection both used `COUNT(T1.PATIENT)`, which would count duplicate records multiple times. To avoid this, use `COUNT(DISTINCT T1.patient)` to ensure that each patient is only counted once, even if they have multiple records in the joined table.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.patient) FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'meningococcal MCV4P' AND T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "difficulty": ""
    },
    {
        "question": "What is the category and itune url of the title \"Scaling Global\"?",
        "hint": "",
        "error_sql": "SELECT T3.category, T2.itunes_url FROM reviews AS T1 INNER JOIN podcasts AS T2 ON T1.podcast_id = T2.podcast_id INNER JOIN categories AS T3 ON T2.podcast_id = T3.podcast_id WHERE T1.title = 'Scaling Global'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and the columns used in the WHERE clause are from the correct table. In this case, the error was in the WHERE clause where the title was being compared from the 'reviews' table instead of the 'podcasts' table. Also, the join condition in the Error SQL Query was incorrect. To avoid this mistake, carefully examine the schema of the database, identify the correct tables and columns to use, and ensure that the join conditions are correct.",
        "ground_truth_sql": "SELECT T1.category, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Scaling Global'",
        "difficulty": ""
    },
    {
        "question": "For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active?",
        "hint": "at 14:09:49 on 2016/5/6 refers to timestamp = '2016/5/6 14:09:49'; location coordinate(116, 40) refers to longitude = '116' AND latitude = '40'; active refers to is_active = '1';",
        "error_sql": "SELECT COUNT(T2.app_id) FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T1.timestamp = '2016/5/6 14:09:49' AND T1.longitude = 116 AND T1.latitude = 40 AND T2.is_active = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the column names and aliases are correctly referenced in the WHERE and SELECT clauses. In this case, the mistake was in the column references in the WHERE clause. The correct references should be based on the table aliases used in the FROM clause. Additionally, pay attention to the data types and formats of the columns being compared, such as the date format in the timestamp column.",
        "ground_truth_sql": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'",
        "difficulty": ""
    },
    {
        "question": "How many releases by the artist michael jackson are tagged \"pop\"?",
        "hint": "tag = 'pop';",
        "error_sql": "SELECT COUNT(T1.id) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.artist = 'Michael Jackson' AND T2.tag = 'pop'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and filtering data, ensure that the filter conditions are case-insensitive if the database or column collation allows for it. In this case, the error occurred because the artist's name was filtered with 'Michael Jackson' (title case) instead of 'michael jackson' (lowercase), which is the actual case in the database. To avoid this mistake, use case-insensitive filtering methods such as LOWER() or UPPER() functions, or ensure that the filter values match the case of the data in the database.",
        "ground_truth_sql": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.artist = 'michael jackson'",
        "difficulty": ""
    },
    {
        "question": "On 8/29/2013, who took the longest to arrive in California Ave Caltrain Station from University and Emerson? Indicate the bike id.",
        "hint": "start_date = '8/29/2013'; end_date = '8/29/2013'; end_station_name = 'California Ave Caltrain Station'; start_station_name = 'University and Emerson'; who took the longest to arrive refers to MAX(duration);",
        "error_sql": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013' AND end_date LIKE '8/29/2013' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' ORDER BY duration DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using the `ORDER BY` clause with `LIMIT 1` to find the maximum or minimum value in a column, it's essential to ensure that the query is correctly filtering the data before ordering. However, relying solely on `ORDER BY` and `LIMIT 1` can be problematic if there are multiple rows with the same maximum or minimum value, as it will only return one of them arbitrarily. To avoid this issue, use a subquery to find the maximum or minimum value first, and then filter the data to include all rows with that value, as shown in the Ground Truth SQL. This approach ensures that all relevant rows are returned, not just one of them.",
        "ground_truth_sql": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' )",
        "difficulty": ""
    },
    {
        "question": "Which Apollo Ltd customer's order number has the most expensive unit price, indicating the order date?",
        "hint": "\"Apollo Ltd\" is the Customer Names; most expensive unit price refers to max(Unit Price)",
        "error_sql": "SELECT T1.OrderNumber, T1.OrderDate FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T1._CustomerID = T2.CustomerID WHERE T2.`Customer Names` = 'Apollo Ltd' ORDER BY CAST(REPLACE(T1.`Unit Price`, ',', '') AS REAL) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen comparing or ordering by a column that contains currency or numeric values with commas, it's essential to convert the column to a numeric data type after removing the commas. However, in this case, the error was in the conversion process. The correct approach is to remove the commas and then convert to a numeric data type. But, in the provided SQL queries, the conversion was done correctly. The issue was in the comparison of the unit price. The correct approach is to compare the unit price without considering the commas, but the unit price should be in the same format for all records. In this case, the error was in the SQL after Reflection, where the conversion was done correctly, but the comparison was not correct. The correct comparison should be done without considering the commas, but the unit price should be in the same format for all records. The Ground Truth SQL query shows that the comparison should be done directly on the unit price column without any conversion, assuming that the unit price is in the same format for all records. Therefore, the tip is to be careful when comparing or ordering by a column that contains currency or numeric values with commas, and make sure that the comparison is done correctly.",
        "ground_truth_sql": "SELECT T1.OrderNumber, T1.OrderDate FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Apollo Ltd' ORDER BY T1.`Unit Price` DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many game publisher IDs have published games on the X360 platform?",
        "hint": "X360 refers to platform_name = 'X360';",
        "error_sql": "SELECT COUNT(DISTINCT T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and that all necessary tables are included in the join. However, do not over-join tables, as this can lead to unnecessary complexity and incorrect results. In this case, the game_publisher table was not necessary for the query, as the game_publisher_id is already present in the game_platform table. Therefore, the correct query only requires joining the game_platform and platform tables.",
        "ground_truth_sql": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'",
        "difficulty": ""
    },
    {
        "question": "Where is the school that needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\"? Provide the latitude and longitude of that school.",
        "hint": "needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\" refers to item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'; where is the school refers to school_city; latitude refers to school_latitude; longtitude refers to school_longitude",
        "error_sql": "SELECT T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column names in the SELECT statement match the table alias used in the JOIN clause. In this case, the Error SQL Query used T1 for the projects table, but the correct table alias for projects is T2. Additionally, the query should also return the school_city as per the problem statement. Always double-check the table aliases and the columns being selected to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.school_city, T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'Viewscreen LCD FROM Texas Instruments, TI-84 Plus'",
        "difficulty": ""
    },
    {
        "question": "In the state where Lisa Murkowski is the representative, how many cities have zero employees?",
        "hint": "zero employee refers to employees = 0",
        "error_sql": "SELECT COUNT(T1.city) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Lisa' AND T3.last_name = 'Murkowski' AND T1.employees = 0",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join order and conditions are correct. In this case, the error was due to incorrect join order and conditions. The correct join order should start from the congress table, then join with the state table, and finally join with the zip_data table. Additionally, the join conditions should be based on the correct columns, such as the abbreviation column in the state table. It's also important to note that the COUNT function should be used with the correct table alias, which in this case is T3. To avoid making the same mistake in the future, it's essential to carefully review the table schema and the join conditions to ensure that they are correct.",
        "ground_truth_sql": "SELECT COUNT(T3.city) FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T1.first_name = 'Murkowski' AND T1.last_name = 'Lisa' AND T3.employees = 0",
        "difficulty": ""
    },
    {
        "question": "Provide the supplier company name in Sydney and its homepage address if available.",
        "hint": "in Sydney refers to City = 'Sydney';",
        "error_sql": "SELECT SupplierName FROM Suppliers WHERE City = 'Sydney'",
        "compiler_hint": "no such column: HomePage",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the column names in the SELECT clause match the actual column names in the table. In this case, the correct column name is 'CompanyName', not 'SupplierName' or 'SupplierCompany'. Also, the table 'Suppliers' does not have a column named 'HomePage', it's likely that the correct column name is 'HomePage' but it's not present in the provided schema, double-check the schema and the column names to avoid such mistakes.",
        "ground_truth_sql": "SELECT CompanyName, HomePage FROM Suppliers WHERE City = 'Sydney'",
        "difficulty": ""
    },
    {
        "question": "What is the newest established organization where Singapore is a member of?",
        "hint": "",
        "error_sql": "SELECT MAX(T1.Established) FROM organization AS T1 INNER JOIN isMember AS T2 ON T1.Abbreviation = T2.Organization WHERE T2.Country = 'Singapore'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\n\nWhen joining tables, ensure that the join conditions are correct and consider all relevant tables and relationships. In this case, the error SQL query and SQL after reflection were incorrect because they did not properly join the tables. The error SQL query only joined the `organization` table with the `isMember` table, but did not consider the `country` table. The SQL after reflection joined the `country` table with the `isMember` table and then with the `organization` table, but the join condition with the `organization` table was incorrect. To avoid making the same mistake in the future, it's essential to carefully analyze the relationships between tables and ensure that the join conditions are correct.",
        "ground_truth_sql": "SELECT T3.Name FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T1.Name = 'Singapore' ORDER BY T3.Established DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Name the teams played in a match which resulted in a tie in 2015.",
        "hint": "resulted in a tie refers to Win_Type = 'Tie'; in 2015 refers to SUBSTR(Match_Date, 1, 4) = 2015",
        "error_sql": "SELECT T1.Team_Name, T3.Team_Name \nFROM Team AS T1 \nINNER JOIN Match AS T2 \nON T1.Team_Id = T2.Team_1 \nINNER JOIN Team AS T3 \nON T2.Team_2 = T3.Team_Id \nWHERE T2.Win_Type = 'Tie' AND SUBSTR(T2.Match_Date, 1, 4) = 2015",
        "compiler_hint": "no such column: T2.Team_Name",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the columns being referenced exist in the correct tables and that the join conditions are correctly specified. In this case, the error occurred because the `Team_Name` column was being referenced from the `Match` table instead of the `Team` table. Additionally, when retrieving data from multiple tables, consider using `OR` conditions in the `WHERE` clause to account for different scenarios, such as a team being either `Team_1` or `Team_2` in the `Match` table.",
        "ground_truth_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Team_Id = T2.Team_2 INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE SUBSTR(T2.Match_Date, 1, 4) = '2015' AND T3.Win_Type = 'Tie' LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Please indicate the business id have the closing time with the category of Arts & Entertainment on Sunday.",
        "hint": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; category of Arts & Entertainment refers to category_name = 'Arts & Entertainment';",
        "error_sql": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.day_of_week = 'Sunday' AND T4.category_name = 'Arts & Entertainment'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order and the columns being joined are correct. In this case, the error was in the join order and the columns being selected. The correct join order should start with the table that has the category information, then join with the table that has the business information, and finally join with the table that has the hours information. Additionally, the correct columns to select should include the closing time from the Business_Hours table. To avoid making the same mistake in the future, double-check the join order and the columns being selected to ensure they match the requirements of the query.",
        "ground_truth_sql": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'",
        "difficulty": ""
    },
    {
        "question": "How many rainy days were recorded in Mountain View?",
        "hint": "rainy days refers to events = 'rain'; Mountain View refers to zip_code = 94041;",
        "error_sql": "SELECT COUNT(date) FROM weather WHERE events = 'rain' AND zip_code = '94041'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen dealing with data types and string comparisons in SQL, be mindful of case sensitivity and data type consistency. In this case, the error was due to the case sensitivity of the string 'rain' vs 'Rain' and the data type inconsistency of the zip_code column which is TEXT in the schema but should be compared as an INTEGER. Additionally, the correct approach to count the number of rainy days is to use a conditional aggregation function like SUM(IIF()) instead of COUNT() to ensure accurate results.",
        "ground_truth_sql": "SELECT SUM(IIF(zip_code = 94041 AND events = 'Rain', 1, 0)) FROM weather",
        "difficulty": ""
    },
    {
        "question": "For the Yelp business which had the most number of \"short\" tips, which category does it belong to?",
        "hint": "short tips refers to tip_length = 'short'; most number of short tips refers to MAX(COUNT(tip_length = 'short')); category refers to category_name;",
        "error_sql": "SELECT T4.category_name FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.tip_length = 'short' GROUP BY T4.category_name ORDER BY COUNT(T1.tip_length) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order makes sense logically and that the correct columns are being joined. In this case, the error was due to incorrect join order and incorrect column references. To avoid this mistake, take the time to carefully plan out the join order and ensure that each join is referencing the correct columns. Additionally, when using aggregate functions like COUNT, make sure to group by the correct columns to avoid incorrect results.",
        "ground_truth_sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'",
        "difficulty": ""
    },
    {
        "question": "How many authors drafted the paper \"Subcellular localization of nuclease in barley aleurone\"?",
        "hint": "'Subcellular localization of nuclease in barley aleurone' is the title of paper",
        "error_sql": "SELECT COUNT(AuthorId) FROM PaperAuthor WHERE PaperId IN ( SELECT Id FROM Paper WHERE Title = 'Subcellular localization of nuclease in barley aleurone' )",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that you are counting the correct column to avoid overcounting or undercounting. In this case, counting `AuthorId` directly would be incorrect because it may contain duplicate values for the same paper. Instead, join the `Paper` and `PaperAuthor` tables and count the distinct `Name` column from the `PaperAuthor` table to get the correct number of authors. Additionally, using `DISTINCT` keyword is crucial when counting to avoid counting duplicate values.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'",
        "difficulty": ""
    },
    {
        "question": "Give the number of followers for the user who posted the most lists.",
        "hint": "number of followers refers to user_subscriber; posted the most lists refers to MAX(COUNT(list_id))",
        "error_sql": "SELECT MAX(T1.user_subscriber) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T2.list_id) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables and performing aggregations, ensure that the GROUP BY clause is referencing the correct table and column. In this case, the GROUP BY clause should reference the user_id from the lists table (T1), not the lists_users table (T2), because the list_followers column is in the lists table. Additionally, the SUM aggregation function should be used to calculate the total number of followers for each user, not the MAX function which would return the maximum value of user_subscriber, which is not relevant to the problem.",
        "ground_truth_sql": "SELECT SUM(T1.list_followers) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T1.list_id) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the ratio of active and inactive app users of the event ID \"58\"?",
        "hint": "ratio = DIVIDE(SUM(is_active = 1), SUM(is_active = 0)); active refers to is_active = 1; inactive refers to is_active = 0;",
        "error_sql": "SELECT CAST(SUM(IIF(T1.is_active = 1, 1, 0)) AS REAL) / SUM(IIF(T1.is_active = 0, 1, 0)) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.event_id = 58",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating ratios, ensure that the denominator is not zero to avoid division by zero errors. In this case, the SQL query should be modified to handle the case where the sum of inactive users is zero. Additionally, the CAST function is not necessary in this case, as the division operation will automatically return a real number. The join with the events table is also unnecessary, as the event_id is already present in the app_events table.",
        "ground_truth_sql": "SELECT SUM(IIF(is_active = 1, 1, 0)) / SUM(IIF(is_active = 0, 1, 0)) AS per FROM app_events WHERE event_id = 58",
        "difficulty": ""
    },
    {
        "question": "List the student's first and last name that got a C in the course named \"Applied Deep Learning\".",
        "hint": "student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';",
        "error_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning' AND T2.grade = 'C'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and filtering data, ensure that the column values used in the WHERE clause are exact matches. In this case, the error was due to a trailing space in the course name 'Applied Deep Learning '. Always verify the data and column values to avoid such mistakes. It's also a good practice to use the TRIM() function to remove leading and trailing spaces from the column values before comparing them.",
        "ground_truth_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'",
        "difficulty": ""
    },
    {
        "question": "How many 4-year public institutions are there in the state of Florida? Give all of their names.",
        "hint": "4-year refers to level = '4-year'; public refers to control = 'Public'; names refers to chronname;",
        "error_sql": "SELECT COUNT(T1.chronname), T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T1.state = T2.state WHERE T1.state = 'FL' AND T1.level = '4-year' AND T2.control = 'Public'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join condition is correct and that the columns being joined are from the correct tables. In this case, the error was in the join condition and the selection of columns. The correct join condition should be based on the state_sector_details table, and the columns being selected should only be from the institution_details table. Additionally, the control column should be from the institution_details table, not the state_sector_details table. To avoid making the same mistake in the future, double-check the join conditions and the columns being selected to ensure they are correct and from the correct tables.",
        "ground_truth_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 WHERE T2.level = '4-year' AND T2.control = 'Public' AND T2.state = 'Florida'",
        "difficulty": ""
    },
    {
        "question": "Indicate the quantity of Blade products sold.",
        "hint": "Blade' is name of product;",
        "error_sql": "SELECT SUM(T1.Quantity) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Blade'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and performing an aggregation operation, ensure that the column being aggregated is from the correct table. In this case, the `Quantity` column is in the `Sales` table, not the `Products` table. Additionally, when retrieving a single value, use `SELECT DISTINCT` or `SELECT` with a `GROUP BY` clause instead of `SUM` to avoid summing up all quantities. However, in this case, the correct approach would be to use `SELECT SUM` if you want to get the total quantity of 'Blade' products sold, not `SELECT DISTINCT` or `SELECT` with a `GROUP BY` clause. The correct query should be the Error SQL Query.",
        "ground_truth_sql": "SELECT DISTINCT T2.Quantity FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Blade'",
        "difficulty": ""
    },
    {
        "question": "What is the ratio of female users to male users who uses a vivo device?",
        "hint": "ratio = DIVIDE(SUM(gender = 'M' WHERE phone_brand = 'vivo'), SUM(gender = 'F' WHERE phone_brand = 'vivo')); female refers to gender = 'F'; male refers to gender = 'M'; vivo device refers to phone_brand = 'vivo';",
        "error_sql": "SELECT CAST(SUM(IIF(T1.gender = 'F' AND T2.phone_brand = 'vivo', 1, 0)) AS REAL) / SUM(IIF(T1.gender = 'M' AND T2.phone_brand = 'vivo', 1, 0)) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating ratios, ensure that the conditions for both the numerator and denominator are correctly applied. In this case, the error was due to the incorrect application of the condition for the phone brand 'vivo' in the SQL query. The condition should be applied in the WHERE clause, not within the IIF function. Additionally, the ratio calculation was incorrect, as it was calculating the ratio of female to male users, whereas the question asked for the ratio of female users to male users. To avoid this mistake, carefully review the conditions and calculations in the SQL query to ensure they align with the problem requirements.",
        "ground_truth_sql": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'",
        "difficulty": ""
    },
    {
        "question": "What is the inventory ID of Karen Jackson?",
        "hint": "",
        "error_sql": "SELECT T1.inventory_id FROM inventory AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN film_actor AS T3 ON T2.film_id = T3.film_id INNER JOIN actor AS T4 ON T3.actor_id = T4.actor_id WHERE T4.first_name = 'KAREN' AND T4.last_name = 'JACKSON'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join is based on the correct relationships between the tables. In this case, the error SQL query joined the inventory table with the film, film_actor, and actor tables, but the correct join should be between the customer table and the rental table, as the customer's name is stored in the customer table and the inventory ID is stored in the rental table. Always carefully examine the schema and relationships between tables to avoid incorrect joins.",
        "ground_truth_sql": "SELECT T2.inventory_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'KAREN' AND T1.last_name = 'JACKSON'",
        "difficulty": ""
    },
    {
        "question": "How many teams did the team with the most victories in 1915 play against?\nIndicate the name of the team who won the most games in 1915, as well as the names of the opposing team.",
        "hint": "team playing refers to tmID; oppositng team refers to oppID; victories' and 'wins' are synonyms; most victories refers to max(w)",
        "error_sql": "SELECT COUNT(T2.oppID), T1.name, T2.oppID \nFROM Teams AS T1 \nINNER JOIN TeamVsTeam AS T2 \nON T1.tmID = T2.tmID \nWHERE T1.year = 1915 AND T1.W = ( SELECT MAX(W) FROM Teams WHERE year = 1915 )",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find the team with the most victories in a specific year and the number of teams they played against, it's essential to consider the following:\n\n1.  **Grouping**: Group the results by the team ID to ensure that the count of opposing teams is accurate for each team.\n2.  **Ordering**: Order the results by the sum of wins in descending order to find the team with the most victories.\n3.  **Limiting**: Limit the results to the top team with the most victories.\n4.  **Distinct Count**: Use a distinct count to ensure that each opposing team is only counted once.\n5.  **Joining**: Join the Teams table with the TeamVsTeam table on both the year and team ID to ensure accurate matching.\n\nBy considering these factors, you can avoid making the same mistake in the future and ensure that your SQL queries produce accurate results.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT oppID), T2.tmID, T2.oppID FROM Teams AS T1 INNER JOIN TeamVsTeam AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.year = 1915 GROUP BY T2.tmID, T2.oppID ORDER BY SUM(T2.W) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "List out the phone number of the shipping company of order id 10296.",
        "hint": "shipping company refers to Shippers; phone number refers to Phone",
        "error_sql": "SELECT T3.Phone FROM Orders AS T1 INNER JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipperID = T3.ShipperID WHERE T1.OrderID = 10296",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct column is used for the join condition. In this case, the correct column to join the Orders table with the Shippers table is ShipVia, not ShipperID. Additionally, verify the accuracy of the WHERE clause condition, as the OrderID in the Error SQL Query and SQL after Reflection was incorrect. Always double-check the table schema and the query conditions to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.Phone FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260",
        "difficulty": ""
    },
    {
        "question": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.",
        "hint": "amount of order refers to quantityOrdered; most amount of orders refers to SUM(QuantityOrdered); estimated earnings refers to expected profits; expected profits = SUBTRACT(msrp, buyPrice);",
        "error_sql": "SELECT T1.productVendor, SUM(T1.MSRP * T2.quantityOrdered - T1.buyPrice * T2.quantityOrdered) \nFROM products AS T1 \nINNER JOIN `orderdetails` AS T2 \nON T1.productCode = T2.productCode \nGROUP BY T1.productVendor \nORDER BY SUM(T2.quantityOrdered) DESC \nLIMIT 1",
        "compiler_hint": "no such column: T2.MSRP",
        "reflective_cot": "### Tip: \nWhen calculating the total estimated earnings, it's essential to understand that the earnings per product are the difference between the MSRP and the buyPrice, and this difference should be multiplied by the quantityOrdered. However, the SQL after Reflection still incorrectly multiplies the quantityInStock by the MSRP, which is not relevant to the calculation. To avoid this mistake, carefully analyze the problem and identify the relevant columns and their relationships. In this case, the correct calculation should be the difference between the MSRP and the buyPrice, multiplied by the quantityOrdered, and then summed for each vendor. The Ground Truth SQL correctly calculates the difference between the MSRP and the buyPrice for each product and then orders the results by the count of quantityOrdered in descending order, effectively finding the vendor with the most orders and the estimated earnings per product.",
        "ground_truth_sql": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many male employees have the job position of sales person?",
        "hint": "Sales person refers to PersonType = 'SP'; Male refers to Gender = 'M';",
        "error_sql": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE JobTitle = 'Sales Person' AND Gender = 'M'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the columns used in the WHERE clause are from the correct tables. In this case, the error was due to using the wrong column (JobTitle) to filter for sales persons, instead of using the PersonType column from the Person table. Additionally, the Gender column should be from the Employee table, not the Person table. Always verify the schema and the relationships between tables to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'SP'",
        "difficulty": ""
    },
    {
        "question": "How many times of repetition does the word \"exemple\" show in the Catalan language?",
        "hint": "exemple refers to word = 'exemple'; repetition refers to langs_words.occurrences; lid = 1 menas it's Catalan language",
        "error_sql": "SELECT T1.occurrences FROM langs_words AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid INNER JOIN words AS T3 ON T1.wid = T3.wid WHERE T2.lang = 'Catalan' AND T3.word = 'exemple'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order and the columns used for joining are correct. In this case, the error was due to incorrect join order and not using the correct lid value directly. To avoid this mistake, carefully analyze the table relationships and the query requirements, and make sure to use the most efficient and correct join order. Additionally, when possible, use the actual values (e.g., lid = 1) instead of joining another table to get that value, as it can simplify the query and reduce the chance of errors.",
        "ground_truth_sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'exemple' AND T2.lid = 1",
        "difficulty": ""
    },
    {
        "question": "How many items did Customer#000021159 order? Calculate those items total charges.",
        "hint": "items Customer#000021159 order refer to l_linenumber where c_name = 'Customer#000021159'; SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where c_name = 'Customer#000021159';",
        "error_sql": "SELECT COUNT(T3.l_linenumber), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) \nFROM customer AS T1 \nINNER JOIN orders AS T2 \nON T1.c_custkey = T2.o_custkey \nINNER JOIN lineitem AS T3 \nON T2.o_orderkey = T3.l_orderkey \nWHERE T1.c_name = 'Customer#000021159'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables and performing aggregation operations, ensure that you are grouping by the correct columns to avoid incorrect results. In this case, the initial query was missing the GROUP BY clause, and the column used in the COUNT function was incorrect. The corrected query groups by the order key and counts the number of orders, while also summing the total charges for each order. To avoid similar mistakes, always verify the logic of your query and ensure that you are grouping by the correct columns when performing aggregation operations.",
        "ground_truth_sql": "SELECT COUNT(T2.o_orderkey), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey INNER JOIN lineitem AS T3 ON T2.o_orderkey = T3.l_orderkey WHERE T1.c_name = 'Customer#000021159' GROUP BY T3.l_linenumber",
        "difficulty": ""
    },
    {
        "question": "Indicate the name of the country where Leka Trading supplies Ipoh Coffee product.",
        "hint": "'Leka Trading' is a CompanyName; 'Ipoh Coffee' is a ProductName",
        "error_sql": "SELECT T4.Country FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN OrderDetails AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4a ON T3.OrderID = T4a.OrderID INNER JOIN Customers AS T4 ON T4a.CustomerID = T4.CustomerID WHERE T1.SupplierName = 'Leka Trading' AND T2.ProductName = 'Ipoh Coffee'",
        "compiler_hint": "no such column: T1.CompanyName",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the WHERE clause match the actual column names in the tables being joined. In this case, the error occurred because 'CompanyName' does not exist in the 'Suppliers' table, it should be 'SupplierName'. Also, the 'Country' column is in the 'Suppliers' table, not in the 'Customers' table. Always double-check the schema of the database to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Ipoh Coffee' AND T2.CompanyName = 'Leka Trading'",
        "difficulty": ""
    },
    {
        "question": "Provide the price and country origin of the car named Ford Maverick.",
        "hint": "country origin refers to country; Ford Maverick refers to car_name = 'ford maverick'",
        "error_sql": "SELECT T1.price, T3.country FROM price AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.ID WHERE T2.car_name = 'Ford Maverick'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions are correct and the tables are joined in the correct order. In this case, the error was due to incorrect join conditions and order. The production table is the bridge between the data table and the country table, so it should be joined first. Additionally, the country origin is stored in the production table, not in the data table. To avoid this mistake, carefully analyze the schema and the relationships between the tables before writing the SQL query. Also, make sure to handle case sensitivity when comparing string values, as in this case, the car_name 'Ford Maverick' was compared with 'ford maverick'.",
        "ground_truth_sql": "SELECT DISTINCT T1.price, T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T4.car_name = 'ford maverick'",
        "difficulty": ""
    },
    {
        "question": "What are the titles and genres of the one-act works of Shakespeare?",
        "hint": "one-act works refers to count(Act) = 1; genre refers to GenreType\n",
        "error_sql": "SELECT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id GROUP BY T1.Title, T1.GenreType HAVING COUNT(T2.Act) = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and applying a filter condition, consider whether the condition should be applied before or after the join. In this case, the condition `T2.Act = 1` should be applied before the join to ensure that only rows with `Act = 1` are considered. However, the initial query used `HAVING COUNT(T2.Act) = 1`, which is incorrect because it counts the number of acts, not filters by act. The second query used `WHERE T2.Act = 1`, but it's still incorrect because it doesn't account for the possibility of multiple acts in a work. The correct query uses `SELECT DISTINCT` to ensure that each title and genre is only returned once, and the `WHERE` clause to filter by act before the join. To avoid this mistake, carefully consider the logic of the query and the relationships between the tables.",
        "ground_truth_sql": "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1",
        "difficulty": ""
    },
    {
        "question": "How many images have less than 15 object samples?",
        "hint": "images refer to IMG_ID; less than 15 object samples refer to COUNT(OBJ_SAMPLE_ID) < 15;",
        "error_sql": "SELECT COUNT(IMG_ID) FROM ( SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) AS OBJ_SAMPLE_COUNT FROM IMG_OBJ GROUP BY IMG_ID ) WHERE OBJ_SAMPLE_COUNT < 15",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, carefully consider the conditions and constraints. In this case, the condition is \"images have less than 15 object samples\", which means we need to count the number of object samples for each image and then filter the images with a count less than 15. However, the condition OBJ_SAMPLE_ID < 15 is incorrect because OBJ_SAMPLE_ID is not the count of object samples, but rather a unique identifier for each object sample. The correct approach is to use the HAVING clause with a subquery or a GROUP BY clause to count the object samples for each image, as in the SQL after Reflection. However, the SQL after Reflection is still incorrect because it uses a subquery which is not necessary. A better approach is to use the GROUP BY and HAVING clauses directly on the IMG_OBJ table. The correct SQL query would be: SELECT COUNT(IMG_ID) FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) < 15",
        "ground_truth_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_SAMPLE_ID < 15",
        "difficulty": ""
    },
    {
        "question": "How much time do businesses in El Mirage City, AZ State operate in average daily?",
        "hint": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); DIVIDE(SUM(SUBTRACT(closing_time, opening_time)), SUM(Business.business_id))",
        "error_sql": "SELECT CAST(SUM(SUBSTR(T2.closing_time, INSTR(T2.closing_time, ':') + 1) * 60 + SUBSTR(T2.closing_time, 1, INSTR(T2.closing_time, ':') - 1) - SUBSTR(T2.opening_time, INSTR(T2.opening_time, ':') + 1) * 60 - SUBSTR(T2.opening_time, 1, INSTR(T2.opening_time, ':') - 1)) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'El Mirage' AND T1.state = 'AZ'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen working with time data in SQL, be aware of the data type and format of the time columns. In this case, the `closing_time` and `opening_time` columns are likely stored as strings in the format 'HH:MM'. However, the initial query attempted to perform arithmetic operations on these strings, which is incorrect. The corrected query should take into account the format of the time data and perform the necessary conversions or calculations accordingly. Additionally, the use of `SUBSTR` and `INSTR` functions to extract the hour and minute components is unnecessary if the database management system supports date and time arithmetic operations. In this case, the ground truth SQL query simply subtracts the `opening_time` from the `closing_time`, assuming that the database management system can perform date and time arithmetic operations correctly.",
        "ground_truth_sql": "SELECT SUM(T2.closing_time - T2.opening_time) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'El Mirage' AND T1.state = 'AZ'",
        "difficulty": ""
    },
    {
        "question": "What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016?",
        "hint": "percentage = MULTIPLY(DIVIDE(SUM(`group` = 'F27-28'), COUNT(device_id)), 1.0); on the 3rd of May 2016 refers to timestamp = '2016-05-03%';",
        "error_sql": "SELECT CAST(SUM(IIF(T1.`group` = 'F27-28', 1, 0)) AS REAL) / COUNT(T1.device_id) * 1.0 FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp LIKE '2016-05-03%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being joined based on the problem requirements. In this case, the error was joining `events` instead of `events_relevant` which is the correct table to join with `gender_age`. Additionally, when filtering dates, use the correct date format and function to extract the date part, in this case, using `SUBSTR` to extract the first 10 characters of the timestamp. Also, be mindful of the calculation order, in this case, the multiplication by 100 should be done before the division to get the correct percentage.",
        "ground_truth_sql": "SELECT SUM(IIF(T1.`group` = 'F27-28', 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE SUBSTR(T2.timestamp, 1, 10) = '2016-05-03'",
        "difficulty": ""
    },
    {
        "question": "What is the salary rate per hour that the company paid to the first 5 employees that they hired?",
        "hint": "salary rate per hour refers to Rate; first 5 employees that were hired refers to 5 oldest HireDate;",
        "error_sql": "SELECT Rate FROM EmployeePayHistory ORDER BY RateChangeDate LIMIT 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that you are joining on the correct columns and that you are including all necessary tables to accurately retrieve the desired data. In this case, the EmployeePayHistory table needs to be joined with the Employee table to access the HireDate, and the Employee table also needs to be joined with the Person table to ensure that the BusinessEntityID is correctly matched. Additionally, the ORDER BY clause should be used in conjunction with the LIMIT clause to ensure that the correct 5 employees are being selected based on their HireDate.",
        "ground_truth_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T2.HireDate ASC LIMIT 0, 5",
        "difficulty": ""
    },
    {
        "question": "What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works?",
        "hint": "full address = addressLine1 + addressLine2; NYC is a shortname of New York City.",
        "error_sql": "SELECT T1.addressLine1 || ', ' || T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode INNER JOIN customers AS T3 ON T2.employeeNumber = T3.salesRepEmployeeNumber WHERE T3.city = 'New York'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions and the tables being joined are correct. In this case, the error was in the join order and the conditions. The correct join order is employees -> customers -> offices, and the condition should be T2.city = 'NYC' instead of T3.city = 'New York'. Additionally, the job title condition should be included to filter the employees who are sales representatives. Always carefully review the table relationships and the join conditions to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'",
        "difficulty": ""
    },
    {
        "question": "Which distinct state makes beer that has the least amount of bitterness?",
        "hint": "",
        "error_sql": "SELECT DISTINCT T1.state FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.id = T2.brewery_id ORDER BY T2.ibu ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen solving SQL problems, it's essential to carefully consider the requirements of the query. In this case, the task was to find the distinct state that produces the beer with the least amount of bitterness. The initial error was in the ORDER BY and LIMIT approach, which would only return one state, even if multiple states produce beers with the same minimum bitterness. The second attempt was closer, but it didn't return the actual ibu value, which is necessary to verify the correctness of the result. To avoid similar mistakes, always make sure to include all required columns in the SELECT statement and use subqueries or joins to ensure that the result set includes all possible answers, not just one.",
        "ground_truth_sql": "SELECT DISTINCT T2.state, T1.ibu FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.ibu IS NOT NULL AND T1.ibu = ( SELECT MIN(ibu) FROM beers )",
        "difficulty": ""
    },
    {
        "question": "When did the earliest complaint start on 2017/3/22?",
        "hint": "earliest complaint refers to oldest ser_start; on 2017/3/22 refers to \"Date received\" = '2017-03-22';",
        "error_sql": "SELECT MIN(ser_start) FROM callcenterlogs WHERE `Date received` = '2017-03-22'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, carefully read the question and understand what is being asked. In this case, the question asks for the earliest complaint start time on a specific date, but the provided SQL queries return the minimum service start time (ser_start) or service time (ser_time). However, the correct interpretation is that the earliest complaint start time refers to the oldest service start time (ser_start) or the shortest service time (ser_time) is not necessarily the earliest start time. The correct answer should be the minimum ser_start time. But the question asks for the earliest complaint start time, which is actually the minimum ser_start time among the complaints that started on '2017-03-22'. But the question also says \"When did the earliest complaint start\", which means we need to get the minimum ser_start time among all the complaints that were received on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum ser_start time among all the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'. But the question actually wants the time when the earliest complaint started, which is actually the minimum time among all the ser_start times of the complaints that were received on '2017-03-22' and also started on '2017-03-22'.",
        "ground_truth_sql": "SELECT MIN(ser_time) FROM callcenterlogs WHERE `Date received` = '2017-03-22'",
        "difficulty": ""
    },
    {
        "question": "What is the country location of the employee who handled order id 10257?",
        "hint": "",
        "error_sql": "SELECT T4.Country FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Customers AS T3 ON T2.EmployeeID = T3.CustomerID INNER JOIN Suppliers AS T4 ON T3.Country = T4.Country WHERE T1.OrderID = 10257",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and that the tables are joined in the correct order. In this case, the error was due to joining the Employees table with the Customers table and then with the Suppliers table, which is not necessary and incorrect. The correct join is between the Orders table and the Employees table. Additionally, the country location is a column in the Employees table, not in the Suppliers table. To avoid this mistake, carefully analyze the table schema and the relationships between the tables, and ensure that the join conditions are correct and necessary.",
        "ground_truth_sql": "SELECT T1.Country FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257",
        "difficulty": ""
    },
    {
        "question": "Identify the customer, which placed the largest order in terms of value.",
        "hint": "value refers to SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)); the largest order in value refers to MAX(value)",
        "error_sql": "SELECT T3.CustomerName \nFROM OrderDetails AS T1 \nINNER JOIN Products AS T2 \nON T1.ProductID = T2.ProductID \nINNER JOIN Customers AS T3 \nON T3.CustomerID = T1.OrderID \nGROUP BY T3.CustomerName \nORDER BY SUM(T2.Price * T1.Quantity) DESC \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join conditions are correct and that the correct columns are being referenced. In the Error SQL Query, the join condition between Customers and Orders was incorrect, as it was joining on OrderID instead of CustomerID. Additionally, the Error SQL Query was missing the join with the Order Details table, which is necessary to calculate the total value of the order. The SQL after Reflection was closer to correct, but still had an error in the GROUP BY clause, as it should have been grouping by the CustomerID instead of the CompanyName. To avoid making the same mistake in the future, double-check the join conditions and ensure that the correct columns are being referenced, and also verify that the GROUP BY clause is grouping by the correct column.",
        "ground_truth_sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.CustomerID ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among professors with the highest teachability, how many of their students have high salary?",
        "hint": "highest teachability refers to MAX(teachability); high salary refers to salary = 'high';",
        "error_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = ( SELECT MAX(teachingability) FROM prof ) AND T1.salary = 'high'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen dealing with aggregate functions like MAX, MIN, or COUNT, and filtering based on these values, consider whether the query should be filtering the data before or after the aggregation. In this case, the query should first filter the professors with the highest teaching ability and then count the number of their students with high salary. However, the provided SQL queries were either filtering the professors after joining with the RA table or using ORDER BY and LIMIT to get the professors with the highest teaching ability, which is not the correct approach. The correct approach would be to first get the professors with the highest teaching ability and then join this result with the RA table to count the number of their students with high salary.",
        "ground_truth_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What percentage of sell orders on 04/04/2020 were for the state of New York?",
        "hint": "sales order on 04/04/2020 refers to OrderDate = '4/4/20'; 'New York' is\u00a0 the City Name; percentage = Divide (Sum(OrderNumber where City Name = 'New York'), Count (OrderNumber)) * 100",
        "error_sql": "SELECT CAST(SUM(IIF(T1.`City Name` = 'New York', 1, 0)) AS REAL) * 100 / COUNT(T2.OrderNumber) FROM `Store Locations` AS T1 INNER JOIN `Sales Orders` AS T2 ON T1.StoreID = T2._StoreID WHERE T2.OrderDate = '4/4/20'",
        "compiler_hint": "no such column: T1.OrderNumber",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column references in the SELECT, WHERE, and CASE statements match the table aliases used in the JOIN clause. In this case, the error occurred because the column references were swapped between the two tables. To avoid this mistake, carefully review the table aliases and column references to ensure consistency throughout the query. Additionally, verify that the column names and table aliases match the actual column names and table structures in the database schema.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'",
        "difficulty": ""
    },
    {
        "question": "How many employees have salary greater than 70000 but fail the inspection?",
        "hint": "salary greater than 70000 refers to salary > 70000; fail the inspection refers to results = 'Fail'",
        "error_sql": "SELECT COUNT(T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.salary > 70000 AND T2.results = 'Fail'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and counting distinct values, ensure that the join is correct and the distinct count is applied to the correct column. In this case, the error was not in the join or the distinct count, but rather in the order of the conditions in the WHERE clause. However, the order of conditions in the WHERE clause does not affect the result. The issue with the first two queries is that they are counting the number of inspections that failed, not the number of employees who failed an inspection and have a salary greater than 70000. To fix this, we need to ensure that we are counting distinct employees, not distinct inspections. The correct query is already provided as the Ground Truth SQL. The key takeaway is to carefully consider what you are counting and ensure that it aligns with the question being asked.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND T1.salary > 70000",
        "difficulty": ""
    },
    {
        "question": "How many users, who were a paying subscriber when they rated the movie, gave the movie that was released in 1924 and directed by Erich von Stroheim a rating score of 5?",
        "hint": "Directed by Buster Keaton refers to director_name; released in 1924 refers to movie_release_year = 1924; paying subscriber refers to user_has_payment_method = 1\n\n",
        "error_sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_release_year = 1924 AND T2.director_name = 'Erich von Stroheim' AND T1.rating_score = 5 AND T3.user_has_payment_method = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the column names and table aliases are correctly referenced. In this case, the error occurred because the `user_has_payment_method` column was referenced from the `ratings` table instead of the `ratings_users` table. Additionally, the `COUNT` function was referencing the wrong table alias. To avoid this mistake, double-check the table aliases and column names in the query, and ensure that the correct tables are being referenced.",
        "ground_truth_sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1",
        "difficulty": ""
    },
    {
        "question": "Which supplier supplies the most amount of products?",
        "hint": "supplier refers to SupplierID; most amount refers to max(count(ProductID))",
        "error_sql": "SELECT SupplierID FROM Products GROUP BY SupplierID ORDER BY COUNT(ProductID) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen writing SQL queries, it's essential to carefully consider the columns being referenced in the SELECT, GROUP BY, and ORDER BY clauses. In this case, the error occurred because the query was trying to return the SupplierID instead of the SupplierName, and also because the COUNT function was referencing the wrong column (ProductID instead of ProductName). To avoid this mistake, always ensure that the columns being referenced match the desired output, and double-check the table schema to confirm the correct column names. Additionally, when joining tables, make sure to include all necessary columns in the GROUP BY clause to avoid errors.",
        "ground_truth_sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierID, T2.CompanyName ORDER BY COUNT(T1.ProductName) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Who directed the movie with the most voice actors?",
        "hint": "who directed refers director;",
        "error_sql": "SELECT T1.director FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.name = T2.movie GROUP BY T1.director ORDER BY COUNT(T2.`voice-actor`) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the columns being joined are the correct ones. In this case, the initial error was joining on `T1.movie = T2.name` instead of `T1.movie = T2.name` and also not selecting the count of voice actors. The second attempt was close but still incorrect as it didn't select the count of voice actors. To avoid this mistake, double-check the schema of the tables being joined and ensure that the join condition is correct. Also, make sure to select all the required columns in the final query.",
        "ground_truth_sql": "SELECT T2.director, COUNT(DISTINCT T1.`voice-actor`) FROM `voice-actors` AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.`voice-actor`) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What percentage of students are highly satisfied with the Intro to Database 2 course?",
        "hint": "percentage = MULTIPLY(DIVIDE(COUNT(MAX(sat)), (COUNT(student_id))), 1.0); highly satisfied refers to MAX(sat);",
        "error_sql": "SELECT CAST(COUNT(T1.student_id) AS REAL) / (SELECT COUNT(student_id) FROM registration WHERE course_id = (SELECT course_id FROM course WHERE name = 'Intro to Database 2')) * 1.0 FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2' AND T1.sat = (SELECT MAX(sat) FROM registration AS T3 INNER JOIN course AS T4 ON T3.course_id = T4.course_id WHERE T4.name = 'Intro to Database 2')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages, ensure that the numerator and denominator are correctly aligned with the problem's requirements. In this case, the numerator should represent the count of highly satisfied students, and the denominator should represent the total number of students who took the course. Avoid mistakenly using the count of students who took the course as the numerator and the total count of students who took the course as the denominator. Additionally, be cautious when using subqueries and joins to ensure that the logic is correct and the results are accurate.",
        "ground_truth_sql": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'",
        "difficulty": ""
    },
    {
        "question": "What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake?",
        "hint": "apple juice is a name of an ingredient; raspberry-pear couscous cake refers to title",
        "error_sql": "SELECT T3.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T2.ingredient_id = T3.ingredient_id WHERE T1.title = 'raspberry-pear couscous cake' AND T3.name = 'apple juice'",
        "compiler_hint": "no such column: T3.preparation",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column references are correct and match the table aliases used in the query. In this case, the error occurred because the `preparation` column was referenced from the wrong table alias (`T3` instead of `T2`). To avoid this mistake, double-check the table aliases and column references in the query, and make sure they match the actual table structures and column names. Additionally, verify that the join conditions are correct and that the correct tables are being joined.",
        "ground_truth_sql": "SELECT T2.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry-Pear Couscous Cake' AND T3.name = 'apple juice'",
        "difficulty": ""
    },
    {
        "question": "State the male population for all zip code which were under the Berlin, NH CBSA.",
        "hint": "\"Berlin, NH\" is the CBSA_name",
        "error_sql": "SELECT T1.zip_code, T1.male_population FROM zip_data AS T1 INNER JOIN CBSA AS T2 ON T1.CBSA = T2.CBSA WHERE T2.CBSA_name = 'Berlin, NH'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the column names and aliases are correctly referenced in the SELECT statement. In this case, the error was due to the incorrect alias used in the SELECT statement. The correct alias should be used consistently throughout the query. Additionally, when grouping data, ensure that all non-aggregated columns are included in the GROUP BY clause. In this case, the GROUP BY clause was missing, which would have caused an error if the query had been executed.",
        "ground_truth_sql": "SELECT T2.male_population FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Berlin, NH' GROUP BY T2.male_population",
        "difficulty": ""
    },
    {
        "question": "What is the total number of game played for players from USA?",
        "hint": "game played refers to GP; from USA refers to birthCountry = 'USA';",
        "error_sql": "SELECT SUM(T1.GP) FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.birthCountry = 'USA'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen aggregating data, ensure that the correct aggregation function is used. In this case, the task asks for the total number of games played, but the provided SQL queries use `SUM` and `COUNT` incorrectly. `SUM` is used to add up numerical values, whereas `COUNT` is used to count the number of rows. Since `GP` is a numerical value, `SUM` is the correct function to use. However, the correct SQL query should use `SUM` instead of `COUNT`. The correct SQL query should be: `SELECT SUM(T2.GP) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'`.",
        "ground_truth_sql": "SELECT COUNT(T2.GP) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'",
        "difficulty": ""
    },
    {
        "question": "List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'.",
        "hint": "",
        "error_sql": "SELECT T1.OrderNumber, T4.`Product Name` \nFROM `Sales Orders` AS T1 \nINNER JOIN `Sales Team` AS T2 \nON T1._SalesTeamID = T2.SalesTeamID \nINNER JOIN Products AS T4 \nON T1._ProductID = T4.ProductID \nWHERE T2.`Sales Team` = 'Douglas Tucker'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order and the tables being joined are correct. In this case, the error was due to the incorrect assumption that the `Sales Orders` table should be the primary table. However, since we are filtering by `Sales Team` and then getting the corresponding `Product Name`, it makes more sense to start with the `Products` table and join it with the `Sales Orders` table, and then with the `Sales Team` table. This ensures that we are getting the correct products associated with the specified sales team.",
        "ground_truth_sql": "SELECT DISTINCT T1.ProductID, T1.`Product Name` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.`Sales Team` = 'Douglas Tucker'",
        "difficulty": ""
    },
    {
        "question": "What is the percentage of historical works that have not fewer than five scenes in the 1500s?",
        "hint": "historical works refers to GenreType = 'history'; have not fewer than five scenes in the 1500s refers to count(Scene) > = 5 and DATE > = 1500 AND DATE < = 1599; percentage = divide(count(works.id) where GenreType = 'history' and count(Scene) > = 5, count(works.id) ) as percentage",
        "error_sql": "SELECT CAST(SUM(IIF(T1.GenreType = 'history' AND T2.SceneCount >= 5, 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN ( SELECT work_id, COUNT(Scene) AS SceneCount FROM chapters WHERE work_id IN ( SELECT id FROM works WHERE Date BETWEEN 1500 AND 1599 ) GROUP BY work_id ) AS T2 ON T1.id = T2.work_id",
        "compiler_hint": "no such column: DATE",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the filtering conditions are applied to the correct table. In this case, the `DATE` column is in the `works` table, not the `chapters` table. Therefore, the filtering condition `DATE BETWEEN 1500 AND 1599` should be applied to the `works` table, not the `chapters` table. Additionally, when calculating the percentage, make sure to count the total number of works that meet the filtering conditions, not just the total number of works. This can be achieved by applying the filtering conditions to the `works` table before joining it with the `chapters` table.",
        "ground_truth_sql": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599",
        "difficulty": ""
    },
    {
        "question": "List at least 3 categories with the lowest number of users.",
        "hint": "lowest number of users refers to MIN(COUNT(label_id));",
        "error_sql": "SELECT T1.category, COUNT(T1.label_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id GROUP BY T1.category ORDER BY COUNT(T1.label_id) ASC LIMIT 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen solving SQL problems, it's essential to carefully analyze the question and understand what is being asked. In this case, the question asks for categories with the lowest number of users, but the provided tables do not have a direct \"users\" column. The correct approach is to count the number of distinct app_ids (which can be considered as users) for each category. However, the correct SQL query does not even need to count or group by, it simply needs to order by the label_id and limit to 3, because the label_id is already a unique identifier for each category. The mistake in the previous queries was overcomplicating the problem by trying to count and group by, when a simple order by and limit would suffice.",
        "ground_truth_sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id ORDER BY T2.label_id LIMIT 3",
        "difficulty": ""
    },
    {
        "question": "Please list the business IDs of all the Yelp_Businesses that are good for kids.",
        "hint": "good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'\n",
        "error_sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'Kids' AND T2.attribute_value = 'true'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and filtering data, ensure that the attribute names and values are accurately matched. In this case, the error was due to the incorrect attribute name 'Kids' instead of 'Good for Kids'. To avoid this mistake, double-check the schema and data to ensure that the attribute names and values are correctly referenced in the SQL query. Additionally, using the LIKE operator with the correct attribute name and value can help to accurately filter the data.",
        "ground_truth_sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Good for Kids' AND T2.attribute_value LIKE 'TRUE'",
        "difficulty": ""
    },
    {
        "question": "Name the suppliers that supply products under the category 'cheeses.'",
        "hint": "suppliers refers to CompanyName; 'cheeses' is a Description",
        "error_sql": "SELECT T3.SupplierName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN Suppliers AS T3 ON T2.SupplierID = T3.SupplierID WHERE T1.Description = 'Cheeses'",
        "compiler_hint": "no such column: T3.CompanyName",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the column names in the SELECT clause match the actual column names in the tables. In this case, the Suppliers table has a column named 'SupplierName', not 'CompanyName'. Also, pay attention to the order of the tables in the JOIN clause, as it can affect the column names available for selection.",
        "ground_truth_sql": "SELECT DISTINCT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.Description = 'Cheeses'",
        "difficulty": ""
    },
    {
        "question": "Among the users who received high compliments from other users, which users joined Yelp earliest?",
        "hint": "high compliments refers to number_of_compliments = ' High'; joined Yelp earliest refers to min(user_yelping_since_year)",
        "error_sql": "SELECT T2.user_id FROM Users_Compliments AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.number_of_compliments = 'High' ORDER BY T2.user_yelping_since_year ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the join condition is correct and the tables are joined in the correct order. In this case, the error was due to the incorrect order of the tables in the join condition. The correct order should be to join the Users table with the Users_Compliments table, not the other way around. Additionally, when using aggregate functions like MIN, ensure that the subquery is correctly formulated to return the desired result. In this case, the subquery should return the minimum user_yelping_since_year from the Users table, and then this value should be used to filter the results.",
        "ground_truth_sql": "SELECT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_yelping_since_year = ( SELECT MIN(user_yelping_since_year) FROM Users )",
        "difficulty": ""
    },
    {
        "question": "What is the average star with highest percentage for episodes that have received award?",
        "hint": "received award refers to result = 'Winner'; the highest percentage refers to max(percent); average star = divide(sum(stars), count(episode_id))",
        "error_sql": "SELECT AVG(T1.stars / T1.votes) FROM Vote AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Winner'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, it's essential to carefully read and understand the question, especially when it comes to aggregations and filtering. In this case, the question asks for the average star with the highest percentage for episodes that have received an award. However, the provided solutions incorrectly calculate the average star and fail to filter by the highest percentage. To avoid this mistake, break down the problem into smaller steps: (1) filter episodes that have received an award, (2) find the episode with the highest percentage, and (3) calculate the average star for that episode. Additionally, ensure that aggregations are correctly applied, and filtering conditions are accurately translated into SQL.",
        "ground_truth_sql": "SELECT T2.person_id FROM Vote AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.percent DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the response and number of inhabitants of the oldest female customer?",
        "hint": "number of inhabitants refers to INHABITANTS_K; oldest female customer refers to SEX = 'Female' where MAX(age);",
        "error_sql": "SELECT T3.RESPONSE, T4.INHABITANTS_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN mailings3 AS T3 ON T2.REFID = T3.REFID INNER JOIN Demog AS T4 ON T1.GEOID = T4.GEOID WHERE T1.SEX = 'Female' ORDER BY T1.age DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join conditions are correct and that the tables are joined in the correct order. In this case, the error was caused by joining `Mailings1_2` with `mailings3` instead of joining `Customers` with `Demog` directly. Also, verify that the column names and table aliases are correct to avoid confusion. To avoid this mistake, carefully review the schema and the relationships between tables before writing the SQL query.",
        "ground_truth_sql": "SELECT T2.RESPONSE, T3.INHABITANTS_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' ORDER BY T1.age DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Please list any three episodes that have an excellent rating.",
        "hint": "an excellent rating refers to 7 < rating < = 10",
        "error_sql": "SELECT title FROM Episode WHERE rating > 7 AND rating <= 10 LIMIT 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen using the BETWEEN operator in SQL, it is inclusive of both the start and end values. However, in this case, the problem statement specifies that an excellent rating refers to 7 < rating <= 10, which means the start value (7) should be excluded. Therefore, the correct SQL query should use the greater than operator (>) for the start value and the less than or equal to operator (<=) for the end value, rather than the BETWEEN operator. The correct SQL query should be: SELECT title FROM Episode WHERE rating > 7 AND rating <= 10 LIMIT 3.",
        "ground_truth_sql": "SELECT title FROM Episode WHERE rating BETWEEN 7 AND 10 LIMIT 3;",
        "difficulty": ""
    },
    {
        "question": "What is the yearly average review done by user ID 3?",
        "hint": "yearly average review = Divide( Count(business_id), Subtract('%Y'(CURRENT_TIME), user_yelping_since_year))",
        "error_sql": "SELECT CAST(COUNT(T1.business_id) AS REAL) / (strftime('%Y', 'now') - T2.user_yelping_since_year) FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id = 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the average review count per year for a user, ensure that you are counting the number of reviews (review_stars) and not the number of businesses (business_id). Also, avoid unnecessary casting to REAL, as it may not be required in this case.",
        "ground_truth_sql": "SELECT COUNT(review_stars) / (strftime('%Y', 'now') - T1.user_yelping_since_year) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3",
        "difficulty": ""
    },
    {
        "question": "Who are the suppliers of the discontinued products?",
        "hint": "discontinued product refers to Discontinued = 1; supplier refers to CompanyName",
        "error_sql": "SELECT T2.SupplierName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1",
        "compiler_hint": "no such column: T2.CompanyName",
        "reflective_cot": "### Tip: \nAlways carefully review the schema of the database before generating SQL queries. In this case, the error occurred because the column 'Discontinued' does not exist in the 'Products' table. Instead, the 'DiscontinuedDate' column is used to indicate discontinued products. However, the Ground Truth SQL suggests that 'Discontinued' should be used, which is not present in the provided schema. To avoid this mistake, ensure that the column names used in the SQL query match the actual column names in the database schema.",
        "ground_truth_sql": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1",
        "difficulty": ""
    },
    {
        "question": "Please list out all annual indicator names of Sudan in 1961?",
        "hint": "Sudan is the name of the country; Periodicity = 'Annual'; Year = '1961'",
        "error_sql": "SELECT T3.IndicatorName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN Series AS T3 ON T2.IndicatorCode = T3.SeriesCode WHERE T1.LongName = 'Sudan' AND T3.Periodicity = 'Annual' AND T2.Year = 1961",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join condition is correct and the columns being joined are of the same data type. In the Error SQL Query, the join condition `T2.IndicatorCode = T3.SeriesCode` is incorrect because `IndicatorCode` is not the same as `SeriesCode`. Also, the join condition `T1.IndicatorName = T2.IndicatorName` in the SQL after Reflection is also incorrect because `IndicatorName` is not a unique identifier in the `Series` table. To avoid this mistake, carefully examine the schema of the tables and ensure that the join conditions are correct and the columns being joined are of the same data type. Additionally, use the correct table and column names to avoid confusion. In this case, the correct join condition is `T1.IndicatorName = T2.IndicatorName` and `T1.CountryCode` should be joined with `Country` table to get the country name.",
        "ground_truth_sql": "SELECT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.CountryName = 'Sudan' AND T1.Year = 1961 AND T2.Periodicity = 'Annual'",
        "difficulty": ""
    },
    {
        "question": "Provide any 5 customers' full names who have rented from Mike Hillyer.",
        "hint": "full name refers to first_name, last_name; 'Mike Hillyer' is a full name of a staff;",
        "error_sql": "SELECT T1.first_name, T1.last_name \nFROM customer AS T1 \nINNER JOIN rental AS T2 \nON T1.customer_id = T2.customer_id \nINNER JOIN staff AS T3 \nON T2.staff_id = T3.staff_id \nWHERE T3.first_name = 'Mike' AND T3.last_name = 'Hillyer'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join conditions are correct and that the tables are joined in the correct order. In this case, the error was due to the incorrect assumption that the staff table should be joined with the rental table, and then the rental table should be joined with the customer table. However, the correct join order is staff -> address -> customer. This is because the staff table is related to the address table, and the address table is related to the customer table. Always carefully examine the schema and relationships between tables to ensure correct join conditions and order.",
        "ground_truth_sql": "SELECT T3.first_name, T3.last_name FROM staff AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.first_name = 'Mike' AND T1.last_name = 'Hillyer' LIMIT 5",
        "difficulty": ""
    },
    {
        "question": "Name the product from the 'Classic Cars' production line that has the greatest expected profit.",
        "hint": "The greatest expected profit refers to MAX(SUBTRACT(MSRP, buyPrice);",
        "error_sql": "SELECT productName FROM products WHERE productLine = 'Classic Cars' ORDER BY MSRP - buyPrice DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen writing SQL queries, it's essential to carefully consider the columns that need to be returned. In this case, the question asks for the product name with the greatest expected profit, but the expected profit itself is also a crucial piece of information. The initial query only returned the product name, whereas the correct query should return both the product name and the expected profit (calculated as MSRP - buyPrice). To avoid similar mistakes in the future, always ensure that the SELECT clause includes all the necessary columns to answer the question accurately.",
        "ground_truth_sql": "SELECT t.productName, t.MSRP - t.buyPrice FROM products AS t WHERE t.productLine = 'Classic Cars' ORDER BY t.MSRP - t.buyPrice DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the users who use SUGAR, calculate the percentage of those who are above 20 years old.",
        "hint": "SUGAR refers to phone_brand = 'SUGAR'; percentage = MULTIPLY(DIVIDE(SUM(age > 20), COUNT(device_id)) 1.0); above 20 years old refers to age > 20;",
        "error_sql": "SELECT CAST(SUM(IIF(T1.age > 20, 1, 0)) AS REAL) * 100 / COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'SUGAR'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages, ensure that the division is performed as a floating-point operation to avoid integer division. However, in this case, the issue was not with the division, but rather with the unnecessary multiplication by 100 and casting to REAL. The correct approach is to simply divide the sum of ages greater than 20 by the total count of device IDs. Additionally, consider using a more explicit and readable way of calculating the percentage, such as using a CASE statement or a subquery, to improve code maintainability and readability.",
        "ground_truth_sql": "SELECT SUM(IIF(T1.age > 20, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'SUGAR'",
        "difficulty": ""
    },
    {
        "question": "How many owners have 5 or more establishments?",
        "hint": "5 or more establishments COUNT(business_id) > = 5;",
        "error_sql": "SELECT COUNT(owner_name) FROM businesses GROUP BY owner_name HAVING COUNT(business_id) >= 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using the HAVING clause to filter grouped results, ensure that the aggregated condition is correctly specified. In this case, the condition should be `COUNT(owner_name) > 5` instead of `COUNT(business_id) >= 5` or `COUNT(business_id) > 4`. This is because we want to count the number of owners who have more than 5 establishments, not the number of businesses. Additionally, the correct query should use a subquery to first group the results by owner_name and then count the number of owners who meet the condition.",
        "ground_truth_sql": "SELECT COUNT(T1.owner_name) FROM ( SELECT owner_name FROM businesses GROUP BY owner_name HAVING COUNT(owner_name) > 5 ) T1",
        "difficulty": ""
    },
    {
        "question": "Give the number of 30-year-old users who were active in the events on 2016/5/2.",
        "hint": "30-year-old refers to age = '30'; active refers to is_active = 1; on 2016/5/2 refers to timestamp = '2016/5/2 XX:XX:XX';",
        "error_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events AS T3 ON T2.event_id = T3.event_id WHERE T1.age = 30 AND T3.is_active = 1 AND SUBSTR(T2.timestamp, 1, 10) = '2016-05-02'",
        "compiler_hint": null,
        "reflective_cot": "The tip is to carefully review the SQL query and consider the following points:\n\n1. **Table names and aliases**: Ensure that the table names and aliases used in the query are correct and consistent with the schema.\n2. **Join conditions**: Verify that the join conditions are correct and that the tables are being joined on the correct columns.\n3. **Query logic**: Double-check the query logic to ensure that it accurately represents the problem being solved.\n4. **Table order**: Consider the order of the tables in the query and whether it affects the result.\n5. **Read the problem carefully**: Make sure to read the problem statement carefully and understand the requirements before writing the query.\n\nIn this case, the mistake was made in the table names and the join conditions. The query should use the `events` table instead of `events_relevant` and the `app_events` table should be joined with the `events` table instead of the other way around.",
        "ground_truth_sql": "SELECT COUNT(T3.device_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE SUBSTR(`timestamp`, 1, 10) = '2016-05-02' AND T1.is_active = 1 AND T3.age = '30'",
        "difficulty": ""
    },
    {
        "question": "Provide all the orders from WARE-NMK1003. Name the product and sales team for each of these order.",
        "hint": "all the orders from WARE-NMK1003 refer to OrderNumber where WarehouseCode = 'WARE-NMK1003'; product refers to Product Name;",
        "error_sql": "SELECT T1.OrderNumber, T3.`Product Name`, T4.`Sales Team` \nFROM `Sales Orders` AS T1 \nINNER JOIN Products AS T3 \nON T1._ProductID = T3.ProductID \nINNER JOIN `Sales Team` AS T4 \nON T1._SalesTeamID = T4.SalesTeamID \nWHERE T1.WarehouseCode = 'WARE-NMK1003'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table aliases (e.g., T1, T2, T3) are consistent across the entire query. In the Error SQL Query and SQL after Reflection, the aliases for the Products table were T3 and T2, respectively, but the correct alias should be T2 to maintain consistency. Additionally, the query should select the Product Name and Sales Team, not the OrderNumber, as per the problem statement.",
        "ground_truth_sql": "SELECT DISTINCT T1.`Product Name`, T3.`Sales Team` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.WarehouseCode = 'WARE-NMK1003'",
        "difficulty": ""
    },
    {
        "question": "How many servings does the recipe with the highest unsaturated fat have?",
        "hint": "with the highest unsaturated fat refers MAX(SUBTRACT(total_fat, sat_fat))",
        "error_sql": "SELECT T1.servings FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY (T2.total_fat - T2.sat_fat) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, it's essential to carefully read and understand the question. In this case, the question asks for the number of servings, but the provided Ground Truth SQL is incorrect. The correct interpretation is that the question asks for the number of servings of the recipe with the highest unsaturated fat, not the count of recipes. Therefore, the correct SQL query should return the servings column from the Recipe table, not the count of titles. Additionally, the correct calculation for unsaturated fat is indeed MAX(total_fat - sat_fat), but the question asks for the number of servings, not the maximum unsaturated fat value. The correct SQL query should be:\n\n```sql\nSELECT T1.servings FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat - T2.sat_fat DESC LIMIT 1\n```\n\nHowever, this query is still not entirely correct. The correct query should be:\n\n```sql\nSELECT T1.servings FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat - T2.sat_fat DESC LIMIT 1\n```\n\nis actually correct, the issue was with the Ground Truth SQL provided. The correct Tip is to always double-check the question and the provided Ground Truth SQL to ensure that the interpretation is correct.",
        "ground_truth_sql": "SELECT COUNT(T1.title) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat - T2.sat_fat DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the total trip duration made within Palo Alto city? Convert the duration to hour.",
        "hint": "total trip duration to hour = DIVIDE(SUM(duration), 3600);",
        "error_sql": "SELECT SUM(T1.duration) / 3600 FROM trip AS T1 INNER JOIN station AS T2 ON T1.start_station_id = T2.id WHERE T2.city = 'Palo Alto'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join condition is correct and considers the actual relationship between the tables. In this case, the initial query joined on `start_station_id`, but the correct join condition is on `start_station_name` because the `trip` table does not have a direct foreign key reference to the `station` table's `id` column. Additionally, using `LEFT JOIN` instead of `INNER JOIN` ensures that all trips starting in Palo Alto are included, even if there is no matching station in the `station` table.",
        "ground_truth_sql": "SELECT CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'",
        "difficulty": ""
    },
    {
        "question": "Which country has the lowest percentage of arable land?",
        "hint": "which country refers to countryname; the lowest percentage of arable land refers to min(value where indicatorname = 'Arable land (% of land area)')",
        "error_sql": "SELECT CountryName FROM Indicators WHERE IndicatorName = 'Arable land (% of land area)' ORDER BY Value ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen dealing with queries that involve finding the minimum or maximum value, it's essential to consider the context of the data. In this case, the query is looking for the country with the lowest percentage of arable land. The mistake in the initial queries was in the ORDER BY clause, where it was sorting in ascending order (ASC) instead of descending order (DESC). This is because the lowest percentage would be the smallest value, and sorting in ascending order would return the country with the highest percentage. To avoid this mistake, always consider the context of the data and the desired outcome, and adjust the ORDER BY clause accordingly. Additionally, using LIKE instead of = for the IndicatorName can help to account for any slight variations in the indicator name.",
        "ground_truth_sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'Arable land (% of land area)' ORDER BY Value DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Calculate the average runs scored during the first half of all first innings.",
        "hint": "first half refers to 1 < Over_Id and Over_Id < 25; average = divide(sum(Over_Id) when 1 < Over_Id and Over_Id < 25, sum(Runs_Scored)) as percentage; first innings refers to Innings_No = 1",
        "error_sql": "SELECT CAST(SUM(CASE WHEN Over_Id BETWEEN 1 AND 25 THEN Runs_Scored ELSE 0 END) AS REAL) / SUM(Runs_Scored) FROM Batsman_Scored WHERE Innings_No = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen calculating averages or percentages, ensure that you are dividing by the correct denominator. In this case, the mistake was dividing by the total runs scored (SUM(Runs_Scored)) instead of the total number of overs in the first half (COUNT(CASE WHEN 1 < Over_Id AND Over_Id < 25 THEN 1 ELSE NULL END)). To avoid this mistake, carefully consider what you are trying to calculate and ensure that your denominator accurately reflects the total number of units being averaged or the total number of occurrences being considered.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN 1 < Over_Id AND Over_Id < 25 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(Runs_Scored) FROM Batsman_Scored WHERE Innings_No = 1",
        "difficulty": ""
    },
    {
        "question": "Which 1,000,000,000+ intalls apps has the most no comment reviews?",
        "hint": "no comment refers to Translated_Review = 'nan'; most no comment reviews = (MAX(COUNT(Translated_Review = 'nan')));",
        "error_sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '1,000,000,000+' GROUP BY T1.App ORDER BY COUNT(CASE WHEN T2.Translated_Review = 'nan' THEN 1 END) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and filtering for a specific condition in one of the tables, ensure that the condition is applied before the join operation to avoid incorrect results. In this case, the condition `T2.Translated_Review = 'nan'` should be applied in the `WHERE` clause of a subquery on the `user_reviews` table before joining it with the `playstore` table. Additionally, be careful with the `Installs` value, as it seems there was a typo in the original query ('1,000,000,000+' instead of '1,000,000+').",
        "ground_truth_sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '1,000,000+' AND T2.Translated_Review = 'nan' GROUP BY T1.App ORDER BY COUNT(T2.Translated_Review) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many shipments were shipped to the most densely populated city?",
        "hint": "most densely populated city refers to Max(Divide(area, population))",
        "error_sql": "SELECT COUNT(T2.ship_id) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.area / T1.population = (SELECT MAX(area / population) FROM city)",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the maximum or minimum value of a calculated field (in this case, population density), it's generally more efficient and accurate to use ORDER BY and LIMIT instead of trying to join the table with a subquery that calculates the maximum or minimum value. This is because the subquery approach can be prone to errors if there are multiple rows with the same maximum or minimum value, or if the calculated field is not unique. By using ORDER BY and LIMIT, you can ensure that you get the correct result even in these edge cases. Additionally, this approach can also be more efficient because it avoids the need for a subquery.",
        "ground_truth_sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area / T2.population DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the area of Egypt as a percentage of Asia?",
        "hint": "",
        "error_sql": "SELECT CAST(T1.Area AS REAL) * 100 / T3.Area \nFROM country AS T1 \nINNER JOIN encompasses AS T2 ON T1.Code = T2.Country \nINNER JOIN continent AS T3 ON T2.Continent = T3.Name \nWHERE T1.Name = 'Egypt'",
        "compiler_hint": "no such column: T1.Continent",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join is performed on the correct columns and that these columns exist in the tables being joined. In this case, the error occurred because the `country` table does not have a `Continent` column, but instead, the `encompasses` table has a `Continent` column which should be joined with the `continent` table. Additionally, the `encompasses` table has a `Country` column which should be joined with the `country` table using the `Code` column.",
        "ground_truth_sql": "SELECT T2.Percentage FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent WHERE T3.Name = 'Asia' AND T1.Name = 'Egypt'",
        "difficulty": ""
    },
    {
        "question": "How many users with a long tip and 2 likes for their tip have a high number of fans?",
        "hint": "long tip refers to tip_length = 'Long'; 2 likes refers to likes = 2; high number of fans refers to user_fans = 'High'",
        "error_sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T2.tip_length = 'Long' AND T2.likes = 2 AND T1.user_fans = 'High'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and counting distinct values, always consider whether the join operation could result in duplicate rows. In this case, a user could have multiple tips with the same characteristics, resulting in duplicate rows when joining the Users and Tips tables. To avoid this, use the DISTINCT keyword when counting to ensure that each user is only counted once.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T2.tip_length = 'Long' AND T2.likes = 2 AND T1.user_fans = 'High'",
        "difficulty": ""
    },
    {
        "question": "List out the stop date of the care plan of dead patients.",
        "hint": "stop date of the care plan refers to careplans.STOP; dead patients refers to deathdate is not null;",
        "error_sql": "SELECT T2.STOP FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.deathdate IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table with the column of interest (in this case, careplans.STOP) is the primary table in the FROM clause, and the other table (patients) is the secondary table in the JOIN clause. This is because the primary table's columns are being selected, and the secondary table is being used to filter the results. In this case, the correct SQL query should start with \"SELECT DISTINCT T1.STOP FROM careplans AS T1\" instead of \"SELECT T2.STOP FROM patients AS T1\".",
        "ground_truth_sql": "SELECT DISTINCT T1.STOP FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL AND T1.STOP IS NOT NULL",
        "difficulty": ""
    },
    {
        "question": "Calculate the average duration of absense of female students.",
        "hint": "average duration = DIVIDE(SUM(month), COUNT(longest_absence_from_school.name which are NOT in male.name)); female students refers to longest_absence_from_school.name who are NOT in male.name;",
        "error_sql": "SELECT CAST(SUM(IIF(T1.name NOT IN (SELECT name FROM male), T1.month, 0)) AS REAL) / COUNT(T1.name) FROM longest_absense_from_school AS T1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the average value of a specific group, consider using the AVG() function directly on the filtered group instead of manually summing and counting the values. This approach can simplify the query and reduce the chance of errors. Additionally, use LEFT JOIN and WHERE clause to filter out the unwanted group (in this case, male students) instead of using IIF() or NOT IN() to conditionally sum the values.",
        "ground_truth_sql": "SELECT AVG(T2.month) FROM person AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL",
        "difficulty": ""
    },
    {
        "question": "How many trains with fully loaded head cars are running east?",
        "hint": "fully loaded refers to load_num = 3; head cars refers to position = 1",
        "error_sql": "SELECT COUNT(T2.id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3 AND T2.direction = 'east'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen counting distinct entities, consider the table that directly contains the entity you want to count. In this case, the entity is 'trains', and it's directly contained in the 'cars' table through the 'train_id' foreign key. Therefore, counting distinct 'train_id' from the 'cars' table is more accurate than counting distinct 'id' from the 'trains' table. Additionally, since the 'direction' of the train is already filtered in the 'trains' table, there's no need to include it in the count query.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3",
        "difficulty": ""
    },
    {
        "question": "Find and list the full name of customers who bought products above-average quantity.",
        "hint": "full name of the customer = FirstName, MiddleInitial, LastName; above-average quantity = Quantity > AVG(Quantity);",
        "error_sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName \nFROM Customers AS T1 \nINNER JOIN Sales AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.Quantity > (SELECT AVG(Quantity) FROM Sales)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen comparing a value to an aggregate function result, ensure that the comparison is done at the correct level of granularity. In this case, the comparison should be done at the individual sale level, not at the customer level. The original query was incorrect because it compared the average quantity across all sales to the quantity of each individual sale, which is not the correct interpretation of \"above-average quantity\". The second query was also incorrect because it compared the sum of quantities for each customer to the average quantity across all sales, which is still not the correct interpretation. The correct query should compare each individual sale's quantity to the average quantity across all sales, and then return the customers who have made such sales.",
        "ground_truth_sql": "SELECT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Quantity HAVING T1.Quantity > ( SELECT AVG(Quantity) FROM Sales )",
        "difficulty": ""
    },
    {
        "question": "Which indicator name uses the Weighted average method and has the lowest value?",
        "hint": "AggregationMethod = 'Weighted average'; the lowest value implies MIN(Value);",
        "error_sql": "SELECT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorCode = T2.SeriesCode WHERE T2.AggregationMethod = 'Weighted average' ORDER BY T1.Value ASC LIMIT 1",
        "compiler_hint": "ambiguous column name: IndicatorName",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the column names are unique or properly qualified with the table alias. In this case, the join condition should be based on the IndicatorName instead of IndicatorCode, and the MIN function should be used with the GROUP BY clause to get the correct result. Additionally, the LIMIT clause is not necessary when using the MIN function.",
        "ground_truth_sql": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'",
        "difficulty": ""
    },
    {
        "question": "What is the reason for sales order \"51883\"?",
        "hint": "reason means the category of sales reason which refers to ReasonType",
        "error_sql": "SELECT T3.ReasonType FROM SalesOrderHeader AS T1 INNER JOIN SalesOrderHeaderSalesReason AS T2 ON T1.SalesOrderID = T2.SalesOrderID INNER JOIN SalesReason AS T3 ON T2.SalesReasonID = T3.SalesReasonID WHERE T1.SalesOrderNumber = 'SO51883'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the correct columns are being selected. In this case, the error was in the join condition of the first query, where it was joining on SalesOrderNumber instead of SalesOrderID. Additionally, the correct column to select is the Name column from the SalesReason table, not the ReasonType column. To avoid this mistake, double-check the table schema and the join conditions to ensure they are correct.",
        "ground_truth_sql": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 51883",
        "difficulty": ""
    },
    {
        "question": "Find the average ride duration during the rain of more than 0.8 inches.",
        "hint": "rain of more than 0.8 inches refers to events = rain where precipitation_inches>0.8; average ride duration = DIVIDE(SUM(duration), COUNT(duration));",
        "error_sql": "SELECT CAST(SUM(T1.duration) AS REAL) / COUNT(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Rain' AND CAST(REPLACE(T2.precipitation_inches, '\"', '') AS REAL) > 0.8",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the data types of the columns being joined are compatible. In this case, the `zip_code` column in the `trip` table is an integer, while in the `weather` table it's a text. To avoid this mistake, always check the data types of the columns being joined and perform any necessary conversions. Additionally, when comparing string values, consider using case-insensitive comparisons or converting both values to the same case to avoid missing matches due to case differences.",
        "ground_truth_sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE (T2.events = 'Rain' AND T2.precipitation_inches > 0.8) OR (T2.events = 'rain' AND T2.precipitation_inches > 0.8)",
        "difficulty": ""
    },
    {
        "question": "Between 1/1/2010 to 12/31/2020, how many users, who were a trialist when they created the list, gave the movie \"The Secret Life of Words\" a rating score of 3?",
        "hint": "Between 1/1/2010 to 12/31/2020 refers to rating_timestamp_utc between '2010-01-01%' and '2020-12-31%'; a trialist refers to user_trialist = 1; movie \"The Secret Life of Words\" refers to movie_title = 'The Secret Life of Words'; rating score of 3 refers to rating_score = 3",
        "error_sql": "SELECT COUNT(T4.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T2.user_id = T3.user_id INNER JOIN ratings_users AS T4 ON T3.user_id = T4.user_id WHERE T1.movie_title = 'The Secret Life of Words' AND T2.rating_score = 3 AND T3.user_trialist = 1 AND T2.rating_timestamp_utc BETWEEN '2010-01-01%' AND '2020-12-31%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, carefully consider the relationships between the tables and the columns used in the join conditions. In this case, the error was caused by joining `lists_users` and `ratings_users` tables, which was unnecessary and incorrect. The correct approach is to join `ratings` with `movies` and use the `user_trialist` column from the `ratings` table directly. Additionally, be mindful of the column names and their corresponding tables to avoid incorrect joins and conditions.",
        "ground_truth_sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'The Secret Life of Words' AND T1.rating_score = 3 AND T1.user_trialist = 0 AND T1.rating_timestamp_utc BETWEEN '2010%' AND '2020%'",
        "difficulty": ""
    },
    {
        "question": "Provide the full address of Ursola Purdy.",
        "hint": "full address refers to street_number, street_name, city, country_name",
        "error_sql": "SELECT T3.street_number, T3.street_name, T3.city, T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and consistent. In this case, the error was in the join condition between the `address` table and the `country` table. The correct join condition should be `T4.country_id = T3.country_id` instead of `T3.country_id = T4.country_id`. Additionally, the `country_name` column should be selected from the `country` table, not the `address` table. To avoid making the same mistake in the future, double-check the join conditions and the columns being selected to ensure they are correct and consistent with the database schema.",
        "ground_truth_sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'",
        "difficulty": ""
    },
    {
        "question": "Which were the trips that started at Mountain View City Hall and ended on a rainy day?",
        "hint": "started at refers to start_station_name; start_station_name = 'Mountain View City Hall'; ended on a rainy day refers to end_date where events = 'rain';",
        "error_sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.date = T1.end_date WHERE T1.start_station_name = 'Mountain View City Hall' AND T2.events = 'Rain'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the join condition is correct and complete. In this case, the initial error was due to missing the zip_code condition in the join, which was later corrected. However, the corrected query still had an unnecessary condition in the join clause (T2.date = T1.end_date). The correct join condition should only include the zip_code, as the date condition is already covered in the WHERE clause. Additionally, the join type (INNER JOIN) should be used with caution, as it may exclude trips that do not have a matching weather record. Consider using LEFT JOIN or FULL OUTER JOIN if necessary.",
        "ground_truth_sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 WHERE T2.events = 'Rain' AND T1.start_station_name = 'Mountain View City Hall'",
        "difficulty": ""
    },
    {
        "question": "Provide the github address with the summary of method \"A test for Decompose\n\".",
        "hint": "github address refers to Url; summary of method refers to Summary; Summary = 'A test for Decompose';",
        "error_sql": "SELECT T1.Url, T3.Summary FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the selected columns are correctly matched with the corresponding tables. In this case, the Error SQL Query incorrectly included T3.Summary in the SELECT statement, which was not requested in the problem statement. The SQL after Reflection was correct, but it's essential to double-check the problem statement to ensure that all requested columns are included. To avoid this mistake, carefully read the problem statement and verify that the selected columns match the requested information.",
        "ground_truth_sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'",
        "difficulty": ""
    },
    {
        "question": "How many likes did short comment left by users who joined in 2010 get?",
        "hint": "short comment refers to tip_length = 'Short'; users who joined in 2010 refer to user_id where user_yelping_since_year = 2010;",
        "error_sql": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010 AND T2.tip_length = 'Short'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and applying filters, ensure that all conditions are correctly specified. In this case, the error was not in the SQL query itself, but rather in the interpretation of the question. The question asks for the total likes of short comments left by users who joined in 2010, but the provided SQL query only filters for users who joined in 2010, without considering the tip_length condition. However, the Ground Truth SQL provided also does not filter for tip_length = 'Short'. To correctly answer the question, the filter for tip_length = 'Short' should be included in the WHERE clause. The correct SQL query should be:\n\nSELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010 AND T2.tip_length = 'Short'\n\nThe tip is to carefully read and understand the question, and ensure that all conditions are correctly specified in the SQL query.",
        "ground_truth_sql": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010",
        "difficulty": ""
    },
    {
        "question": "In which streets of the city of San Francisco are there restaurants that serve seafood?",
        "hint": "street refers to street_name; seafood refers to food_type = 'seafood'",
        "error_sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T1.city = T3.city WHERE T2.food_type = 'seafood' AND T3.city = 'San Francisco'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join conditions are correct and consider the case sensitivity of the data. In this case, the city name 'San Francisco' should be in lowercase 'san francisco' to match the data in the table. Also, the join with the geographic table is unnecessary as the city information is already available in the generalinfo table. Additionally, the condition to check for 'seafood' should be case-insensitive to handle different cases in the data.",
        "ground_truth_sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T2.food_type = 'seafood' AND street_name IS NOT NULL",
        "difficulty": ""
    },
    {
        "question": "Describe the product names delivered in 2021 for the customer \"Sundial\".",
        "hint": "delivered in 2021 refer to DeliveryDate LIKE '%/21'; 'Sundial' is the Customer Names",
        "error_sql": "SELECT DISTINCT T3.`Product Name` FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T1.`Customer Names` = 'Sundial' AND T2.DeliveryDate LIKE '%/21'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using the LIKE operator with a date format, consider the actual format of the date in the database. In this case, the date format is 'MM/DD/YY', so the correct pattern should be '%/%/21' instead of '%/21'. Additionally, when filtering data based on multiple conditions, consider using a subquery or a CASE statement to ensure that the conditions are applied correctly and to avoid returning NULL values.",
        "ground_truth_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.DeliveryDate LIKE '%/%/21' AND T1.`Customer Names` = 'Sundial ' THEN T3.`Product Name` END AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL",
        "difficulty": ""
    },
    {
        "question": "How many players did not get more than 10 steals between the years 2000 and 2005?",
        "hint": "did not get more than 10 steals refers to count(steals) < = 10; between the years 2000 and 2005 refers to season_id between 2000 and 2005",
        "error_sql": "SELECT COUNT(T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id BETWEEN 2000 AND 2005 AND T2.steals <= 10",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, consider whether the join is necessary and whether it might cause duplicate counts. In this case, joining the `players` table is unnecessary because the `player_allstar` table already contains the `playerID` column. Additionally, joining the tables could potentially cause duplicate counts if a player has multiple entries in the `players` table. To avoid this mistake, carefully consider the schema of the tables involved and whether a join is truly necessary to answer the question.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE season_id BETWEEN 2000 AND 2005 AND steals <= 10",
        "difficulty": ""
    },
    {
        "question": "Among the products that have a retail price greater than 1,000, how many products were shipped via ship?",
        "hint": "products refer to l_partkey; retail price greater than 1,000 refers to p_retailprice > 1000; shipped via ship refers to l_shipmode = 'SHIP';",
        "error_sql": "SELECT COUNT(T1.l_partkey) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_retailprice > 1000 AND T1.l_shipmode = 'SHIP'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions are correct and that the correct tables are being joined. In this case, the error was due to the fact that the `partsupp` table was not being joined, which is necessary to link the `part` table to the `lineitem` table. Additionally, the join condition should be based on the correct columns, in this case, `ps_suppkey` and `l_suppkey`, as well as `ps_partkey` and `p_partkey`. Always carefully review the schema and the join conditions to ensure that the query is correct.",
        "ground_truth_sql": "SELECT COUNT(T1.ps_suppkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_retailprice > 1000 AND T2.l_shipmode = 'SHIP'",
        "difficulty": ""
    },
    {
        "question": "How many category id have low review count and rating more than 2?",
        "hint": "rating more than 2 refers to stars > 2;",
        "error_sql": "SELECT COUNT(T1.category_id) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.review_count = 'Low' AND T2.stars > 2",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join is performed on the correct columns and that the correct tables are being joined. In this case, the error was due to joining Business_Categories with Business on the wrong column (category_id instead of business_id) and not including the Categories table in the join. To avoid this mistake, carefully review the schema and ensure that the joins are correct and that all necessary tables are included. Additionally, use the DISTINCT keyword when counting to avoid counting duplicate values.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.review_count = 'Low' AND T3.stars > 2",
        "difficulty": ""
    },
    {
        "question": "When was the birthday for the goalie who had most goal againsts in 1965 season?",
        "hint": "Birthday refers to CONCAT(birthYear / birthMon / birthDate);most goal against refers to MAX(GA);1965 season refers to year = '1965'\n\n",
        "error_sql": "SELECT CONCAT(T1.birthYear, '/', T1.birthMon, '/', T1.birthDay) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = '1965' ORDER BY T2.GA DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the maximum or minimum value of a column, it's better to use a subquery to first find the maximum or minimum value, and then use that value to filter the results. This is because using ORDER BY and LIMIT can return incorrect results if there are multiple rows with the same maximum or minimum value. In this case, the Error SQL Query was trying to find the goalie with the most goals against in the 1965 season, but it was using ORDER BY and LIMIT, which could return an incorrect result if there were multiple goalies with the same number of goals against. The SQL after Reflection was closer to the correct solution, but it was still not correct because it was using a subquery to find the maximum number of goals against, but it was not considering the case where there are multiple goalies with the same number of goals against. The Ground Truth SQL is the correct solution because it is using ORDER BY and LIMIT to find the goalie with the most goals against, and it is not using a subquery to find the maximum number of goals against.",
        "ground_truth_sql": "SELECT T1.birthYear, T1.birthMon, birthDay FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1965 ORDER BY T2.GA DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Calculate the percentage of pages that have 1500 different words.",
        "hint": "DIVIDE(COUNT(pages WHERE words = 1500), COUNT(pages)) as percentage;",
        "error_sql": "SELECT CAST(SUM(IIF(T1.words = 1500, 1, 0)) AS REAL) * 100 / COUNT(T1.pid) FROM pages AS T1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages, ensure that the numerator and denominator are correctly defined. In this case, the numerator should count the number of pages with 1500 words, and the denominator should count the total number of pages. Also, be careful with the column names used in the query, as they should match the actual column names in the table. In the Error SQL Query and SQL after Reflection, the column name 'pid' was used in the denominator, which is incorrect. The correct column name to use is 'page'. Additionally, the LIMIT clause should be used with caution, as it can affect the accuracy of the result. In this case, the LIMIT clause was used incorrectly, which would have returned an incorrect result.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN words = 1500 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(page) FROM pages WHERE words > 300 LIMIT 3",
        "difficulty": ""
    },
    {
        "question": "For the state which has the 113 2-year public schools, tell the number of graduated Asian students who seeks another type of degree or certificate at a 2-year institution in 2013.",
        "hint": "schools_count = 113; 2-year refers to level = '2-year'; public refers to control = 'public'; Asian refers to race = 'A'; seeks another type of degree or certificate at a 2-year institution refers to cohort = '2y all'; in 2013 refers to year = 2013;",
        "error_sql": "SELECT COUNT(T1.grad_cohort) FROM state_sector_grads AS T1 INNER JOIN state_sector_details AS T2 ON T1.state = T2.state WHERE T2.level = '2-year' AND T2.control = 'Public' AND T2.schools_count = 113 AND T1.race = 'A' AND T1.cohort = '2y all' AND T1.year = 2013",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the correct columns are being referenced. In this case, the initial error was due to joining on the 'state' column instead of the 'stateid' column, which is the correct foreign key. Additionally, the initial query was counting from the wrong table (T1 instead of T2). The second query still had errors due to referencing the wrong table for the 'level' and 'control' columns. To avoid such mistakes, double-check the table schema and the join conditions to ensure that they are correct.",
        "ground_truth_sql": "SELECT COUNT(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.level = '2-year' AND T2.control = 'Public' AND T2.gender = 'B' AND T2.race = 'A' AND T2.cohort = '2y all' AND T1.schools_count = 113",
        "difficulty": ""
    },
    {
        "question": "Please list the emails of the clients whose complaint date received is 7/3/2014.",
        "hint": "7/3/2014 refers to Date received = '2014-07-03'",
        "error_sql": "SELECT T2.email FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.`rand client` = T2.client_id WHERE T1.`Date received` = '2014-07-03'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and the columns being referenced are from the correct tables. In this case, the error was in the join condition and the column being referenced. The correct join should be between the 'client' table and the 'events' table, not the 'callcenterlogs' table, and the column 'Date received' should be referenced from the 'events' table, not the 'callcenterlogs' table. Additionally, the alias 'T2' was incorrectly assigned to the 'events' table, when it should have been assigned to the 'client' table. To avoid this mistake, carefully review the schema and the relationships between tables before writing the SQL query.",
        "ground_truth_sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2014-07-03'",
        "difficulty": ""
    },
    {
        "question": "How many donations from teachers were done in the state of Colorado?",
        "hint": "from teachers refers to is_teacher_acct = 't'; the state of Colorado refers to donor_state = 'CO-Colorado'",
        "error_sql": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO-Colorado'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen filtering data based on a specific state, ensure that the state abbreviation is used correctly. In this case, the correct abbreviation for Colorado is 'CO', not 'CO-Colorado'. The latter is likely a full name or description of the state, which may not match the actual data in the 'donor_state' column. Always verify the data format and content to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO'",
        "difficulty": ""
    },
    {
        "question": "Who are the top 8 suppliers supplying the products with the highest user satisfaction?",
        "hint": "highest user satisfaction refers to max(ReorderLevel);",
        "error_sql": "SELECT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID ORDER BY T2.ReorderLevel DESC LIMIT 8",
        "compiler_hint": "no such column: T2.ReorderLevel",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column names and table aliases are correctly referenced. In this case, the error occurred because the column 'ReorderLevel' does not exist in the 'Products' table, and the table aliases were swapped in the 'SELECT' and 'JOIN' clauses. To avoid this mistake, double-check the table schema and ensure that the column names and table aliases are correctly referenced in the SQL query. Additionally, verify that the column 'ReorderLevel' actually exists in the 'Products' table, as it is not present in the provided schema.",
        "ground_truth_sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID ORDER BY T1.ReorderLevel DESC LIMIT 8",
        "difficulty": ""
    },
    {
        "question": "How many users, between the age 27 to 35, were surveyed in 2018?",
        "hint": "Age 27 to 35 refer to AnswerText 27 BETWEEN 35 where questionid = 1; 2018 refer to SurveyID\n\n",
        "error_sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID INNER JOIN Question AS T3 ON T1.QuestionID = T3.QuestionID WHERE T3.questionid = 1 AND T1.AnswerText BETWEEN 27 AND 35 AND T2.Description = '2018'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and the columns being joined are of the same data type. In the Error SQL Query, the join condition for the Question table was incorrect (T1.QuestionID = T3.QuestionID should be T1.QuestionID = T3.questionid). Additionally, when using the BETWEEN operator, ensure that the data types of the values being compared are consistent. In this case, the AnswerText column is of type TEXT, so the values '27' and '35' should be enclosed in single quotes. Furthermore, the SurveyID in the Ground Truth SQL is an integer, so the correct query should filter by SurveyID = 2018, not by Description = '2018'.",
        "ground_truth_sql": "SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2018 AND T2.questionid = 1 AND T1.AnswerText BETWEEN '27' AND '35'",
        "difficulty": ""
    },
    {
        "question": "List the territory IDs, description and region description under the in-charge of Mrs. Margaret Peacock.",
        "hint": "",
        "error_sql": "SELECT T2.TerritoryID, T2.TerritoryDescription, T3.RegionDescription \nFROM Employees AS T1 \nINNER JOIN EmployeeTerritories AS T2 \nON T1.EmployeeID = T2.EmployeeID \nINNER JOIN Region AS T3 \nON T2.RegionID = T3.RegionID \nWHERE T1.FirstName = 'Margaret' AND T1.LastName = 'Peacock'",
        "compiler_hint": "no such table: EmployeeTerritories",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table names and column names match the actual schema of the database. In this case, the error occurred because the tables 'EmployeeTerritories' and 'Region' were not present in the original schema provided. However, upon closer inspection, it appears that the correct schema does contain these tables, but they were not included in the original schema provided. To avoid this mistake, always verify the schema of the database before generating SQL queries. Additionally, be aware of the actual relationships between tables and the correct column names to join them.",
        "ground_truth_sql": "SELECT T3.TerritoryID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.TitleOfCourtesy = 'Mrs.' AND T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret'",
        "difficulty": ""
    },
    {
        "question": "Count the total venues located in Pune City.",
        "hint": "Pune City refers to City_Name = 'Pune'",
        "error_sql": "SELECT COUNT(Venue_Id) FROM Venue WHERE City_Id IN ( SELECT City_Id FROM City WHERE City_Name = 'Pune' )",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen counting the number of rows that match a certain condition, use the COUNT() function with a column that is guaranteed to be non-null, such as the primary key or a column that is defined as NOT NULL. In this case, the error SQL query and SQL after reflection are correct, but the ground truth SQL is incorrect because it is trying to sum the Venue_Name column, which is a string, instead of counting the number of rows. The correct SQL query should be:\n\n```sql\nSELECT COUNT(Venue_Id) FROM Venue WHERE City_Id IN ( SELECT City_Id FROM City WHERE City_Name = 'Pune' )\n```\n\nOr, using a JOIN:\n\n```sql\nSELECT COUNT(V1.Venue_Id) FROM Venue AS V1 INNER JOIN City AS C1 ON V1.City_Id = C1.City_Id WHERE C1.City_Name = 'Pune'\n```",
        "ground_truth_sql": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'",
        "difficulty": ""
    },
    {
        "question": "In 2010, which episode did Joel H. Cohen win an award for?",
        "hint": "In 2010 refers to year = 2010",
        "error_sql": "SELECT T1.episode_id FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person = T2.name WHERE T1.year = 2010 AND T2.name = 'Joel H. Cohen'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\n\nWhen joining tables, ensure that the join is performed on the correct columns and that the correct table is being joined. In this case, the initial error was joining the Award table with the Person table, but the question asked for the episode title, which is stored in the Episode table. Therefore, the correct join should be between the Award table and the Episode table. Additionally, the year column in the Award table is a string, so the correct way to compare it with the year 2010 is by using the SUBSTR function to extract the first 4 characters.",
        "ground_truth_sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2010' AND T1.person = 'Joel H. Cohen';",
        "difficulty": ""
    },
    {
        "question": "Which team did the MVP of 1997 NBA season play in?",
        "hint": "team refers to tmID; MVP refers to award like '%MVP'; 1997 refers to year = 1997; NBA refers to lgID = 'NBA'",
        "error_sql": "SELECT T2.tmID FROM awards_players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.award LIKE '%MVP' AND T1.year = 1997 AND T1.lgID = 'NBA'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, make sure to include all relevant tables and join conditions to avoid missing information. In this case, the `teams` table was missing, and the `award` condition was not specific enough, leading to incorrect results. Additionally, when searching for a specific award, use the exact award name instead of a wildcard to ensure accuracy.",
        "ground_truth_sql": "SELECT DISTINCT T3.tmID FROM players_teams AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T2.year = 1997 AND T2.award = 'Finals MVP' LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many awards did simpson 20 won in 2009?",
        "hint": "won refers to result = 'Winner'; in 2009 refers to year = 2009",
        "error_sql": "SELECT COUNT(T1.award_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Winner' AND SUBSTR(T1.year, 1, 4) = '2009' AND T2.title = 'Simpsons 20'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, carefully consider whether the join is necessary to answer the question. In this case, the join with the Episode table is unnecessary because the Award table already contains the year and result information needed to answer the question. The join with the Episode table was likely added to filter by episode title, but this filter is not actually needed to answer the question about the number of awards won in 2009.",
        "ground_truth_sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009' AND result = 'Winner';",
        "difficulty": ""
    },
    {
        "question": "How many shipments were shipped by the driver named Zachary Hicks?",
        "hint": "",
        "error_sql": "SELECT COUNT(T2.ship_id) FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id WHERE T1.first_name = 'Zachary' AND T1.last_name = 'Hicks'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names in the SELECT and WHERE clauses match the table aliases used in the JOIN clause. In this case, the Error SQL Query and SQL after Reflection were incorrect because they used the wrong table alias in the COUNT() function and WHERE clause, respectively. To avoid this mistake, double-check that the table aliases are consistent throughout the query. Additionally, when using a specific driver_id in the WHERE clause, as in the Ground Truth SQL, it is more efficient and accurate than using the driver's name, as names can be duplicated, but IDs are unique.",
        "ground_truth_sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.driver_id = 23",
        "difficulty": ""
    },
    {
        "question": "Which country was the source of Pjandsh River? Give the full name of the country.",
        "hint": "",
        "error_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN geo_source AS T2 ON T1.Code = T2.Country INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Pjandsh River'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and relevant to the query. In this case, the error SQL query joined the 'geo_source' table which is not necessary for the query. The correct join is between the 'country' table and the 'located' table, as the 'located' table contains the information about the river and its corresponding country. Always analyze the schema and the relationships between tables before writing a query.",
        "ground_truth_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country WHERE T2.River = 'Pjandsh'",
        "difficulty": ""
    },
    {
        "question": "Please list all the territories in the Eastern Region.",
        "hint": "territories refers to TerritoryDescription; Eastern Region refers to RegionDescription = 'Eastern';",
        "error_sql": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern'",
        "compiler_hint": "no such table: Region",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table with the filtering condition (in this case, RegionDescription = 'Eastern') is the one being referenced in the WHERE clause, and that the SELECT statement is retrieving columns from the correct table. Additionally, use DISTINCT to remove duplicate values when necessary, especially when joining tables with one-to-many relationships.",
        "ground_truth_sql": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'",
        "difficulty": ""
    },
    {
        "question": "Provide the directions for all the trains that have 2 or less cars.",
        "hint": "2 or less cars refers to trailPosi < = 2",
        "error_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1",
        "compiler_hint": "unrecognized token: \"#\"",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the join condition is correct and that the column names are correctly referenced. In this case, the error was due to the incorrect join condition and column references. To avoid this mistake, double-check the table schema and the join conditions to ensure that they are correct. Additionally, use table aliases consistently to avoid confusion.",
        "ground_truth_sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2",
        "difficulty": ""
    },
    {
        "question": "State the number of public magnet schools in New York Manhattan.",
        "hint": "public magnet school refers to school_magnet = 't'; in New York Manhattan refers to school_country = 'New York(Manhattan)';",
        "error_sql": "SELECT COUNT(school_magnet) FROM projects WHERE school_magnet = 't' AND school_city = 'New York(Manhattan)'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen filtering data based on location, ensure that the correct column is used. In this case, the error was using 'school_city' instead of 'school_county' to filter for 'New York(Manhattan)'. Always verify the column names and data types to avoid such mistakes. Additionally, when counting the number of rows, it's generally better to use COUNT(*) or COUNT(primary_key) instead of COUNT(column_name) to avoid potential issues with NULL values.",
        "ground_truth_sql": "SELECT COUNT(schoolid) FROM projects WHERE school_county = 'New York (Manhattan)' AND school_magnet = 't'",
        "difficulty": ""
    },
    {
        "question": "Among the employees who have more than 10 hours of sick leave, how many of them wish to receive e-mail promotions?",
        "hint": "Contact does wish to receive e-mail promotions refers to EmailPromotion = (1,2); more than 10 hours of sick leave refer to SickLeaveHours >10;",
        "error_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion IN (1, 2) AND T1.SickLeaveHours > 10",
        "compiler_hint": "no such column: EmailPromotion",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the WHERE clause are correctly referenced from the joined tables. In this case, the EmailPromotion column is in the Person table, not the Employee table, so it should be referenced as T2.EmailPromotion. Additionally, the condition for EmailPromotion should be T2.EmailPromotion = 1, not T2.EmailPromotion IN (1, 2), since the problem statement only asks for employees who wish to receive e-mail promotions, which is represented by EmailPromotion = 1.",
        "ground_truth_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10",
        "difficulty": ""
    },
    {
        "question": "Among the countries whose government type is republic, how many of them shares a border that's longer than 200?",
        "hint": "",
        "error_sql": "SELECT COUNT(T1.Country1) FROM borders AS T1 INNER JOIN politics AS T2 ON T1.Country1 = T2.Country WHERE T2.Government = 'republic' AND T1.Length > 200",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the correct columns are being referenced. In this case, the initial error was due to joining the 'politics' table with the 'borders' table on the 'Country' column, which is not present in the 'borders' table. The correct join condition is to join the 'country' table with the 'politics' table on the 'Code' column, and then join the 'borders' table with the 'country' table on the 'Code' column. Additionally, when counting the number of countries, use the 'Name' column from the 'country' table instead of the 'Country1' column from the 'borders' table to avoid counting duplicate borders.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Government = 'republic' AND T3.Length > 200",
        "difficulty": ""
    },
    {
        "question": "List out the name of the top 10 spenders and what credit card type are they using.",
        "hint": "top 10 spenders refers to MAX(PurchasePrice) LIMIT 10;",
        "error_sql": "SELECT T1.First, T1.Last, T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.PurchasePrice DESC LIMIT 10",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find the top spenders, it's essential to consider the total amount spent by each customer, not just the maximum purchase price. The initial query was incorrect because it only considered the maximum purchase price, which might not accurately represent the total spending. The second query was closer, but it still had a flaw. The correct approach is to group the transactions by customer, calculate the total purchase price for each customer, and then order the results by this total amount in descending order. Additionally, the credit card type might not be unique for each customer, so it's crucial to consider this when interpreting the results. To avoid similar mistakes in the future, always carefully analyze the problem and consider all relevant factors, including aggregation and grouping, when writing SQL queries.",
        "ground_truth_sql": "SELECT T1.First, T1.Last, T2.CreditCardType FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T2.PurchasePrice) DESC LIMIT 10",
        "difficulty": ""
    },
    {
        "question": "What is the name of the company that has the product with the highest unit price?",
        "hint": "name of the company refers to CompanyName; the highest unit price refers to MAX(UnitPrice)",
        "error_sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Price = ( SELECT MAX(Price) FROM Products )",
        "compiler_hint": "no such column: T2.CompanyName",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the column names in the WHERE clause and SELECT statement match the actual column names in the tables. In this case, the error occurred because the column name in the Suppliers table is actually 'SupplierName', not 'CompanyName', and the column name in the Products table is actually 'Price', not 'UnitPrice'. To avoid this mistake, double-check the column names in the table schema before writing the SQL query.",
        "ground_truth_sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )",
        "difficulty": ""
    },
    {
        "question": "Among the male legislators born between 1955 to 1965, what is the percentage of the legislators with an independent party?",
        "hint": "male refers to gender_bio = 'M'; born between 1955 to 1965 refers to strftime('%Y', birthday_bio) between '1955' and '1965'; percentage = MULTIPLY(DIVIDE(SUM(party = 'Independent' WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965'), COUNT(party WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965')), 100.0);",
        "error_sql": "SELECT CAST(SUM(IIF(T1.party = 'Independent' AND T2.gender_bio = 'M' AND strftime('%Y', T2.birthday_bio) BETWEEN '1955' AND '1965', 1, 0)) AS REAL) / COUNT(T1.party) * 100.0 FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id",
        "compiler_hint": "no such column: party",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the WHERE and SELECT clauses are correctly referenced from the joined tables. In this case, the 'party' column is in the 'current-terms' table, not the 'current' table. Therefore, the correct reference should be T2.party instead of just party. Additionally, when using aggregate functions like SUM and COUNT, ensure that the correct columns are being referenced and that the conditions in the CASE statement are correctly filtering the data.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.party = 'Independent' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.party) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND strftime('%Y', T1.birthday_bio) BETWEEN '1955' AND '1965'",
        "difficulty": ""
    },
    {
        "question": "Please list the team names which have at least 3 all-star players.",
        "hint": "team with at least 3 all star player refers to tmID where Count(player_allstar.playerID) > = 3",
        "error_sql": "SELECT T3.name FROM player_allstar AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year GROUP BY T3.name HAVING COUNT(T1.playerID) >= 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables and grouping by a column, ensure that the column used in the COUNT function is distinct to avoid counting duplicate values. Additionally, verify that the columns used in the JOIN and GROUP BY clauses are correct and relevant to the query's requirements. In this case, the error was in the COUNT function and the columns used in the JOIN and GROUP BY clauses. The correct query should count distinct playerIDs and group by the teamID, not the team name.",
        "ground_truth_sql": "SELECT T1.tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) >= 3",
        "difficulty": ""
    },
    {
        "question": "What is the user avatar url for user 41579158? What is the latest movie rated by him / her?",
        "hint": "user avatar url refers to user_avatar_image_url; latest movie rated refers to latest rating_date;",
        "error_sql": "SELECT T1.user_avatar_image_url, T3.movie_title FROM ratings_users AS T1 INNER JOIN ratings AS T2 ON T1.user_id = T2.user_id INNER JOIN movies AS T3 ON T2.movie_id = T3.movie_id WHERE T1.user_id = 41579158 ORDER BY T2.rating_timestamp_utc DESC LIMIT 1",
        "compiler_hint": "no such column: T2.movie_title",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the column names referenced in the SELECT and ORDER BY clauses match the actual column names in the joined tables. In this case, the error occurred because the column 'movie_title' was referenced from the wrong table alias 'T2' instead of 'T3'. To avoid this mistake, double-check the column names and their corresponding table aliases in the query. Additionally, verify that the joined tables are correctly referenced in the SELECT and ORDER BY clauses.",
        "ground_truth_sql": "SELECT T3.user_avatar_image_url, T3.rating_date_utc FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T3.user_id = T2.user_id WHERE T3.user_id = 41579158 ORDER BY T3.rating_date_utc DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the profit of the product with the highest list price and of the product with the lowest list price other than 0? Indicates the depth the component is from its parent.",
        "hint": "profit = subtract(ListPrice, StandardCost); the depth the component from its parent refers to BOMLevel;",
        "error_sql": "SELECT (T1.ListPrice - T1.StandardCost) AS Profit, T2.BOMLevel FROM Product AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.ProductID = T2.ComponentID WHERE T1.ListPrice = ( SELECT MAX(ListPrice) FROM Product ) OR T1.ListPrice = ( SELECT MIN(ListPrice) FROM Product WHERE ListPrice != 0 )",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join condition is correct and that the correct columns are being joined. In this case, the error was in the join condition, where the ProductID was being joined with the ComponentID instead of the ProductAssemblyID. Additionally, when using OR conditions, ensure that the conditions are correctly ordered and that the correct columns are being compared. In this case, the error was in the OR condition, where the ListPrice was being compared with the MAX and MIN ListPrice, but the BOMLevel was not being correctly retrieved. To avoid making the same mistake in the future, double-check the join conditions and OR conditions to ensure that they are correct and that the correct columns are being compared.",
        "ground_truth_sql": "SELECT ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice DESC LIMIT 1 ) , ( SELECT ListPrice - StandardCost FROM Product WHERE ListPrice != 0 ORDER BY ListPrice LIMIT 1 )",
        "difficulty": ""
    },
    {
        "question": "Among the root beer brands that do not advertise on Facebook and Twitter, which brand has the highest number of purchases?",
        "hint": "do not advertise on Facebook and Twitter refers to FacebookPage IS NULL AND Twitter IS NULL; highest number of purchases refers to MAX(COUNT(BrandID));",
        "error_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID WHERE T1.FacebookPage IS NULL AND T1.Twitter IS NULL GROUP BY T1.BrandID, T1.BrandName ORDER BY COUNT(T2.BrandID) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names and table aliases used in the SELECT, WHERE, GROUP BY, and ORDER BY clauses match the actual column names and table aliases used in the JOIN clause. In this case, the error occurred because the column name in the ORDER BY clause was incorrect. To avoid this mistake, double-check the column names and table aliases used in the query to ensure consistency. Additionally, when using aggregate functions like COUNT, make sure to count the correct column, which in this case should be the column from the table being joined (T1.BrandID), not the column from the table being queried (T1.RootBeerID or T2.BrandID).",
        "ground_truth_sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FacebookPage IS NULL AND T2.Twitter IS NULL GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the credit card number for Michelle E Cox?",
        "hint": "credit card number refers to CreditCardID",
        "error_sql": "SELECT T2.CardNumber FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'Michelle' AND T1.LastName = 'E Cox'",
        "compiler_hint": "no such column: T2.CardNumber",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names in the SELECT statement match the actual column names in the joined tables. In this case, the error occurred because the column name 'CardNumber' was referenced from the wrong table alias 'T2' instead of 'T3'. To avoid this mistake, double-check the column names and their corresponding table aliases in the SELECT statement.",
        "ground_truth_sql": "SELECT T3.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'Michelle' AND T1.MiddleName = 'E' AND T1.LastName = 'Cox'",
        "difficulty": ""
    },
    {
        "question": "How many Eredivisie teams have played in 2008?",
        "hint": "Eredivisie is the name of division; 2008 refers to season; teams refer to HomeTeam;",
        "error_sql": "SELECT COUNT(DISTINCT HomeTeam) FROM matchs WHERE season = 2008 AND Div = 'Eredivisie'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is based on the correct columns. In this case, the error SQL query directly used 'Eredivisie' in the WHERE clause with the Div column, which is incorrect because 'Eredivisie' is actually the value in the 'name' column of the 'divisions' table, not the 'division' column. The SQL after reflection correctly joins the 'matchs' table with the 'divisions' table on the 'Div' column and then filters by the 'name' column in the 'divisions' table.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Eredivisie' AND T1.season = 2008",
        "difficulty": ""
    },
    {
        "question": "How many movies did Wolfgang Reitherman direct?",
        "hint": "Wolfgang Reitherman refers director = 'Wolfgang Reitherman';",
        "error_sql": "SELECT COUNT(T1.movie_title) FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, make sure to join on a common column that exists in both tables. In this case, the join condition `T1.movie_title = T2.name` is incorrect because `T2.name` is actually the `movie_title` column from the `characters` table, not the `movie_title` column itself. However, since we only need to count the number of movies directed by Wolfgang Reitherman, we can simply query the `director` table without joining it with the `characters` table.",
        "ground_truth_sql": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'",
        "difficulty": ""
    },
    {
        "question": "Among all the residential areas in Delaware, how many of them implement daylight saving?",
        "hint": "\"Delaware\" is a county; implement daylight savings refers to daylight_saving = 'Yes'",
        "error_sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'Delaware' AND T1.daylight_savings = 'Yes'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is based on the correct columns that relate the two tables. In this case, the error was due to joining the 'state' column from 'zip_data' with the 'abbreviation' column from 'state', and then filtering by 'name' from 'state'. However, the correct join should be between 'zip_code' from 'zip_data' and 'zip_code' from 'country', and then filtering by 'county' from 'country'. Always verify the schema and relationships between tables to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'DELAWARE' AND T1.daylight_savings = 'Yes'",
        "difficulty": ""
    },
    {
        "question": "Which resource type is commonly bought by the Los Angeles Unified School District?",
        "hint": "resource type refer to project_resource_type; most commonly bought refer to COUNT(project_resource_type where school_district = \u2019Los Angeles Unif Sch Dist\u2019); Los Angeles Unified School District refer to school_district = \u2019Los Angeles Unif Sch Dist\u2019",
        "error_sql": "SELECT project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' GROUP BY T2.school_district ORDER BY COUNT(T1.project_resource_type) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen using GROUP BY and ORDER BY in SQL queries, ensure that the column used in GROUP BY is the same as the column used in the SELECT statement, especially when trying to find the most common value. In this case, the GROUP BY should be on T1.project_resource_type instead of T2.school_district, because we are trying to find the most common project_resource_type, not school_district.",
        "ground_truth_sql": "SELECT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' GROUP BY T2.school_district ORDER BY COUNT(T1.project_resource_type) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Calculate the average sales of \"\"Sharp AL-1530CS Digital Copier in the east and the west superstore.",
        "hint": "Sharp AL-1530CS Digital Copier' is the \"Product Name\"; average sales = AVG(Sales)",
        "error_sql": "SELECT AVG(T1.Sales) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T2.`Product Name` = 'Sharp AL-1530CS Digital Copier'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that you are joining on all necessary tables and columns to avoid missing data or incorrect results. In this case, the people table was not joined, which is necessary to ensure that the sales data is correctly linked to the product data. Additionally, when using UNION ALL, ensure that the queries are correctly structured to return the desired results. In this case, the correct query should join the west_superstore table with the people and product tables to get the correct average sales.",
        "ground_truth_sql": "SELECT AVG(T1.Sales) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` INNER JOIN product AS T3 ON T3.`Product ID` = T1.`Product ID` WHERE T3.`Product Name` = 'Sharp AL-1530CS Digital Copier'",
        "difficulty": ""
    },
    {
        "question": "Identify the percent of long reviews among all 5-star reviews given to businesses by the Yelp users.",
        "hint": "percentage = divide(count(business_id where review_length = 'Long' and review_stars = 5), count(business_id)) * 100%; long reviews refers to review_length = 'Long'; 5-star review refers to review_stars = 5",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.review_length = 'Long' AND T1.review_stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) FROM Reviews AS T1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen calculating percentages, ensure that the denominator is the total count of the specific group you're interested in, not the total count of a different column. In this case, the denominator should be the count of reviews with review_length, not the count of business_id. Additionally, apply filters (e.g., WHERE review_stars = 5) before calculating the percentage to ensure you're only considering the relevant data.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN review_length = 'Long' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(review_length) FROM Reviews WHERE review_stars = 5",
        "difficulty": ""
    },
    {
        "question": "Provide the contact person name, title and supplied products by \"Escargots Nouveaux\" company.",
        "hint": "\"Escargots Nouveaux\" company refers to CompanyName = 'Escargots Nouveaux';",
        "error_sql": "SELECT T3.ContactName, T3.Title, T2.ProductName FROM Products AS T2 INNER JOIN Suppliers AS T3 ON T2.SupplierID = T3.SupplierID WHERE T3.CompanyName = 'Escargots Nouveaux'",
        "compiler_hint": "no such column: T1.ContactName",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names and table aliases are correctly referenced. In this case, the error occurred because the column 'Title' does not exist in the 'Suppliers' table, and the correct column name is 'ContactTitle'. Additionally, the table aliases were incorrectly assigned, leading to incorrect column references. To avoid this mistake, double-check the table schema and column names before writing the SQL query, and ensure that the table aliases are correctly assigned to the corresponding tables.",
        "ground_truth_sql": "SELECT T2.ContactName, T2.ContactTitle, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'",
        "difficulty": ""
    },
    {
        "question": "What is the highest point highest point of Per Mars in the draft year?",
        "hint": "highest point in the draft year refers to MAX(P);",
        "error_sql": "SELECT MAX(T1.P) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Per Mars' AND T1.SEASON = T2.draftyear",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find the maximum or minimum value of a specific column, consider whether you need to return the entire row or just the maximum/minimum value. In this case, the goal was to find the highest point of 'Per Mars' in the draft year, which requires returning the entire row with the maximum point value, not just the maximum point value itself. To achieve this, use the ORDER BY and LIMIT clauses instead of the MAX function, which allows you to return the entire row with the desired value.",
        "ground_truth_sql": "SELECT T1.P FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Per Mars' ORDER BY T1.P DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "List the full name its capital of all the countries with parliamentary democracy government.",
        "hint": "Parliamentary democracy is a government form",
        "error_sql": "SELECT T1.Name, T1.Capital FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government = 'parliamentary democracy'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the selected columns match the query's requirements. In this case, the query asks for the \"full name\" of the country, but the provided SQL queries only select the \"Name\" or \"Capital\" of the country. To fix this, the correct SQL query should select both the \"Name\" and \"Capital\" of the country, or simply the \"Name\" if that is considered the full name. However, the correct interpretation is that the \"full name\" refers to the \"Name\" of the country, not the \"Capital\".",
        "ground_truth_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government = 'parliamentary democracy'",
        "difficulty": ""
    },
    {
        "question": "What is the average width and height of the objects in image ID 47? List their object classes as well.",
        "hint": "The bounding box's W and H abbreviations stand for the object's width and height in which average width and height refer to AVG(W) and AVG(H) respectively; image ID 47 refers to IMG_ID = 47; object classes refer to OBJ_CLASS;",
        "error_sql": "SELECT AVG(T1.W), AVG(T1.H), T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 47",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using aggregate functions like AVG() in SQL, make sure to include all non-aggregated columns in the GROUP BY clause to avoid errors. In this case, the OBJ_CLASS column was missing from the GROUP BY clause in the initial query, which would have resulted in an error. The corrected query includes OBJ_CLASS in the GROUP BY clause, ensuring that the AVG() function is applied correctly to each group of object classes.",
        "ground_truth_sql": "SELECT T2.OBJ_CLASS, AVG(T1.W), AVG(T1.H) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 47 GROUP BY T2.OBJ_CLASS",
        "difficulty": ""
    },
    {
        "question": "Please list the full names of all the customers who have rented the film with the highest replacement cost.",
        "hint": "full name refers to first_name, last_name; highest replacement cost refers to Max(replacement_cost)",
        "error_sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.replacement_cost = (SELECT MAX(replacement_cost) FROM film)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to retrieve data based on a maximum or minimum value, consider using ORDER BY and LIMIT instead of trying to match the exact value with a subquery. This is because the subquery may return multiple values if there are ties for the maximum or minimum, and the main query may not return all the desired results. By using ORDER BY and LIMIT, you can ensure that you get all the rows that have the maximum or minimum value.",
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id ORDER BY T4.replacement_cost DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the elite users of 10 consecutive year from 2005 to 2014, list down the user ID and their number of compliment on photos.",
        "hint": "from 2005 to 2014 refers to year_id BETWEEN 2005 AND 2014; compliment_type = 'photos';",
        "error_sql": "SELECT T1.user_id, COUNT(T3.compliment_id) FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Users_Compliments AS T3 ON T2.user_id = T3.user_id WHERE T3.compliment_id = ( SELECT compliment_id FROM Compliments WHERE compliment_type = 'photos' ) AND T1.year_id BETWEEN 2005 AND 2014",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order and conditions are correct. In this case, the error was due to incorrect join order and conditions. The correct join order should start with the Compliments table, then join with Users_Compliments, and finally join with Elite. Additionally, the condition for compliment_type should be applied to the Compliments table, not the Users_Compliments table. To avoid this mistake, carefully analyze the relationships between the tables and ensure that the join conditions are correct.",
        "ground_truth_sql": "SELECT T2.user_id, T2.number_of_compliments FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Elite AS T3 ON T2.user_id = T3.user_id WHERE T3.year_id BETWEEN 2005 AND 2014 AND T1.compliment_type = 'photos'",
        "difficulty": ""
    },
    {
        "question": "What are the teams that played in a match with the point of winning margin of 38 on April 30, 2009?",
        "hint": "point of winning margin of 38 refers to win_margin = 38; on April 30, 2009 refers to match_date = '2009-04-30'; team refers to Team_Name;",
        "error_sql": "SELECT T1.Team_Name, T2.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Team_Id = T2.Team_2 INNER JOIN Team AS T3 ON T2.Team_2 = T3.Team_Id OR T2.Team_1 = T3.Team_Id WHERE T2.Win_Margin = 38 AND T2.Match_Date = '2009-04-30'",
        "compiler_hint": "no such column: T3.Team_Name",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and that the columns being referenced exist in the tables being joined. In this case, the error occurred because the join with Win_By table was incorrect, and the column Team_Name was being referenced from the wrong table. To avoid this mistake, carefully review the schema and ensure that the join conditions and column references are correct. Additionally, when retrieving data from multiple tables, consider the relationships between the tables and ensure that the joins are performed correctly to avoid retrieving incorrect or duplicate data.",
        "ground_truth_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'",
        "difficulty": ""
    },
    {
        "question": "What is the bounding box of the object sample in image no.5 that has a self-relation?",
        "hint": "bounding box of the object sample refers to (x, y, W, H); image no.5 refers to IMG_ID = 5; has a self-relation refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID",
        "error_sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN IMG_REL AS T2 ON T1.IMG_ID = T2.IMG_ID AND T1.OBJ_SAMPLE_ID = T2.OBJ1_SAMPLE_ID WHERE T2.OBJ1_SAMPLE_ID = T2.OBJ2_SAMPLE_ID AND T1.IMG_ID = 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the join condition is correct and complete. In this case, the join condition should only include the IMG_ID, as the OBJ_SAMPLE_ID is already filtered by the self-relation condition. Including OBJ_SAMPLE_ID in the join condition may lead to incorrect results if there are multiple object samples in the same image.",
        "ground_truth_sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID",
        "difficulty": ""
    },
    {
        "question": "Which state has greater than 50 CBSA officers of metro type?",
        "hint": "greater than 50 CBSA officers of metro type refers to COUNT(CBSA_type = 'Metro') > 50;",
        "error_sql": "SELECT T2.name FROM CBSA AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T1.CBSA_type = 'Metro' GROUP BY T2.name HAVING COUNT(T1.CBSA) > 50",
        "compiler_hint": "no such column: T1.state",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the column being referenced exists in the table. In this case, the error occurred because the `state` column does not exist in the `CBSA` table. To avoid this mistake, carefully review the schema of the tables being joined and ensure that the join condition is correct. Additionally, when referencing columns in the `WHERE` or `GROUP BY` clauses, ensure that the column exists in the table being referenced. In this case, the correct join was with the `zip_data` table, and the correct column to group by was `state` from the `zip_data` table, not `name` from the `state` table.",
        "ground_truth_sql": "SELECT T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_type = 'Metro' GROUP BY T2.state HAVING COUNT(T1.CBSA_type) > 50",
        "difficulty": ""
    },
    {
        "question": "What is the profit on net of the vendor with the highest standard price? If there are two vendors of the same amount, calculate only for one vendor.",
        "hint": "profit on net = SUBTRACT(LastReceiptCost, StandardPrice);",
        "error_sql": "SELECT MAX(StandardPrice - LastReceiptCost) FROM ProductVendor",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen calculating the profit on net, ensure that the subtraction is performed in the correct order. In this case, the correct calculation is `LastReceiptCost - StandardPrice`, not `StandardPrice - LastReceiptCost`. Additionally, when joining tables, ensure that the correct columns are being referenced and that the join is being performed on the correct keys. In this case, the `Vendor` table should be joined with the `ProductVendor` table on the `BusinessEntityID` column.",
        "ground_truth_sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Which religion has the largest population in Martinique?",
        "hint": "",
        "error_sql": "SELECT T1.Name FROM religion AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Martinique' ORDER BY T1.Percentage DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names and table aliases are correctly matched. In this case, the error was due to incorrect aliasing and column matching. Additionally, when ordering by a column, ensure that it is the correct column that represents the population, not the percentage of the population. In this case, the population column is not present in the religion table, so it should be joined with the country table to access the population column.",
        "ground_truth_sql": "SELECT T2.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Martinique' ORDER BY T1.population DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "In the year that the Montreal Canadiens had 24 penalty minutes in the Stanley Cup finals, how many wins did the team had in total?",
        "hint": "penalty minutes refer to PIM = 24; wins refer to W;",
        "error_sql": "SELECT SUM(T1.W) FROM Teams AS T1 INNER JOIN TeamsPost AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = '24'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition accurately reflects the relationship between the tables. In this case, the error was due to joining Teams with TeamsPost, which is not the correct table to join with. TeamsSC is the correct table to join with because it contains the penalty minutes (PIM) for the Stanley Cup finals. Additionally, when aggregating data, consider whether a GROUP BY clause is necessary to ensure accurate results. In this case, the SUM aggregation function was used, but the query was only returning a single row, so the SUM was not necessary.",
        "ground_truth_sql": "SELECT T2.W FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 24",
        "difficulty": ""
    },
    {
        "question": "Which territory has the greatest difference in sales from previous year to this year? Indicate the difference, as well as the name and country of the region.",
        "hint": "greatest difference in sales from previous year to this year refers to Max(Subtract(SalesLastYear,SalesYTD));",
        "error_sql": "SELECT T1.Name, T1.CountryRegionCode, T2.SalesYTD - T2.SalesLastYear AS Difference FROM CountryRegion AS T1 INNER JOIN SalesTerritory AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode ORDER BY T2.SalesYTD - T2.SalesLastYear DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen comparing values to find the greatest difference, ensure that the subtraction is performed in the correct order. In this case, the greatest difference in sales from previous year to this year would be found by subtracting SalesYTD from SalesLastYear, not the other way around. Additionally, the table with the sales data (SalesTerritory) should be the primary table in the JOIN, not the CountryRegion table.",
        "ground_truth_sql": "SELECT SalesLastYear - SalesYTD, Name, CountryRegionCode FROM SalesTerritory ORDER BY SalesLastYear - SalesYTD DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How old was composer of the show when he was nominated for Emmy's Outstanding Music Composition for a Series in 2009. Indicate his full name as well.",
        "hint": "in 2009 refers to year = 2009; old refers to SUBTRACT(2009, birthdate); composer of the show refers to role = 'composer'; Emmy's refers to organization = 'Primetime Emmy Awards'; nominated refers to result = 'Nominee'; Outstanding Music Composition refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'",
        "error_sql": "SELECT T1.name, 2009 - SUBSTR(T1.birthdate, 1, 4) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.year = 2009 AND T2.role = 'composer' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Nominee' AND T2.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen performing date arithmetic, ensure that the date is in a format that can be subtracted directly. In this case, the birthdate is stored as a string, and the year is being extracted using SUBSTR. However, this approach assumes that the birthdate is always in the format 'YYYY-MM-DD', and it does not account for the month and day of birth. A more accurate approach would be to store the birthdate as a date type and use date arithmetic functions to calculate the age. Additionally, when joining tables, ensure that the join condition is correct and that the tables are joined in the correct order. In this case, the Award table should be joined with the Person table on the person column, not the name column.",
        "ground_truth_sql": "SELECT T1.year - T2.birthdate AS ageIn2009, T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person = T2.name WHERE T1.role = 'composer' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T1.result = 'Nominee' AND T1.year = 2009;",
        "difficulty": ""
    },
    {
        "question": "How many active businesses are opened during late afternoon in the Phoenix city? List out the top 3 categories name for these businesses.",
        "hint": "opened during late afternoon refers to Business_Hours where opening_time \u2265 '5PM'; active businesses refer to business_id where active = 'true';",
        "error_sql": "SELECT T4.category_name, COUNT(T4.category_name) \nFROM Business AS T1 \nINNER JOIN Business_Hours AS T2 \nON T1.business_id = T2.business_id \nINNER JOIN Business_Categories AS T3 \nON T1.business_id = T3.business_id \nINNER JOIN Categories AS T4 \nON T3.category_id = T4.category_id \nWHERE T1.active = 'true' AND T1.city = 'Phoenix' AND T2.opening_time >= '5PM' \nGROUP BY T4.category_name \nORDER BY COUNT(T4.category_name) DESC \nLIMIT 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen writing SQL queries, it's essential to carefully consider the data types and formats of the columns being compared. In this case, the `opening_time` column is likely in a 12-hour format with AM/PM suffixes, so the comparison should be done with a time string that includes the colon and AM/PM suffix (e.g., '5:00 PM'). Additionally, when retrieving distinct categories, it's better to use `SELECT DISTINCT` instead of `GROUP BY` to avoid unnecessary grouping and counting.",
        "ground_truth_sql": "SELECT DISTINCT T4.category_name FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.city = 'Phoenix' AND T1.opening_time >= '5PM' LIMIT 3",
        "difficulty": ""
    },
    {
        "question": "List the occupation and income of male customers with an level of education of 4 to 6.",
        "hint": "male customers with an level of education of 4 to 6 refer to SEX = 'Male' where EDUCATIONNUM BETWEEN 4 AND 6; income refers to INCOME_K;",
        "error_sql": "SELECT T1.OCCUPATION, T3.INCOME_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Male' AND T1.EDUCATIONNUM BETWEEN 4 AND 6",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that you are joining the correct tables and that the join conditions are correct. In this case, the error was joining the `Mailings1_2` table which was not necessary for the query. Also, when using the `BETWEEN` operator, it is a good practice to explicitly specify the range to avoid any confusion. Additionally, verify that the column names and table aliases are correct to avoid any errors.",
        "ground_truth_sql": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'",
        "difficulty": ""
    },
    {
        "question": "How much is the total bonus received by sales person and what is the percentage of it against the projected yearly sales quota in 2013?",
        "hint": "projected yearly sales quota refers to SalesQuota; projected yearly sales quota in 2013 refers to year(QuotaDate) = 2013; percentage = (MULTIPLY(DIVIDE(SUM(Bonus)), (SUM(SalesQuota))) as percentage;",
        "error_sql": "SELECT \n    SUM(T1.Bonus) AS TotalBonus, \n    (SUM(T1.Bonus) / SUM(T2.SalesQuota)) * 100 AS PercentageOfSalesQuota\nFROM \n    SalesPerson AS T1 \nINNER JOIN \n    SalesPersonQuotaHistory AS T2 \nON \n    T1.BusinessEntityID = T2.BusinessEntityID \nWHERE \n    STRFTIME('%Y', T2.QuotaDate) = '2013'",
        "compiler_hint": "no such column: Bonus",
        "reflective_cot": "### Tip:\nTo avoid making the same mistake in the future, it's crucial to carefully examine the database schema and understand the relationships between tables. In this case, the error occurred because the 'Bonus' column does not exist in the 'SalesPersonQuotaHistory' table. Instead, it exists in the 'SalesPerson' table. Therefore, a join operation is required to combine data from both tables. Additionally, the 'SalesQuota' column is also not present in the 'SalesPersonQuotaHistory' table, it's present in the 'SalesPerson' table. Hence, the correct query involves joining the 'SalesPerson' table with the 'SalesPersonQuotaHistory' table to access the required columns.",
        "ground_truth_sql": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS REAL) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013'",
        "difficulty": ""
    },
    {
        "question": "Which female students had never been absent?",
        "hint": "had never been absent refers to month = 0",
        "error_sql": "SELECT T1.name FROM person AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T2.month = 0 AND T3.name IS NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen identifying female students, it's incorrect to use a LEFT JOIN with the male table and check for NULL values, as this approach assumes that every person is either male or female, and there are no other possibilities. A better approach is to use a NOT EXISTS or NOT IN clause to exclude male students, or to use a subquery to select all students who are not in the male table. However, in this case, the Ground Truth SQL uses a different approach by joining the male and longest_absense_from_school tables on the condition that the names are not equal, which is a clever way to exclude male students. This approach highlights the importance of thinking creatively and considering different ways to solve a problem in SQL.",
        "ground_truth_sql": "SELECT T2.name FROM male AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name <> T2.name WHERE T2.month = 0",
        "difficulty": ""
    },
    {
        "question": "Provide the sponsor and event of the menu which includes Cerealine with Milk.",
        "hint": "Cerealine with Milk is a name of dish;",
        "error_sql": "SELECT T1.sponsor, T1.event FROM Menu AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Cerealine with Milk'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order is correct and that the correct columns are being joined. In this case, the error was due to incorrect join order and incorrect column selection. To avoid this mistake, carefully analyze the table relationships and ensure that the join order makes sense. Additionally, double-check that the correct columns are being selected and joined. In this case, the correct join order is MenuItem -> MenuPage -> Menu -> Dish, and the correct columns to select are sponsor and event from the Menu table.",
        "ground_truth_sql": "SELECT T3.name, T3.event FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Cerealine with Milk'",
        "difficulty": ""
    },
    {
        "question": "What are the categories of the top 2 oldest events?",
        "hint": "oldest event refers to MIN(timestamp);",
        "error_sql": "SELECT T3.category FROM events AS T1 INNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN app_events_relevant AS T4 ON T2.event_id = T4.event_id INNER JOIN app_labels AS T5 ON T4.app_id = T5.app_id INNER JOIN label_categories AS T3 ON T5.label_id = T3.label_id ORDER BY T1.timestamp LIMIT 2",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions are correct and the tables are joined in the correct order. In this case, the error was due to incorrect join conditions and table order. The correct join order should start from the `events_relevant` table, which contains the timestamp, and then join with `app_events_relevant`, `app_labels`, and finally `label_categories`. Additionally, the join conditions should be carefully checked to ensure that the correct relationships between tables are established. To avoid making the same mistake in the future, it's essential to carefully review the database schema and the join conditions to ensure that they are correct and logical.",
        "ground_truth_sql": "SELECT T4.category FROM events_relevant AS T1 INNER JOIN app_events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN app_labels AS T3 ON T3.app_id = T2.app_id INNER JOIN label_categories AS T4 ON T3.label_id = T4.label_id ORDER BY T1.timestamp LIMIT 2",
        "difficulty": ""
    },
    {
        "question": "Calculate the average profit of prom brushed steel products.",
        "hint": "prom brushed steel refers to p_type = 'PROMO BRUSHED STEEL'; average profit = divide(sum(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))), count(ps_partkey))",
        "error_sql": "SELECT AVG((l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity)) FROM lineitem INNER JOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey INNER JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_type = 'PROMO BRUSHED STEEL'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the average of a value, ensure that you are using the correct aggregation function. In this case, the `AVG` function is not suitable because it calculates the average of the entire column, whereas we need to calculate the average of the sum of profits divided by the count of `ps_partkey`. Instead, use the `SUM` function to calculate the total profit and then divide it by the `COUNT` function to get the average profit. Additionally, ensure that the joins are correct and the columns are correctly referenced.",
        "ground_truth_sql": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity) / COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_type = 'PROMO BRUSHED STEEL'",
        "difficulty": ""
    },
    {
        "question": "What is the average height of player who were born in 1990 and after? Compare the average height with players who were born before 1990.",
        "hint": "average height refers to AVG(height); born in 1990 refers to birthYear = 1990\n",
        "error_sql": "SELECT AVG(height) FROM Master WHERE birthYear >= 1990",
        "compiler_hint": "misuse of aggregate: AVG()",
        "reflective_cot": "### Tip: \nWhen comparing the average of two groups, it's generally better to use a single query with conditional aggregation rather than trying to compare the results of two separate queries. This is because the two separate queries will return two separate values, and it's not possible to directly compare these values within the SQL query. Instead, use a single query with conditional aggregation to calculate the averages of both groups in a single pass, and then compare the results.",
        "ground_truth_sql": "SELECT AVG(IIF(birthYear < 1990, height, NULL)) - AVG(IIF(birthYear >= 1990, height, NULL)) FROM Master",
        "difficulty": ""
    },
    {
        "question": "Among all the suppliers providing the part \"hot spring dodger dim light\", how many of them are in Europe?",
        "hint": "part \"hot spring dodger dim light\" refers to p_name = hot spring dodger dim light; Europe refers to r_name = 'EUROPE'",
        "error_sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey INNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey INNER JOIN nation AS T4 ON T1.s_nationkey = T4.n_nationkey INNER JOIN region AS T5 ON T4.n_regionkey = T5.r_regionkey WHERE T3.p_name = 'hot spring dodger dim light' AND T5.r_name = 'EUROPE'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order and the columns used for joining are correct. In this case, the error was in the join order and the columns used for counting. The correct approach is to start with the region table and join it with the nation and supplier tables to get the suppliers in Europe. Then, join the supplier table with the partsupp and part tables to get the suppliers providing the specific part. However, the correct SQL query provided does not even join the partsupp and part tables, it only counts the number of regions in Europe, which is not the correct answer. The correct SQL query should be:\n\n```sql\nSELECT COUNT(T1.s_suppkey) \nFROM supplier AS T1 \nINNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey \nINNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey \nINNER JOIN nation AS T4 ON T1.s_nationkey = T4.n_nationkey \nINNER JOIN region AS T5 ON T4.n_regionkey = T5.r_regionkey \nWHERE T3.p_name = 'hot spring dodger dim light' AND T5.r_name = 'EUROPE'\n```\n\nHowever, this query is still not correct because it counts the number of suppliers providing the part \"hot spring dodger dim light\" in Europe, but it does not consider the case where a supplier provides the part in multiple nations in Europe. To get the correct answer, we need to use a subquery to get the suppliers providing the part and then join it with the nation and region tables to get the suppliers in Europe.\n\n```sql\nSELECT COUNT(T1.s_suppkey) \nFROM supplier AS T1 \nINNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey \nINNER JOIN region AS T3 ON T2.n_regionkey = T3.r_regionkey \nWHERE T3.r_name = 'EUROPE' AND T1.s_suppkey IN (\n    SELECT T4.s_suppkey \n    FROM supplier AS T4 \n    INNER JOIN partsupp AS T5 ON T4.s_suppkey = T5.ps_suppkey \n    INNER JOIN part AS T6 ON T5.ps_partkey = T6.p_partkey \n    WHERE T6.p_name = 'hot spring dodger dim light'\n)\n```\n\nThis query first gets the suppliers providing the part \"hot spring dodger dim light\" and then joins it with the nation and region tables to get the suppliers in Europe.",
        "ground_truth_sql": "SELECT COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T1.r_name = 'EUROPE'",
        "difficulty": ""
    },
    {
        "question": "Among the seafood products, which product have the highest total production of the production?",
        "hint": "seafood product refers to CategoryName = 'Seafood'; product refers to ProductID; highest total production refers to max(add(units in stock, units on order))",
        "error_sql": "SELECT T1.ProductID FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN OrderDetails AS T3 ON T1.ProductID = T3.ProductID WHERE T2.CategoryName = 'Seafood' ORDER BY T3.Quantity DESC LIMIT 1",
        "compiler_hint": "no such column: T1.UnitsInStock",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the columns referenced in the SELECT, WHERE, and ORDER BY clauses actually exist in the tables being queried. In this case, the error occurred because the 'UnitsInStock' and 'UnitsOnOrder' columns do not exist in the 'Products' table. To avoid this mistake, carefully review the schema of the database and verify the existence of columns before referencing them in the query. Additionally, consider using subqueries or joins to access related data from other tables if necessary.",
        "ground_truth_sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Seafood' ORDER BY T1.UnitsInStock + T1.UnitsOnOrder DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "In 2010, how many loses made by team 'BOS' and how many assists were made by the players?",
        "hint": "year = 2010; BOS refers to tmID; loses refer to L; assists refer to A;",
        "error_sql": "SELECT COUNT(T1.L) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID WHERE T1.year = 2010 AND T1.tmID = 'BOS'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the join condition includes all relevant columns to avoid Cartesian product and incorrect results. In this case, the join condition should include both 'tmID' and 'year' to correctly match rows between the 'Teams' and 'Scoring' tables. Additionally, use SUM instead of COUNT to calculate the total number of loses and assists, as COUNT would only count the number of rows, not the actual values in the 'L' and 'A' columns.",
        "ground_truth_sql": "SELECT SUM(T1.L), SUM(T2.A) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'BOS' AND T1.year = 2010",
        "difficulty": ""
    },
    {
        "question": "How many users in Mubi give the movie \"White Night Wedding for 5\"?",
        "hint": "White Night Wedding' is movie_title; for 5 refers to rating_score = 5;",
        "error_sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'White Night Wedding' AND T1.rating_score = 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen writing SQL queries, ensure that the conditions in the WHERE clause are correctly ordered and logically consistent. In this case, the correct query should have the conditions in the same order as they appear in the problem statement, i.e., first filter by rating_score and then by movie_title. However, the actual order of conditions in the WHERE clause does not affect the result, as SQL evaluates all conditions before returning the result. The mistake in the Error SQL Query and SQL after Reflection is not actually an error, and both queries should return the correct result. The Ground Truth SQL is identical to the Error SQL Query and SQL after Reflection, and it is not actually a correction. To avoid confusion, it's essential to carefully review the problem statement and the generated SQL queries to ensure that they accurately reflect the requirements.",
        "ground_truth_sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T2.movie_title = 'White Night Wedding'",
        "difficulty": ""
    },
    {
        "question": "List the name, address, and phone number of companies that supply products for more than thirty dollars per unit.",
        "hint": "more than thirty dollars per unit refers to UnitPrice > 30",
        "error_sql": "SELECT T2.SupplierName, T2.Address, T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Price > 30",
        "compiler_hint": "no such column: T2.CompanyName",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names in the SELECT statement match the actual column names in the tables being joined. In this case, the error occurred because the column name in the Suppliers table is actually 'SupplierName', not 'CompanyName'. Additionally, the WHERE clause condition should be based on the correct column name, which is 'Price' in the Products table, not 'UnitPrice'. To avoid this mistake, double-check the column names in the table schema before writing the SQL query.",
        "ground_truth_sql": "SELECT T2.CompanyName, T2.Address, T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice > 30",
        "difficulty": ""
    },
    {
        "question": "What is the size of the smallest part in a jumbo case container?",
        "hint": "size refers to p_size; the smallest part refers to min(p_size); jumbo case container refers to p_container = 'JUMBO CASE'",
        "error_sql": "SELECT MAX(p_size) FROM part WHERE p_size IS NOT NULL AND p_size IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen writing SQL queries, it's essential to carefully read and understand the problem statement. In this case, the mistake was using MAX instead of MIN to find the smallest part size, and also not including the condition for the 'JUMBO CASE' container. To avoid this mistake, take your time to analyze the problem, identify the key elements, and ensure that your query accurately reflects the requirements. Additionally, double-check your query for any logical errors before executing it.",
        "ground_truth_sql": "SELECT MIN(p_size) FROM part WHERE p_container = 'JUMBO CASE'",
        "difficulty": ""
    },
    {
        "question": "Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?",
        "hint": "Trainee is a position title; salary of over 20,000 refers to salary > '20000'",
        "error_sql": "SELECT COUNT(T1.ssn) FROM employee AS T1 INNER JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee' AND T1.salary > '20000'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen comparing strings that represent numbers, it's essential to convert them to a numeric data type to ensure accurate results. In this case, the salary column is a string that includes a currency symbol and commas, which need to be removed and converted to a numeric type (REAL in this case) before comparison. Additionally, when using COUNT, it's more efficient and idiomatic to use COUNT(*) instead of COUNT(column_name), as it counts all rows, regardless of the column's value.",
        "ground_truth_sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) > 20000 AND T2.positiontitle = 'Trainee'",
        "difficulty": ""
    },
    {
        "question": "What is the full address of business number 24?",
        "hint": "Full address refers to AddressLine1+AddressLine2; business number 24 refers to BusinessEntityID = '24'",
        "error_sql": "SELECT AddressLine1 + AddressLine2 FROM Address WHERE AddressID = ( SELECT AddressID FROM BusinessEntityAddress WHERE BusinessEntityID = 24 )",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, it's essential to specify the join type (e.g., INNER JOIN, LEFT JOIN, RIGHT JOIN) and the join condition (e.g., ON T1.AddressID = T2.AddressID). In this case, the error SQL query was missing the join type and condition, which would have resulted in a syntax error. Additionally, the query was trying to concatenate AddressLine1 and AddressLine2 using the \"+\" operator, which is not the correct way to concatenate strings in SQL. Instead, the correct query uses the INNER JOIN clause to join the Address and BusinessEntityAddress tables on the AddressID column, and returns the AddressLine1 and AddressLine2 columns separately.",
        "ground_truth_sql": "SELECT T1.AddressLine1, T1.AddressLine2 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 24",
        "difficulty": ""
    },
    {
        "question": "What is the name of the supplier that supplies the most products to the company?",
        "hint": "name of the supplier refers to SupplierID; the most product refers to max(count(ProductID))",
        "error_sql": "SELECT T2.SupplierName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierID, T2.SupplierName ORDER BY COUNT(T1.ProductID) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen performing aggregation operations, such as finding the maximum count, it's essential to ensure that the GROUP BY clause only includes the columns that uniquely identify each group. In this case, the error SQL query and SQL after reflection incorrectly included both SupplierID and SupplierName in the GROUP BY clause. This is unnecessary and can lead to incorrect results. Instead, only the SupplierID should be included in the GROUP BY clause, as it uniquely identifies each supplier. Additionally, using COUNT(*) is more efficient and clear than COUNT(T1.ProductID), as it directly counts the number of rows in each group.",
        "ground_truth_sql": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many employees from USA with Sales Representative title?",
        "hint": "from USA refers to Country = 'USA'",
        "error_sql": "SELECT COUNT(T1.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Country = 'USA' AND T1.Title = 'Sales Representative'",
        "compiler_hint": "no such column: T2.EmployeeID",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the columns being referenced exist in the tables being joined. In this case, the error was due to joining Employees with Customers on the wrong column (EmployeeID with CustomerID) and also referencing a non-existent column (Title) in the Employees table. Additionally, the Employees table does not have a Country column, it's the Customers and Suppliers tables that have this column. To avoid this mistake, carefully review the schema of the tables involved and ensure that the join conditions and column references are correct.",
        "ground_truth_sql": "SELECT COUNT(Country) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative'",
        "difficulty": ""
    },
    {
        "question": "Which regions have online sales channels that have the most discounts?",
        "hint": "most discount refers to Max(Discount Applied)",
        "error_sql": "SELECT T4.Region FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T1._StoreID = T2.StoreID INNER JOIN Regions AS T3 ON T2.StateCode = T3.StateCode INNER JOIN \"Sales Team\" AS T4 ON T3.Region = T4.Region WHERE T1.`Sales Channel` = 'Online' ORDER BY T1.`Discount Applied` DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen solving SQL problems, it's essential to carefully analyze the relationships between tables and the conditions specified in the problem. In this case, the error was due to incorrect joining of tables and misunderstanding of the problem's requirements. The correct solution only requires joining the \"Sales Orders\" table with the \"Sales Team\" table, as the region information is directly related to the sales team, not the store location or customer. To avoid similar mistakes, always carefully read the problem statement, identify the relevant tables and columns, and ensure that the joins and conditions are correct and necessary.",
        "ground_truth_sql": "SELECT T2.Region FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.`Sales Channel` = 'Online' ORDER BY T1.`Discount Applied` DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Did the tallest player got in the Hall of Fame? If yes, please list the year when he got in the Hall of Fame.",
        "hint": "tallest player refers to max(height)",
        "error_sql": "SELECT T2.year FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID ORDER BY T1.height DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find the tallest player who got into the Hall of Fame, we should first find the maximum height from the Master table, then use this height to find the corresponding player(s) in the Master table, and finally check if this player(s) has a record in the HOF table. The original SQL query was incorrect because it simply sorted the players by height in descending order and took the first one, which may not necessarily be the tallest player who got into the Hall of Fame. The SQL after Reflection was closer to the correct solution, but it still had a potential issue: if there are multiple players with the same maximum height, it would only return one of them. However, since the question only asks for the year when the tallest player got into the Hall of Fame, and it is assumed that there is only one tallest player, the Ground Truth SQL query is sufficient.",
        "ground_truth_sql": "SELECT CASE WHEN T1.hofID IS NULL THEN 'NO' ELSE T2.year END FROM Master AS T1 LEFT JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.height = ( SELECT MAX(height) FROM Master )",
        "difficulty": ""
    },
    {
        "question": "Please list the countries under the lending category of the International Development Associations and have a external debt reporting finished by estimation.",
        "hint": "countries refer to the ShortName; International Development Associations refers to lendingcategory = 'IDA'; have a external debt reporting finished by estimation refers to ExternalDebtReportingStatus = 'Estimate'",
        "error_sql": "SELECT ShortName FROM Country WHERE LendingCategory = 'IDA' AND ExternalDebtReportingStatus = 'Estimate'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen filtering data based on specific conditions, ensure that the exact values or phrases are matched. In this case, the error occurred due to a mismatch between 'Estimate' and 'Estimation'. To avoid this mistake, double-check the values in the database or the problem statement to ensure accuracy. Additionally, consider using the 'LIKE' operator or regular expressions if the values are not exact or contain variations.",
        "ground_truth_sql": "SELECT ShortName, ExternalDebtReportingStatus FROM Country WHERE LendingCategory = 'IDA'",
        "difficulty": ""
    },
    {
        "question": "What proportion of orders are taken by the Sales Representative?",
        "hint": "DIVIDE(COUNT(OrderID where Title = 'Sales Representative'), COUNT(OrderID)) as percentage;",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T2.Title = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Employees AS T2 ON T1.EmployeeID = T2.EmployeeID",
        "compiler_hint": "no such column: T2.Title",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that you are referencing the correct table and column names. In this case, the error occurred because the 'Title' column does not exist in the Employees table. The Employees table only has 'LastName' and 'FirstName' columns, but no 'Title' column. To avoid this mistake, carefully review the schema of the tables involved in the query and ensure that the column names match. Additionally, consider using table aliases that clearly indicate the table being referenced, such as 'E' for Employees and 'O' for Orders, to reduce confusion.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T1.Title = 'Sales Representative' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID",
        "difficulty": ""
    },
    {
        "question": "List all products with minimum order quantity of 100 and order them by product name in descending order.",
        "hint": "miinimum order quantity refers to MinOrderQty = 100",
        "error_sql": "SELECT ProductID, Name \nFROM Product \nWHERE MinOrderQty = 100 \nORDER BY Name DESC",
        "compiler_hint": "no such column: MinOrderQty",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the columns being selected are from the correct tables and that the join conditions are accurate. In this case, the error occurred because the MinOrderQty column is not in the Product table, but rather in the ProductVendor table. To avoid this mistake, carefully review the schema and ensure that the columns being selected and the join conditions are correct. Additionally, when selecting distinct values, use the DISTINCT keyword to ensure that only unique values are returned.",
        "ground_truth_sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MinOrderQty = 100 ORDER BY T1.Name DESC",
        "difficulty": ""
    },
    {
        "question": "What is the series code for number of infant deaths in year 1965 for the country whose full name is Islamic State of Afghanistan?",
        "hint": "number of infant deaths refers to IndicatorName = 'Number of infant deaths'; in year 1965 refers to Year = '1965'; full name is Islamic State of Afghanistan refers to LongName = 'Islamic State of Afghanistan'",
        "error_sql": "SELECT T3.SeriesCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN Series AS T3 ON T2.IndicatorCode = T3.SeriesCode WHERE T1.LongName = 'Islamic State of Afghanistan' AND T2.IndicatorName = 'Number of infant deaths' AND T2.Year = 1965",
        "compiler_hint": "no such column: T2.SeriesCode",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column you are trying to access exists in the table you are referencing. In this case, the error occurred because the `SeriesCode` column does not exist in the `Indicators` table. It exists in the `Series` table, but the correct join should be with the `CountryNotes` table which has a foreign key referencing the `Series` table. Always verify the schema and relationships between tables to avoid such mistakes.",
        "ground_truth_sql": "SELECT DISTINCT T3.Seriescode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Number of infant deaths' AND T1.LongName = 'Islamic State of Afghanistan' AND T2.Year = 1965",
        "difficulty": ""
    },
    {
        "question": "How long has the \"Clear Green Turtle\" dish appeared on the menu, and tell me when its latest update was?",
        "hint": "Clear Green Turtle is a name of dish; how long a dish appeared on the menu = SUBTRACT(last_appeared, first_appeared); latest update refers to latest updated_at;",
        "error_sql": "SELECT (T1.last_appeared - T1.first_appeared) AS duration, T2.updated_at FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear Green Turtle' ORDER BY T2.updated_at DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables and selecting data, ensure that the aggregate function (in this case, MAX) is not necessary if you're already ordering the results by the desired column and limiting to the most recent update. Additionally, be mindful of the data types and operations being performed, as the original query attempted to subtract two integers (last_appeared and first_appeared) which would result in the number of years, but the query also attempted to get the latest update time which is not necessarily related to the duration the dish appeared on the menu. The correct approach is to simply join the tables, filter by the desired dish, and order by the update time to get the latest update.",
        "ground_truth_sql": "SELECT T1.last_appeared - T1.first_appeared, T2.updated_at FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle'",
        "difficulty": ""
    },
    {
        "question": "Which state has the highest number of clients who gave a 5-star review?",
        "hint": "highest number of clients refers to MAX(COUNT(client_id)); 5-star review refers to stars = 5;",
        "error_sql": "SELECT T1.State \nFROM state AS T1 \nINNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev \nINNER JOIN reviews AS T3 ON T2.district_id = T3.district_id \nINNER JOIN client AS T4 ON T2.district_id = T4.district_id \nWHERE T3.Stars = 5 \nGROUP BY T1.State \nORDER BY COUNT(T4.client_id) DESC \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join conditions are correct and that the columns being joined are the correct ones. In this case, the error was in joining the `client` table with the `district` table on `district_id`, but then not using the `client_id` from the `client` table to join with the `reviews` table. Instead, the `district_id` from the `district` table was used again to join with the `reviews` table, which is incorrect. To avoid this mistake, carefully review the schema of the tables and the join conditions to ensure that they are correct and logical. Additionally, when using aggregate functions like `COUNT`, make sure to count the correct column, in this case, it should be `T1.district_id` or `T2.district_id` instead of `T4.client_id` or `T2.state_abbrev`.",
        "ground_truth_sql": "SELECT T2.state_abbrev FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 GROUP BY T2.state_abbrev ORDER BY COUNT(T2.state_abbrev) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Tweets posted from which city has a higher number of average likes, Bangkok or Chiang Mai?",
        "hint": "\"Bangkok\" and \"Chiang Mai\" are both City; average number of like = Divide (Sum(Likes), Count(TweetID))",
        "error_sql": "SELECT T3.City FROM twitter AS T1 INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.City IN ('Bangkok', 'Chiang Mai') GROUP BY T3.City ORDER BY AVG(T1.Likes) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen comparing two values, it's generally more accurate to calculate both values separately and then compare them, rather than trying to order and limit the results. This is because ordering and limiting can lead to incorrect results if the values are not distinct or if there are multiple maximum/minimum values. In this case, the original query was trying to order the cities by their average likes and then limit the result to the top one, but this approach is flawed because it doesn't actually compare the two cities. Instead, the correct approach is to calculate the average likes for each city separately and then compare the results.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')",
        "difficulty": ""
    },
    {
        "question": "Indicate if there is any pair formed by the words fukunaga and d'egees.",
        "hint": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;\u00a0 w1st = word = 'fukunaga' or w2nd = word = 'fukunaga'; w1st = word = 'd'egees'or w2nd = word = 'd'egees';",
        "error_sql": "SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END FROM biwords AS T1 INNER JOIN words AS T2 ON T1.w1st = T2.wid INNER JOIN words AS T3 ON T1.w2nd = T3.wid WHERE (T2.word = 'fukunaga' AND T3.word = 'd''egees') OR (T2.word = 'd''egees' AND T3.word = 'fukunaga')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables with multiple conditions, ensure that the conditions are correctly applied to the correct tables and columns. In this case, the error was in the WHERE clause, where the conditions were applied to T2 and T3, but the correct conditions should be applied to T1 and the subqueries. Additionally, when using OR conditions in a JOIN, ensure that the conditions are correctly applied to the correct columns. In this case, the correct JOIN condition is T1.wid = T2.w1st OR T1.wid = T2.w2nd, but the correct conditions for the words should be applied to T1 and the subqueries. Furthermore, when using LIKE operator, ensure that the correct wildcard character is used, in this case, the correct query uses 'd%egees' instead of 'd''egees'.",
        "ground_truth_sql": "SELECT CASE WHEN COUNT(T1.wid) > 0 THEN 'yes' ELSE 'no' END FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st = ( SELECT wid FROM words WHERE T1.word = 'fukunaga' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word LIKE 'd%egees' )",
        "difficulty": ""
    },
    {
        "question": "Among all publications containing keywords 'Turbulent Fluids', what percentage of them was published in the journal named 'Physics of Fluids'?",
        "hint": "'Physics of Fluids' is the FullName of journal; percentage = DIVIDE(SUM(Keyword = 'Turbulent Fluids'), SUM(FullName = 'Physics of Fluids')) as percentage",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'Turbulent Fluids' AND T2.FullName = 'Physics of Fluids' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Keyword = 'Turbulent Fluids' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen calculating the percentage of a subset within a larger set, ensure that the numerator and denominator are correctly defined. In this case, the numerator should be the count of papers with the keyword 'Turbulent Fluids' and the denominator should be the count of papers published in the journal 'Physics of Fluids'. The original query incorrectly combined the conditions for the numerator, and the second query incorrectly used the same condition for both the numerator and denominator. To avoid this mistake, carefully define the conditions for the numerator and denominator separately, and ensure that they accurately represent the desired subset and larger set.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'Turbulent Fluids' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'Physics of Fluids' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id",
        "difficulty": ""
    },
    {
        "question": "For the pairs of genes with one having 8 chromosomes and the other having 6 chromosomes, what is the highest expression correlation score?",
        "hint": "",
        "error_sql": "SELECT MAX(T3.Expression_Corr) FROM Genes AS T1 INNER JOIN Genes AS T2 ON T1.GeneID != T2.GeneID INNER JOIN Interactions AS T3 ON (T1.GeneID = T3.GeneID1 AND T2.GeneID = T3.GeneID2) OR (T1.GeneID = T3.GeneID2 AND T2.GeneID = T3.GeneID1) WHERE (T1.Chromosome = 8 AND T2.Chromosome = 6) OR (T1.Chromosome = 6 AND T2.Chromosome = 8)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, consider the conditions that define the relationship between the tables. In this case, the error was in joining two instances of the Genes table and then joining the Interactions table, which led to incorrect results. Instead, join the Genes table with the Interactions table directly, and use the conditions to filter the results. Additionally, when looking for the highest expression correlation score, use the ORDER BY and LIMIT clauses to get the top result, rather than using MAX with multiple joins.",
        "ground_truth_sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Chromosome = 6 OR T1.Chromosome = 8 ORDER BY T2.Expression_Corr DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Calculate the increment percentage of elite user for each year since year 2005.",
        "hint": "since year 2005 refers to year_id Between 2005 and 2014; increment percentage = Divide(Count(user_id(year_id < 2014)), Count (user_id(year_id = 2015))) * 100",
        "error_sql": "SELECT T1.year_id, T2.user_id, T3.user_id FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Elite AS T3 ON T2.user_id = T3.user_id WHERE T1.year_id BETWEEN 2005 AND 2014",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating increment percentages, ensure that the denominator is the initial value (in this case, the count of elite users in 2005) and the numerator is the total count of users across all years (excluding the initial year). Avoid using JOINs when not necessary, and use CASE statements to filter data within the COUNT function. Also, be mindful of the data type when performing division to avoid integer division, which can result in truncated decimal values.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN year_id < 2014 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN year_id = 2005 THEN 1.0 ELSE NULL END) AS increment FROM Elite",
        "difficulty": ""
    },
    {
        "question": "Name the goalies who have played more than total of 5000 minutes in the all the season played. State given name of the player and from which country was he born.",
        "hint": "played more than total of 5000 minutes refers to SUM(Min)>5000;country he was born refers to birthCountry\n",
        "error_sql": "SELECT T1.nameGiven, T1.birthCountry FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.playerID HAVING SUM(T2.Min) > 5000",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen using the GROUP BY clause, it's essential to include all non-aggregated columns from the SELECT statement in the GROUP BY clause to avoid incorrect results. In this case, the initial error was due to not including all columns from the SELECT statement in the GROUP BY clause. The corrected query uses DISTINCT to remove duplicate rows, and the GROUP BY clause includes all columns from the SELECT statement.",
        "ground_truth_sql": "SELECT DISTINCT T1.nameGiven, T1.birthCountry FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.nameGiven, T1.birthCountry HAVING SUM(T2.Min) > 5000",
        "difficulty": ""
    },
    {
        "question": "Among the episode that get more than 950 votes, how many of the episodes were nominated for the 'Outstanding Voice-Over Performance Award in 2009'? Find the percentage of the episodes.",
        "hint": "more than 950 votes refers to votes > 950; in 2009 refers to year = 2009; number of episode = Count(episode_id); nominated refers to result = 'Nominee'; percentage = Divide(Count(award = 'Outstanding Voice-Over Performance'), Count(episode_id)) * 100",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T2.award = 'Outstanding Voice-Over Performance' THEN T2.episode_id END) AS REAL) * 100 / COUNT(T1.episode_id) FROM Vote AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.votes > 950 AND T2.year = 2009 AND T2.result = 'Nominee'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join is performed on the correct tables and columns. In this case, the join should be performed between the Award table and the Episode table, not the Vote table. Additionally, when using aggregate functions, use SUM instead of COUNT when counting conditional values, and use ELSE 0 to handle cases where the condition is not met.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.award = 'Outstanding Voice-Over Performance' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 950 AND T1.year = 2009;",
        "difficulty": ""
    },
    {
        "question": "Which 2 Scottish teams scored 10 goals playing as a local team and in which seasons?",
        "hint": "local team refers to HomeTeam; Scottish means belong to the country = 'Scotland'; scored 10 goals refer to FTHG = 10, which is short name for Final-time Away-team Goals;",
        "error_sql": "SELECT T1.HomeTeam, T2.season FROM matchs AS T1 INNER JOIN matchs AS T2 ON T1.HomeTeam = T2.HomeTeam WHERE T1.FTHG = 10 AND T2.FTHG = 10 AND T1.Div IN (SELECT division FROM divisions WHERE country = 'Scotland')",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join is performed with a table that contains the required information, rather than joining the same table twice. In this case, joining `matchs` with `divisions` is necessary to filter by country, but joining `matchs` with itself is unnecessary and can lead to incorrect results. Additionally, when selecting columns, only choose the columns that are required to answer the question, avoiding unnecessary columns that can lead to incorrect results.",
        "ground_truth_sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Scotland' AND T1.FTHG = 10",
        "difficulty": ""
    },
    {
        "question": "How many businesses from ward 42 have at least 5 failed inspection results between 1/1/2010 to 12/31/2015?",
        "hint": "ward 42 refers to ward = 42; at least 5 failed inspection results refers to count(results = 'Fail') > = 5; between 1/1/2010 to 12/31/2015 refers to inspection_date between '2010-01-01' and '2015-12-31'",
        "error_sql": "SELECT COUNT(DISTINCT T1.license_no) \nFROM establishment AS T1 \nINNER JOIN inspection AS T2 \nON T1.license_no = T2.license_no \nWHERE T1.ward = 42 \nAND T2.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' \nAND T2.results = 'Fail'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, it's essential to carefully consider the conditions and filters applied to the data. In this case, the initial query was incorrect because it only counted businesses with at least one failed inspection result, not at least 5. The second query was closer, but it still had a logical flaw. The correct approach is to first identify the businesses with at least 5 failed inspection results and then filter those results by ward and date range. To avoid similar mistakes in the future, make sure to break down complex queries into smaller, manageable parts, and verify that each part is correctly filtering the data. Additionally, use subqueries or Common Table Expressions (CTEs) to simplify complex logic and improve readability.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND T1.ward = 42 AND T1.license_no IN ( SELECT license_no FROM ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no HAVING COUNT(results) >= 5 ) )",
        "difficulty": ""
    },
    {
        "question": "What is the average unit price of Tokyo Traders' products?",
        "hint": "\"Tokyo Traders\" is the CompanyName; average unit price = AVG(UnitPrice)",
        "error_sql": "SELECT AVG(T1.Price) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.SupplierName = 'Tokyo Traders'",
        "compiler_hint": "no such column: T2.CompanyName",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names in the WHERE clause match the actual column names in the tables. In this case, the error occurred because the column name was 'SupplierName' instead of 'CompanyName'. Additionally, when calculating the average unit price, it's more accurate to use the SUM of UnitPrice divided by the COUNT of products, rather than directly using AVG function on Price, as the latter may not account for the quantity of each product.",
        "ground_truth_sql": "SELECT SUM(T1.UnitPrice) / COUNT(T2.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'",
        "difficulty": ""
    },
    {
        "question": "Calculate the percentage of business with attribute name of \"Accepts Credit Cards\".",
        "hint": "percentage refers to DIVIDE(COUNT(attribute_name = 'Accepts Credit Cards'), COUNT(business_id))*100%",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T2.attribute_name = 'Accepts Credit Cards' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id",
        "compiler_hint": "no such column: T2.attribute_name",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column you are referencing in the WHERE or CASE clause is from the correct table. In this case, the error occurred because the column 'attribute_name' was referenced from the wrong table (T2 instead of T1). To avoid this mistake, double-check the table aliases and column names to ensure they match the actual table and column names in the database schema. Additionally, when using aggregate functions like SUM and COUNT, make sure to use the correct column and table alias to avoid incorrect results.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.attribute_name = 'Accepts Credit Cards' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id",
        "difficulty": ""
    },
    {
        "question": "Calculate the average players out in the first innings per match. How many of them were out by the leg before wicket?",
        "hint": "out by the leg refers to Out_Name = 'lbw'; out in the first innings refers to Innings_No = 2;",
        "error_sql": "SELECT CAST(SUM(CASE WHEN Kind_Out = (SELECT Out_Id FROM Out_Type WHERE Out_Name = 'lbw') THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT Match_Id) FROM Wicket_Taken WHERE Innings_No = 2",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen calculating averages or performing aggregations, ensure that the denominator accurately represents the total number of groups or units being averaged. In this case, the error was in using `COUNT(DISTINCT Match_Id)` instead of `COUNT(Match_Id)` or simply `COUNT(T1.Match_Id)`, which would give the correct total number of matches. Additionally, when joining tables, ensure that the join conditions are correct and that the correct columns are being referenced. In this case, the error was in using `Innings_No = 1` instead of `Innings_No = 2` to filter for the first innings.",
        "ground_truth_sql": "SELECT CAST(COUNT(T1.Player_Out) AS REAL) / COUNT(T1.Match_Id), SUM(CASE WHEN T2.Out_Name = 'lbw' THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T1.Innings_No = 2",
        "difficulty": ""
    },
    {
        "question": "List the titles for all Catalan language wikipedia page from revision page id 106600 to 106700.",
        "hint": "from revision page id 106600 to 106700 refers to revision BETWEEN 106600 AND 106700",
        "error_sql": "SELECT T1.title FROM pages AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T2.lang = 'Catalan' AND T1.revision BETWEEN 106600 AND 106700",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and applying filters, carefully examine the column names and their corresponding table associations to avoid mistakenly using the wrong column. In this case, the filter condition should be applied to the 'revision' column, not 'page' or 'revision' from the wrong table. Always double-check the schema and the query to ensure that the correct columns are being used.",
        "ground_truth_sql": "SELECT title FROM pages WHERE revision BETWEEN 106600 AND 106700",
        "difficulty": ""
    },
    {
        "question": "For the third largest country, which ethinic group has the most population?",
        "hint": "",
        "error_sql": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN ethnicGroup AS T3 ON T2.Name = T3.Country ORDER BY T2.Area DESC LIMIT 1 OFFSET 2",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the correct columns are being referenced. In this case, the mistake was in the join condition between the country and ethnicGroup tables. The country table's Code column should be matched with the ethnicGroup table's Country column, not the province table's Name column. Additionally, when calculating the population of each ethnic group, the population of the country should be multiplied with the percentage of the ethnic group, not the population of the province.",
        "ground_truth_sql": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY Area DESC LIMIT 2, 1 ) GROUP BY T2.Name ORDER BY T2.Percentage * T1.Population DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the percentage of the total products ordered were not rejected by Drill size?",
        "hint": "rejected quantity refers to ScrappedQty; rejected by Drill size refers to Name in ('Drill size too small','Drill size too large'); percentage = DIVIDE(SUM(ScrappedQty) where Name in('Drill size too small','Drill size too large'), OrderQty)",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T2.Name IN ('Drill size too small', 'Drill size too large') THEN T1.ScrappedQty ELSE 0 END) AS REAL) * 100 / SUM(T1.OrderQty) FROM WorkOrder AS T1 INNER JOIN ScrapReason AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nThe issue with the first two SQL queries is that they do not accurately translate the given problem statement into SQL code. The first query is trying to find the percentage of total products ordered that were rejected by Drill size, but it does not accurately calculate this percentage. The second query is trying to find the percentage of total products ordered that were not rejected by Drill size, but it still does not accurately calculate this percentage. The issue with both queries is that they do not take into account the total number of products ordered, but rather only the number of products that were rejected or not rejected by Drill size.\n\nTo avoid making the same mistake in the future, it is important to carefully read and understand the problem statement before trying to translate it into SQL code. It is also important to make sure that the SQL code accurately calculates the desired percentage or quantity, and that it takes into account all relevant information, such as the total number of products ordered.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10",
        "difficulty": ""
    },
    {
        "question": "What type of interactions occurs in genes whose function is cellular transport and transport medicine and are classified as non-essential?",
        "hint": "",
        "error_sql": "SELECT DISTINCT T3.Type FROM Genes AS T1 INNER JOIN Genes AS T2 ON T1.GeneID != T2.GeneID INNER JOIN Interactions AS T3 ON (T1.GeneID = T3.GeneID1 AND T2.GeneID = T3.GeneID2) OR (T1.GeneID = T3.GeneID2 AND T2.GeneID = T3.GeneID1) WHERE (T1.Function = 'cellular transport' AND T2.Function = 'transport medicine') AND (T1.Essential = 'Non-essential' AND T2.Essential = 'Non-essential')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen generating SQL queries, carefully analyze the question and ensure that the query accurately reflects the conditions specified. In this case, the error was due to a mismatch between the conditions in the query and the conditions specified in the question. Specifically, the query was looking for genes with functions 'cellular transport' and 'transport medicine', but the ground truth SQL was looking for genes with function 'TRANSCRIPTION'. Additionally, the query was joining two instances of the Genes table, which was unnecessary. To avoid making the same mistake in the future, take the time to carefully read and understand the question, and ensure that the query accurately reflects the conditions specified.",
        "ground_truth_sql": "SELECT T2.Type FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'Non-Essential'",
        "difficulty": ""
    },
    {
        "question": "List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers?",
        "hint": "age greater than the 80% of average age refers to age > (AVG(age) * 0.8); income refers to INCOME_K; number of inhabitants refers to INHABITANTS_K;",
        "error_sql": "SELECT T3.INCOME_K, T3.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age > (SELECT AVG(age) * 0.8 FROM Customers)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using aggregate functions like AVG() in the HAVING clause, make sure to apply the aggregation to the correct table and column, and avoid using subqueries if possible. In this case, the mistake was using a subquery to calculate the average age, which was not correlated with the outer query. Instead, use the HAVING clause with the AVG() function applied to the correct column (T1.age) to filter the results correctly. Additionally, be aware of the scope of the variables and the tables being referenced in the query to avoid confusion and incorrect results.",
        "ground_truth_sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID GROUP BY T2.INCOME_K, T2.INHABITANTS_K HAVING T1.age > 0.8 * AVG(T1.age)",
        "difficulty": ""
    },
    {
        "question": "List all podcast with its itunes url for all title containing the word 'Dream'.",
        "hint": "containing the word 'Dream' refers to title LIKE '%Dream%'",
        "error_sql": "SELECT T2.itunes_url, T2.title FROM podcasts AS T2 INNER JOIN reviews AS T1 ON T2.podcast_id = T1.podcast_id WHERE T1.title LIKE '%Dream%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, carefully consider whether a join is actually necessary to answer the question. In this case, the question only requires information from the 'podcasts' table, so a join with the 'reviews' table is unnecessary. Additionally, when using aggregate functions or grouping, ensure that all non-aggregated columns in the SELECT clause are included in the GROUP BY clause to avoid errors.",
        "ground_truth_sql": "SELECT itunes_url FROM podcasts WHERE title LIKE '%Dream%' GROUP BY itunes_url",
        "difficulty": ""
    },
    {
        "question": "For all the deceased players who are good at both left and right hand, list the player's name and the age when he died.",
        "hint": "age when he died refers to SUBTRACT(deathYear,birthYear); deceased refers to deathYear IS NOT NULL; good at both left and right hand refers to shootCatch IS NULL",
        "error_sql": "SELECT nameGiven, deathYear - birthYear FROM Master WHERE shootCatch IS NULL AND deathYear IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen generating SQL queries, it's essential to carefully consider the columns being selected. In this case, the error SQL query and the SQL after reflection only selected the player's first name and age at death, but the ground truth SQL query requires both the first name and last name. To avoid making the same mistake in the future, always double-check the columns being selected to ensure they match the requirements of the query.",
        "ground_truth_sql": "SELECT firstName, lastName, deathYear - birthYear FROM Master WHERE shootCatch IS NULL AND deathYear IS NOT NULL",
        "difficulty": ""
    },
    {
        "question": "Please list the businesses along with their numbers that have their accounts located in Duvall.",
        "hint": "Business along with their numbers refers to the BusinessEntityID; located in Duvall refers to City = 'Duvall'",
        "error_sql": "SELECT T2.Description FROM BusinessEntity AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.City = 'Duvall'",
        "compiler_hint": "near \"assistant\": syntax error",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct columns are being referenced and that the join conditions are accurate. In this case, the error occurred because the column 'Description' was not found in table 'T2', which is actually 'BusinessEntityAddress'. To avoid this mistake, double-check the table and column names in the SQL query to ensure they match the actual database schema.",
        "ground_truth_sql": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Duvall'",
        "difficulty": ""
    },
    {
        "question": "How many employed disabled students have zero absences?",
        "hint": "employed students refers to disabled.name who are NOT in unemployed.name; zero absences refers to month = 0;",
        "error_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name LEFT JOIN unemployed AS T3 ON T1.name = T3.name WHERE T2.month = 0 AND T3.name IS NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join type and conditions accurately reflect the desired relationship between the tables. In this case, the mistake was using a LEFT JOIN with unemployed, which would include disabled students who are unemployed, whereas the intention was to exclude them. Additionally, the join with unemployed should be an INNER JOIN to ensure that only employed disabled students are considered. Furthermore, the order of joins matters, and in this case, joining longest_absense_from_school with disabled first ensures that only disabled students with zero absences are considered.",
        "ground_truth_sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN unemployed AS T3 ON T3.name = T2.name WHERE T1.month = 0",
        "difficulty": ""
    },
    {
        "question": "List the brand names of bottled root beer whose first brewing year is no later than 1930.",
        "hint": "bottled root beer refers to ContainerType = 'Bottle'; first brewing year is no later than 1930 refers to FirstBrewedYear < 1930;",
        "error_sql": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Bottle' AND T2.FirstBrewedYear < 1930",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen comparing dates in SQL, it's essential to consider the entire date, not just the year. In this case, the error SQL query and the SQL after reflection only compared the year, which could lead to incorrect results if there are root beers brewed in 1930. To avoid this, compare the entire date, and if only the year is provided, append a month and day to ensure accurate results. Additionally, consider adding an ORDER BY and LIMIT clause to ensure that only the earliest brewed root beer is returned, as in the Ground Truth SQL.",
        "ground_truth_sql": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FirstBrewedYear < '1930-01-01' AND T1.ContainerType = 'Bottle' ORDER BY T2.FirstBrewedYear LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the total number of awards won by The simpson 20s: Season 20?",
        "hint": "total number of awards refers to COUNT(award); awards won refers to result = 'Winner';",
        "error_sql": "SELECT COUNT(T1.award_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Winner' AND T2.title = 'The simpson 20s: Season 20'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, it's essential to carefully consider the relationships between tables and the conditions specified in the query. In this case, the error was due to the fact that the query was filtering awards based on the title of an episode, but the Award table does not have a direct relationship with the Episode table based on the title. Instead, it's based on the episode_id. However, the Ground Truth SQL query suggests that the question is actually asking for the total number of awards won, regardless of the episode title. Therefore, the correct approach is to simply count the awards with the result 'Winner', without joining with the Episode table or filtering by episode title.",
        "ground_truth_sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner';",
        "difficulty": ""
    },
    {
        "question": "What is the percentage of the the users who would bring up a mental health issue with a potential employer in an interview?",
        "hint": "Percentage = DIVIDE(SUM(AnswerText = 'Yes' Or AnswerText = 'Maybe'), COUNT(QuestionID = 12))* 100",
        "error_sql": "SELECT CAST(SUM(IIF(T1.AnswerText = 'Yes' OR T1.AnswerText = 'Maybe', 1, 0)) AS REAL) / COUNT(T1.QuestionID) * 100 FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 12",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages, ensure that the numerator and denominator are correctly aligned with the question being asked. In this case, the numerator should count the number of 'Yes' or 'Maybe' answers, while the denominator should count the total number of users who answered the question, not the total number of answers. Additionally, use a CASE statement or equivalent to handle multiple conditions in the numerator, and consider using the LIKE operator to account for variations in answer text.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 12",
        "difficulty": ""
    },
    {
        "question": "List out the number of students who have the longest duration of absense from school and enlisted in the peace corps.",
        "hint": "longest duration of absence refers to MAX(month); peace corps refers to organ = 'peace_corps';",
        "error_sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'peace_corps' AND T1.month = ( SELECT MAX(month) FROM longest_absense_from_school )",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with aggregate functions like MAX, MIN, or COUNT, consider whether you need to filter the data before applying the aggregation or if you need to apply the aggregation first and then filter the results. In this case, the mistake was trying to filter the data based on the MAX(month) value, which would only return one row, instead of ordering the data by month in descending order and then limiting the result to the top row. This is because the MAX function returns a single value, whereas the ORDER BY and LIMIT approach returns the entire row(s) that correspond to the maximum value.",
        "ground_truth_sql": "SELECT COUNT(T1.NAME) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'peace_corps' ORDER BY T1.month DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What are the top 10 oldest movies and what are the average rating score for each movie? Indicate the name of the director and when the movies were released.",
        "hint": "the average rating score refers to AVG(T2.rating_score); oldest movies refers to MIN(rating_timestamp_utc)",
        "error_sql": "SELECT T1.movie_title, T1.director_name, T1.movie_release_year, AVG(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.movie_title, T1.director_name, T1.movie_release_year ORDER BY T1.movie_release_year LIMIT 10",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and aggregating data, ensure that the ORDER BY clause is based on the correct column that represents the desired sorting criteria. In this case, the goal was to find the top 10 oldest movies based on their release year, but the correct sorting should be based on the rating timestamp, which indicates when the movie was rated. Additionally, the AVG function should be applied to the rating score, and the result should be sorted in ascending order (ASC) to get the oldest movies. The corrected query should also include the movie_id in the SELECT clause to ensure that the correct movies are being referenced.",
        "ground_truth_sql": "SELECT T2.movie_id, AVG(T1.rating_score), T2.director_name, T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.rating_timestamp_utc ASC LIMIT 10",
        "difficulty": ""
    },
    {
        "question": "List at least 10 users ID that has 4 as an average ratings of all reviews sent.",
        "hint": "4 as an average rating refers to user_average_stars = 4",
        "error_sql": "SELECT user_id FROM Users WHERE user_average_stars = 4",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen the task is to list at least a certain number of items (in this case, 10 users ID), but the actual query should return the count of items that meet the condition, it's essential to understand the difference between listing items and counting items. The correct approach is to use the COUNT() function to get the total number of items that meet the condition, rather than using LIMIT to restrict the number of items returned. This ensures that the query returns the correct information, which is the total count of users with an average rating of 4, rather than just listing 10 users who meet the condition.",
        "ground_truth_sql": "SELECT COUNT(user_id) FROM Users WHERE user_average_stars = 4 LIMIT 10",
        "difficulty": ""
    },
    {
        "question": "What are the highest salary earn by the the employee and what is his/her position in the company?",
        "hint": "highest salary refers to max(salary); position refers to Title",
        "error_sql": "SELECT MAX(T1.Price), T2.Title FROM Products AS T1 INNER JOIN Employees AS T2 ON T1.EmployeeID = T2.EmployeeID",
        "compiler_hint": "no such column: salary",
        "reflective_cot": "### Tip:\nWhen generating SQL queries, ensure that the columns and tables referenced in the query actually exist in the database schema. In this case, the `salary` and `Title` columns do not exist in the `Employees` table, and the `EmployeeID` column does not exist in the `Products` table. Always verify the schema before generating a query to avoid such errors. Additionally, be cautious when joining tables to ensure that the join conditions are correct and that the columns being referenced are present in the joined tables.",
        "ground_truth_sql": "SELECT Salary, Title FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )",
        "difficulty": ""
    },
    {
        "question": "What is the highest total points a team got in a year?",
        "hint": "the highest total points = MAX(Pts)",
        "error_sql": "SELECT MAX(Pts) FROM Teams",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the maximum or minimum value of a column in a database, consider whether the column is unique for each row or if it can be aggregated across multiple rows. In this case, the Pts column represents the total points for a team in a specific year, but there can be multiple teams in the same year. Therefore, simply using MAX(Pts) would not give the correct result. Instead, we need to group the teams by year and then find the maximum total points. However, the question asks for the highest total points a team got in a year, not the highest total points across all teams in a year. Therefore, we need to group the teams by year and team ID, and then find the maximum total points.",
        "ground_truth_sql": "SELECT SUM(Pts), year FROM Teams GROUP BY year, tmID ORDER BY SUM(Pts) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the bike trips started on the days with a fog in 2013, how many of those trips started from the station \"2nd at Townsend\"?",
        "hint": "started on the days with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013'; started from station refers to start_station_name; start_station_name = '2nd at Townsend';",
        "error_sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'fog' AND SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T1.start_station_name = '2nd at Townsend'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join condition is correct and consider all relevant constraints. In this case, the `zip_code` in the `trip` table should match the `zip_code` in the `weather` table, but the `zip_code` in the `weather` table should also be a specific value (94107) to accurately filter the results. Additionally, when filtering dates, use the `LIKE` operator with the correct pattern to match the desired year, and be mindful of the case sensitivity of the event type ('Fog' instead of 'fog').",
        "ground_truth_sql": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T1.start_station_name = '2nd at Townsend' AND T2.zip_code = 94107",
        "difficulty": ""
    },
    {
        "question": "On 11/3/2013, which stations are often empty? Indicate the names of the stations.",
        "hint": "time = '11/3/2013'; which stations are empty refers to bikes_available = '0';",
        "error_sql": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 INNER JOIN status AS T2 ON T1.start_station_id = T2.station_id WHERE T2.time = '11/3/2013' AND T2.bikes_available = 0",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the correct columns are being referenced. In this case, the initial error was due to joining the 'trip' table instead of the 'station' table with the 'status' table. Additionally, the date format in the 'status' table was assumed to be 'MM/DD/YYYY' but it was actually 'YYYY/MM/DD', so the correct LIKE operator should be used to match the date format. Always verify the table schema and data formats before writing SQL queries.",
        "ground_truth_sql": "SELECT DISTINCT T1.name FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.bikes_available = 0 AND T2.time LIKE '2013/11/03%'",
        "difficulty": ""
    },
    {
        "question": "Calculate the total trading quantity of Abraham sold to Aaron Alexander.",
        "hint": "total trading quantity = SUM(Quantity WHERE Employees.FirstName = 'Abraham' AND Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander');",
        "error_sql": "SELECT SUM(T4.Quantity) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID INNER JOIN Sales AS T4 ON T3.CustomerID = T4.CustomerID WHERE T1.FirstName = 'Abraham' AND T3.FirstName = 'Aaron' AND T3.LastName = 'Alexander'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions are correct and that the same table is not joined multiple times with different aliases, which can lead to incorrect results. Also, when filtering data, use the correct table alias to avoid ambiguity. In this case, the error was caused by joining the Sales table twice with different aliases, and not using the correct table alias in the WHERE clause. To avoid this mistake, carefully review the join conditions and table aliases, and use the correct table alias when filtering data. Additionally, consider using the actual values from the database instead of relying on string matching for filtering, as shown in the Ground Truth SQL.",
        "ground_truth_sql": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T2.SalesPersonID = 1 AND T1.FirstName = 'Aaron' AND T1.LastName = 'Alexander' AND T3.FirstName = 'Abraham'",
        "difficulty": ""
    },
    {
        "question": "List out student names that enrolled in two schools and two organizations?",
        "hint": "enrolled in two schools refers to COUNT(school) = 2; two organizations refers to COUNT(organ) = 2;",
        "error_sql": "SELECT name FROM (SELECT name, school, organ FROM Enrollments) GROUP BY name HAVING COUNT(DISTINCT school) = 2 AND COUNT(DISTINCT organ) = 2",
        "compiler_hint": "no such table: Student",
        "reflective_cot": "### Tip:\nWhen dealing with complex queries involving multiple tables, ensure that you accurately identify the relationships between tables and use the correct join operations. In this case, the error was due to incorrect use of UNION ALL and GROUP BY, which did not accurately capture the relationships between Enrolled and Enlist tables. Instead, use INNER JOIN to combine the tables based on a common column (name) and then apply the GROUP BY and HAVING clauses to filter the results. Additionally, use COUNT(DISTINCT) to avoid counting duplicate values.",
        "ground_truth_sql": "SELECT T.name FROM ( SELECT T1.name, COUNT(T1.organ) AS num FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num = 2",
        "difficulty": ""
    },
    {
        "question": "Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers.",
        "hint": "average ratings of at least 4 refers to user_average_stars > = 4; no fans or followers refers to user_fans = 'None'; percentage = divide(count(user_id where user_average_stars > = 4 and user_fans = 'None'), sum(user_id where user_average_stars > = 4))*100%",
        "error_sql": "SELECT CAST(SUM(IIF(user_average_stars >= 4 AND user_fans = 'None', 1, 0)) AS REAL) * 100 / COUNT(user_id) FROM Review WHERE user_average_stars >= 4",
        "compiler_hint": "no such table: Users",
        "reflective_cot": "### Tip: \nWhen using conditional aggregation, it's essential to use the correct syntax. In this case, the initial query used `IIF` which is not a standard SQL function, whereas the correct syntax is `CASE WHEN` as shown in the Ground Truth SQL. Additionally, the condition `user_average_stars >= 4` should be applied in the `WHERE` clause, not within the `CASE` statement. To avoid similar mistakes, always verify the SQL dialect being used and ensure that the syntax is correct for that dialect.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN user_fans = 'None' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users WHERE user_average_stars >= 4",
        "difficulty": ""
    },
    {
        "question": "How many distinct movies in English stars a male actor who acts the best?",
        "hint": "Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English",
        "error_sql": "SELECT COUNT(DISTINCT T1.movie_id) FROM actor AS T1 INNER JOIN movie AS T2 ON T1.movie_id = T2.movie_id WHERE T1.a_gender = 'M' AND T2.isEnglish = 'T'",
        "compiler_hint": "no such table: acting",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column being counted is from the correct table. In this case, the question asks for the number of distinct movies, but the correct column to count is actually the actorid, not the movieid, because the question asks for the number of distinct movies that star a male actor who acts the best, implying that the actor is the main subject of the query.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.isEnglish = 'T' AND T1.a_gender = 'M' AND T1.a_quality = 5",
        "difficulty": ""
    },
    {
        "question": "How many times did Keven Kuhn receive DTaP immunization?",
        "hint": "DTaP immunization refers to immunizations where DESCRIPTION = 'DTaP';",
        "error_sql": "SELECT COUNT DESCRIPTION FROM immunization WHERE DESCRIPTION = 'DTaP' AND PAT_NAME = 'Keven Kuhn'",
        "compiler_hint": "no such table: immunizations",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column being counted is the one that is most relevant to the query's purpose. In this case, counting 'CODE' is more accurate than counting 'DESCRIPTION' because 'CODE' is likely to be unique for each immunization, whereas 'DESCRIPTION' might be the same for multiple immunizations. Additionally, verify the column names and table names to ensure they match the actual schema, and use the correct table alias in the COUNT function.",
        "ground_truth_sql": "SELECT COUNT(T2.CODE) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.DESCRIPTION = 'DTaP'",
        "difficulty": ""
    },
    {
        "question": "What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994?",
        "hint": "total amount of tax refers to sum(multiply(multiply(l_extendedprice, subtract(1, l_discount)), add(1, l_tax))); customer 88931 refers to o_custkey = 88931; on 7/13/1994 refers to o_orderdate = '1994-07-13'",
        "error_sql": "SELECT SUM(T1.l_extendedprice * (1 - T1.l_discount) * (1 + T1.l_tax)) FROM orders AS T2 INNER JOIN lineitem AS T1 ON T1.l_orderkey = T2.o_orderkey WHERE T2.o_custkey = 88931 AND T2.o_orderdate = '1994-07-13'",
        "compiler_hint": "no such table: lineitem",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column names used in the SELECT, WHERE, and JOIN clauses match the actual column names in the tables. In this case, the error occurred because the column 'l_extendedprice', 'l_discount', and 'l_tax' are from the 'lineitem' table, but in the Error SQL Query, they were referenced from the 'lineitem' table aliased as 'T1', which is incorrect. The correct alias for 'lineitem' is 'T2'. To avoid this mistake, double-check the table aliases and column names to ensure they match the actual table and column names.",
        "ground_truth_sql": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = 88931 AND T1.o_orderdate = '1994-07-13'",
        "difficulty": ""
    },
    {
        "question": "Provide the social security number of the patient with the highest systolic blood pressure.",
        "hint": "social security number refers to ssn; highest systolic blood pressure refers to MAX(observations.VALUE WHERE observations.DESCRIPTION = 'Systolic Blood Pressure');",
        "error_sql": "SELECT T1.ssn FROM patient AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T2.VALUE DESC LIMIT 1",
        "compiler_hint": "no such table: patients",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column names used in the ON clause match the actual column names in the tables. In this case, the error occurred because the column name in the patients table is actually 'patient', not 'ssn' or any other name. Also, the alias 'T1' and 'T2' should be assigned based on the order of the tables in the FROM and JOIN clauses. In the error SQL query, 'T1' was assigned to 'patients' but in the correct query, 'T1' should be assigned to 'observations' because it is the first table in the FROM clause.",
        "ground_truth_sql": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count.",
        "hint": "category refers to category_name; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Active Life'), SUM(review_count = 'LOW')), 1.0);",
        "error_sql": "SELECT CAST(SUM(CASE WHEN category_name = 'Active Life' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN review_count = 'Low' THEN 1 ELSE 0 END) FROM Business AS T1 INNER JOIN Review AS T2 ON T1.business_id = T2.business_id",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip:\nWhen generating SQL queries, ensure that the subqueries and the main query are correctly aligned in terms of the columns being referenced. In the provided Error SQL Query and SQL after Reflection, the subqueries were not correctly aligned with the main query, leading to incorrect results. Additionally, verify that the conditions in the CASE statements are correctly specified, including the use of LIKE instead of = for string comparisons. Furthermore, ensure that the subqueries are correctly nested and that the columns being referenced are correctly qualified with the table aliases.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id",
        "difficulty": ""
    },
    {
        "question": "Which two countries share the second highest mountain? Give the country code.",
        "hint": "",
        "error_sql": "SELECT T2.country_code FROM country_mountains AS T1 INNER JOIN countries AS T2 ON T1.country_code = T2.country_code INNER JOIN mountains AS T3 ON T1.mountain_id = T3.mountain_id GROUP BY T2.country_code ORDER BY T3.height DESC LIMIT 2 OFFSET 1",
        "compiler_hint": "no such table: mountains",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and the tables being joined actually exist in the database. In this case, the error was due to a non-existent table 'country_mountains' and incorrect join conditions. To avoid this mistake, carefully review the database schema and ensure that the tables and columns being referenced actually exist and are correctly named. Additionally, verify that the join conditions are logical and correctly relate the tables being joined.",
        "ground_truth_sql": "SELECT T1.Code FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1, 1 )",
        "difficulty": ""
    },
    {
        "question": "Among the classic movies, how many movies have a rental rate of less than 1?",
        "hint": "classic movie refers to name = 'Classics'; rental rate of less than 1 refers to rental_rate < 1; movie refers to film_id",
        "error_sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN category AS T2 ON T1.film_id = T2.film_id INNER JOIN film_category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Classics' AND T1.rental_rate < 1",
        "compiler_hint": "no such table: film",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order and the table aliases are correct. In this case, the error occurred because the join order was incorrect, and the table aliases were not properly assigned. To avoid this mistake, carefully examine the table relationships and the query logic to ensure that the joins are performed in the correct order and that the table aliases are correctly assigned. Additionally, verify that the column names and table names match the actual schema to avoid errors like \"no such table: film\".",
        "ground_truth_sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate < 1 AND T2.name = 'Classics'",
        "difficulty": ""
    },
    {
        "question": "Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations?",
        "hint": "Georgia refer to school_state = 'GA'\n",
        "error_sql": "SELECT T1.payment_method FROM schools AS T1 INNER JOIN donations AS T2 ON T1.school_id = T2.school_id WHERE T1.school_state = 'GA' GROUP BY T1.payment_method ORDER BY COUNT(T1.payment_method) DESC LIMIT 1",
        "compiler_hint": "no such table: donations",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column used in the GROUP BY clause is from the correct table and is not ambiguous. In this case, the GROUP BY clause should be grouping by the payment_method, not the school_state. Also, verify that the column used in the SELECT statement is from the correct table. In this case, the payment_method should be selected from the donations table (T1), not the projects table (T2).",
        "ground_truth_sql": "SELECT T1.payment_method FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_state = 'GA' GROUP BY T2.school_state ORDER BY COUNT(T1.payment_method) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What ingredients does the longest cooking time recipe have?",
        "hint": "the longest cooking time refers to MAX(cook_min)",
        "error_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T2.ingredient_id = T3.ingredient_id WHERE T1.cook_min = ( SELECT MAX(cook_min) FROM Recipe )",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the maximum or minimum value of a column and then joining it with other tables to get related data, consider using ORDER BY and LIMIT instead of using a subquery to find the maximum or minimum value. This is because the subquery will return the maximum or minimum value, but it will not guarantee that the joined data is from the same row as the maximum or minimum value. In this case, the subquery returns the maximum cooking time, but the joined data may not be from the recipe with the maximum cooking time. Using ORDER BY and LIMIT ensures that the joined data is from the same row as the maximum or minimum value.",
        "ground_truth_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Which supplier can provide the most number of \"hot spring dodger dim light\"? Please give the supplier's phone number.",
        "hint": "the most number refers to max(ps_availqty); \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone",
        "error_sql": "SELECT T1.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1",
        "compiler_hint": "no such table: supplier",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order is correct and logical. The order should typically start with the table that is being filtered (in this case, the 'part' table with the specific 'p_name'), followed by the tables that are being joined to it. This helps to avoid incorrect join orders that can lead to errors. Additionally, double-check the table aliases and column names to ensure they are correct and consistent throughout the query.",
        "ground_truth_sql": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the name of the organization which most of the students are enlisted in?",
        "hint": "name of the organization refers to organ; organization which most of the students are enlisted in refers to MAX(COUNT(organ));",
        "error_sql": "SELECT organ FROM Enlistments GROUP BY organ ORDER BY COUNT(organ) DESC LIMIT 1",
        "compiler_hint": "no such table: enlist",
        "reflective_cot": "### Tip:\nWhen using aggregate functions like COUNT() in the ORDER BY clause, it's essential to use a subquery or a Common Table Expression (CTE) to calculate the count first, and then order the results. This is because the ORDER BY clause is executed before the aggregate function is calculated, resulting in incorrect ordering. By using a subquery or CTE, you ensure that the count is calculated first, and then the results are ordered correctly.",
        "ground_truth_sql": "SELECT organ FROM ( SELECT organ, COUNT(organ) AS num FROM enlist GROUP BY organ ) T ORDER BY T.num DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Calculate the average net profit of bar tools which has ordered quantity exceed 5.",
        "hint": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bar Tools' and Order Quantity > 5;",
        "error_sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.`Unit Price`, 2), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.`Unit Cost`, 2), ',', '') AS REAL)) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T1._ProductID = T2.ProductID WHERE T2.`Product Name` = 'Bar Tools' AND T1.`Order Quantity` > 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the average of a value, make sure to use the SUM function to add up all the values and then divide by the COUNT of rows, rather than using the AVG function directly on the calculated values. This is because AVG function may not work correctly with calculated values, especially when the values are not numeric. Additionally, be careful when using string manipulation functions like REPLACE, SUBSTR, and CAST, as they can be error-prone and may not work as expected. Always test your queries thoroughly to ensure they produce the correct results.",
        "ground_truth_sql": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Bar Tools' AND T1.`Order Quantity` > 5",
        "difficulty": ""
    },
    {
        "question": "How much taller is David Bornhammar than Pauli Levokari in centimeters?",
        "hint": "how much taller = SUBTRACT(SUM(height_in_cm WHERE PlayerName = 'David Bornhammar'), SUM(height_in_cm WHERE PlayerName = 'Pauli Levokari')); height in centimeters refers to height_in_cm;",
        "error_sql": "SELECT (SUM(CASE WHEN PlayerName = 'David Bornhammar' THEN height_in_cm ELSE 0 END) - SUM(CASE WHEN PlayerName = 'Pauli Levokari' THEN height_in_cm ELSE 0 END)) FROM player",
        "compiler_hint": "no such table: players",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that you accurately identify the tables involved and their relationships. In this case, the error was due to not joining the correct tables (`PlayerInfo` and `height_info`) and not using the correct column names. To avoid this mistake, carefully review the schema and column descriptions before generating the query. Additionally, consider breaking down complex queries into simpler sub-queries, as seen in the Ground Truth SQL, to improve readability and accuracy.",
        "ground_truth_sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )",
        "difficulty": ""
    },
    {
        "question": "Among the menu pages on which the dish \"Paysanne Soup\" had appeared, how many of them had a stable price for the dish?",
        "hint": "Paysanne Soup is a name of dish; stable price refers to highest_price is null;",
        "error_sql": "SELECT COUNT(T2.menu_page_id) FROM dish AS T1 INNER JOIN dish_appearance AS T2 ON T1.dish_id = T2.dish_id INNER JOIN menu_page AS T3 ON T2.menu_page_id = T3.menu_page_id WHERE T1.name = 'Paysanne Soup' AND T2.highest_price IS NULL",
        "compiler_hint": "no such table: menu_page",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join order and conditions are correct. In this case, the error occurred because the join order was incorrect, and the conditions were not properly aligned with the table schema. To avoid this mistake, carefully review the table schema and the join conditions to ensure that they are correct and logically consistent. Additionally, when using table aliases, ensure that they are consistently used throughout the query to avoid confusion. In this case, the correct join order is to start with the Dish table, then join with MenuItem, and the condition should be on the Dish table's name and the MenuItem's highest_price.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.name = 'Paysanne Soup' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL",
        "difficulty": ""
    },
    {
        "question": "Calculate the average number of disabled female students enrolled in UCI.",
        "hint": "average = DIVIDE(SUM(disabled.name who are not in male.name WHERE school = 'uci'), COUNT(enrolled.name)); female students refers to disabled.name who are NOT in male.name; UCI refers to school = 'uci';",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.name NOT IN (SELECT name FROM male) THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.name) FROM Enrollments AS T1 INNER JOIN Disabled AS T2 ON T1.name = T2.name WHERE T1.school = 'uci'",
        "compiler_hint": "no such table: enrolled",
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join conditions are correct and consider all relevant tables that may affect the result. In this case, the `person` table was missing, which contains the gender information, and a `LEFT JOIN` with the `male` table was necessary to correctly identify female students. Additionally, the `IIF` function is more suitable for this scenario than `CASE WHEN` because it allows for more complex conditions.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T1.school = 'uci' AND T4.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN person AS T3 ON T1.name = T3.name LEFT JOIN male AS T4 ON T3.name = T4.name",
        "difficulty": ""
    },
    {
        "question": "List down the author ID of authors with a name of \"Peter\".",
        "hint": "\"Peter\" is the name of author",
        "error_sql": "SELECT Id FROM Author WHERE Name = 'Peter'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying a database, it's essential to consider the relationships between tables and the specific table that contains the desired information. In this case, the `Author` table contains the author's name, but the `PaperAuthor` table contains the author's ID in relation to a specific paper. However, the `PaperAuthor` table also contains the author's name, which is not necessarily the same as the author's name in the `Author` table. To get the correct author ID, we should query the `Author` table directly, not the `PaperAuthor` table. The correct query should be `SELECT Id FROM Author WHERE Name = 'Peter'`. The mistake was made by querying the `PaperAuthor` table instead of the `Author` table. To avoid this mistake in the future, always carefully consider the relationships between tables and the specific table that contains the desired information.",
        "ground_truth_sql": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'",
        "difficulty": ""
    },
    {
        "question": "State the name of menu with the longest full height.",
        "hint": "longest full height refers to MAX(full_height);",
        "error_sql": "SELECT T1.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id ORDER BY T2.full_height DESC LIMIT 1",
        "compiler_hint": "no such table: menu",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that you accurately identify the relevant tables and their relationships. In this case, the error occurred because the initial query referenced a non-existent table 'menu' and the second query, although referencing the correct tables, did not accurately represent the relationship between 'MenuPage' and 'Menu'. To avoid this mistake, carefully review the schema to identify the correct tables and their relationships, and ensure that the query accurately reflects these relationships.",
        "ground_truth_sql": "SELECT T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T1.full_height DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively.",
        "hint": "viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));",
        "error_sql": "SELECT T3.gender, COUNT(T3.gender) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN conditions AS T3 ON T2.patient = T3.PATIENT WHERE T1.DESCRIPTION = 'Viral sinusitis (disorder)' GROUP BY T3.gender",
        "compiler_hint": "no such table: conditions",
        "reflective_cot": "### Tip: \nWhen writing SQL queries, especially when dealing with aggregate functions and conditional counting, consider the exact requirements of the query. In this case, the goal was to count the number of patients by gender, but the initial queries did not accurately achieve this. The first query was incorrect due to a table aliasing issue, and the second query, although corrected the aliasing, still did not provide the desired output format. The ground truth SQL query uses conditional counting with SUM and CASE statements to accurately count the number of patients by gender. To avoid similar mistakes, take the time to carefully review the query requirements and consider alternative approaches, such as using conditional counting or pivoting, to achieve the desired output format.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "difficulty": ""
    },
    {
        "question": "Which flight carrier operator flies from Atlantic City to Fort Lauderdale?",
        "hint": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; from Atlantic City refers to ORIGIN = 'ACY'; to Fort Lauderdale refers to DEST = 'FLL';",
        "error_sql": "SELECT OP_CARRIER_AIRLINE_ID FROM ontime WHERE ORIGIN = 'ACY' AND DEST = 'FLL'",
        "compiler_hint": "no such table: flights",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the columns used in the WHERE clause are from the correct table. Additionally, consider the need for aggregation (e.g., GROUP BY) when retrieving data from multiple tables, especially if the query is expected to return a single value or a distinct set of values. In this case, the initial query was incorrect because it did not join the Airlines table with the Air Carriers table, and the second query was incorrect because it did not include the GROUP BY clause to ensure that only distinct carrier descriptions were returned.",
        "ground_truth_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description",
        "difficulty": ""
    },
    {
        "question": "What is the first name of the driver who transported shipment id 1028?",
        "hint": "shipment id 1028 refers to ship_id = 1028",
        "error_sql": "SELECT T1.first_name FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id WHERE T2.ship_id = 1028",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and selecting columns, ensure that the table alias used in the SELECT statement matches the table alias used in the JOIN clause. In this case, the error occurred because the SELECT statement used T1 for the driver table, but the JOIN clause used T2 for the driver table. To avoid this mistake, double-check that the table aliases are consistent throughout the query. Additionally, when selecting columns, consider selecting all relevant columns (e.g., first_name and last_name) to provide more complete information.",
        "ground_truth_sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = 1028",
        "difficulty": ""
    },
    {
        "question": "How many awards had been held in 2009?",
        "hint": "had been held in 2009 refers to year = 2009",
        "error_sql": "SELECT COUNT(*) FROM award WHERE year = 2009",
        "compiler_hint": "no such table: awards",
        "reflective_cot": "### Tip: \nAlways verify the exact table and column names from the schema before generating SQL queries, and ensure that the data type of the column matches the operation being performed. In this case, the correct table name is 'Award' (with a capital 'A'), and the 'year' column seems to be a string, so using SUBSTR to extract the year is correct.",
        "ground_truth_sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009';",
        "difficulty": ""
    },
    {
        "question": "How many trains are running west?",
        "hint": "west is a direction",
        "error_sql": "SELECT COUNT(*) FROM train_direction AS T1 INNER JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.direction = 'west'",
        "compiler_hint": "no such table: train",
        "reflective_cot": "### Tip: \nAlways verify the table and column names in the database schema before generating SQL queries. In this case, the correct table name is 'trains' (plural) instead of 'train', and the correct column name is 'direction' which exists in the 'trains' table.",
        "ground_truth_sql": "SELECT COUNT(id) FROM trains WHERE direction = 'west'",
        "difficulty": ""
    },
    {
        "question": "What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times?",
        "hint": "release title refers to groupName; Ron Hunt is an artist; groupYear = 1979; releaseType = 'single'; downloaded 239 times refer to totalSnatched = 239;",
        "error_sql": "SELECT T1.groupName FROM releases AS T1 INNER JOIN artists AS T2 ON T1.artistId = T2.artistId WHERE T2.artistName = 'Ron Hunt' AND T1.groupYear = 1979 AND T1.releaseType = 'single' AND T1.totalSnatched = 239",
        "compiler_hint": "no such table: groups",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the column names are accurate. In this case, the error was due to joining the 'torrents' table with 'artists' and 'releases' tables, but 'releases' is not a valid table. Also, the join condition should be based on the correct column names. Additionally, the 'LIKE' operator should be used instead of '=' when comparing strings with potential variations in case or punctuation. Furthermore, the 'artistName' should be compared with the exact string 'ron hunt & ronnie g & the sm crew' instead of just 'Ron Hunt'.",
        "ground_truth_sql": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239",
        "difficulty": ""
    },
    {
        "question": "How many trips which subscription types were Subscriber and ended in San Jose city?",
        "hint": "ended in refers to end_station_name;",
        "error_sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is based on the correct columns. In this case, the error was due to joining on `end_station_id` instead of `end_station_name`. To avoid this mistake, carefully review the schema and the relationships between tables to ensure that the join conditions are correct. Additionally, consider using foreign keys to establish relationships between tables, which can help prevent such errors.",
        "ground_truth_sql": "SELECT COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'",
        "difficulty": ""
    },
    {
        "question": "For each donation not from a teacher, state the donor account id and calculate the percentage of donation given for optional support.",
        "hint": "not from a teacher refers to is_teacher_acct = 'f'; donor account id refers to donor_acctid; percentage of donation = divide(donation_optional_support, donation_total)*100%",
        "error_sql": "SELECT T1.donor_acctid, CAST(T1.donation_optional_support AS REAL) * 100 / T1.donation_total FROM Donation AS T1 INNER JOIN Donor AS T2 ON T1.donor_acctid = T2.donor_acctid WHERE T2.is_teacher_acct = 'f'",
        "compiler_hint": "no such table: donations",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the column names and table names match exactly with those in the schema, and avoid unnecessary joins or casts. In this case, the error was due to an unnecessary join and cast, and the column 'is_teacher_acct' was assumed to be in the 'donations' table, when in fact it was not necessary to join with the 'donors' table. Also, the division operation in SQL will automatically return a decimal result if the database system supports it, so the explicit cast to REAL is not necessary.",
        "ground_truth_sql": "SELECT donor_acctid, donation_optional_support / donation_total FROM donations WHERE is_teacher_acct = 'f'",
        "difficulty": ""
    },
    {
        "question": "Is the oldest device user male or female?",
        "hint": "MAX(Age) AND gender = 'M' means that the oldest device user is male; MAX(Age) AND gender = 'F' means that the oldest device user is female;",
        "error_sql": "SELECT CASE WHEN MAX(CASE WHEN T2.gender = 'M' THEN T1.Age END) > MAX(CASE WHEN T2.gender = 'F' THEN T1.Age END) THEN 'M' ELSE 'F' END FROM device AS T1 INNER JOIN user AS T2 ON T1.user_id = T2.user_id",
        "compiler_hint": "no such table: device_user",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, it's essential to carefully examine the schema and understand the relationships between tables. In this case, the error occurred because the query was trying to access a non-existent table 'device' and also because it was trying to find the maximum age from the 'device_user' table which does not have an 'Age' column. The correct approach is to join the relevant tables ('user' and 'device_user') and then find the maximum age from the 'user' table. Additionally, the 'gender_age' table seems to be a more straightforward table to query for this problem, making the join unnecessary. Always take a moment to review the schema and consider the simplest solution.",
        "ground_truth_sql": "SELECT gender FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )",
        "difficulty": ""
    },
    {
        "question": "Among the states with a public school count of 20 and below, list their race.",
        "hint": "public refers to control = 'Public'; school_count < 20;",
        "error_sql": "SELECT race FROM public_schools WHERE school_count <= 20",
        "compiler_hint": "no such table: schools",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table names and column names match the actual schema of the database. In this case, the error occurred because the table name 'schools' was incorrect, and the correct tables 'state_sector_details' and 'state_sector_grads' needed to be joined to access the required columns. Always verify the schema before generating a query to avoid such mistakes.",
        "ground_truth_sql": "SELECT DISTINCT T2.race FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count <= 20 AND T1.control = 'Public'",
        "difficulty": ""
    },
    {
        "question": "What is the average rating of inactive businesses?",
        "hint": "rating refers to stars; inactive refers to active = 'False'; average rating of inactive businesses = DIVIDE(SUM(stars), COUNT(business_id));",
        "error_sql": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business_Categories AS T2 INNER JOIN Business AS T1 ON T2.business_id = T1.business_id WHERE T1.active = 'False'",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip: \nWhen working with boolean values in SQL, it's essential to use the correct syntax. In this case, the 'active' column is a boolean field, and the correct way to filter inactive businesses is by using 'active = FALSE' or 'active = 0' instead of 'active LIKE 'FALSE''. The 'LIKE' operator is used for pattern matching in strings, not for comparing boolean values.",
        "ground_truth_sql": "SELECT CAST(SUM(stars) AS REAL) / COUNT(business_id) AS \"average\" FROM Business WHERE active LIKE 'FALSE'",
        "difficulty": ""
    },
    {
        "question": "What are the names of the students who joined the Marines?",
        "hint": "Marines refers to organ = 'marines';",
        "error_sql": "SELECT name FROM Enlistments WHERE organ = 'marines'",
        "compiler_hint": "no such table: enlist",
        "reflective_cot": "### Tip: \nAlways verify the table name in the database schema before generating SQL queries. In this case, the correct table name is 'enlistments' (plural), not 'enlist'. The correct SQL query should be: SELECT name FROM enlistments WHERE organ = 'marines'.",
        "ground_truth_sql": "SELECT name FROM enlist WHERE organ = 'marines'",
        "difficulty": ""
    },
    {
        "question": "Has the product Chainring Bolts been on any of the sales?",
        "hint": "a product that's been on sale refers to SellStartDate NOT null and vice versa;",
        "error_sql": "SELECT CASE WHEN SellStartDate IS NOT NULL THEN 'Yes' ELSE 'No' END FROM Product WHERE Name = 'Chainring Bolts'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen checking if a product has been on sale, consider the relationships between the Product table and other tables that store sales information, such as SpecialOffer and SpecialOfferProduct. A product being on sale is not solely determined by its SellStartDate, but also by its association with special offers. Therefore, join the Product table with SpecialOffer and SpecialOfferProduct tables to accurately determine if a product has been on sale.",
        "ground_truth_sql": "SELECT CASE WHEN COUNT(T1.Description) >= 1 THEN 'Yes' ELSE 'No' END FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Chainring Bolts'",
        "difficulty": ""
    },
    {
        "question": "Compare the total number of orders between customer \"Apollo Ltd\" and \"Pacific Ltd\".",
        "hint": "\"Apollo Ltd\" and \"Pacific Ltd\" are both Customer Names; total number of orders refers to COUNT(OrderNumber)",
        "error_sql": "SELECT COUNT(CASE WHEN T1.`Customer Names` = 'Apollo Ltd' THEN T2.OrderNumber END) - COUNT(CASE WHEN T1.`Customer Names` = 'Pacific Ltd' THEN T2.OrderNumber END) FROM Customers AS T1 INNER JOIN `Sales Orders` AS T2 ON T1.CustomerID = T2._CustomerID",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen comparing the counts of two groups, it's generally better to use separate COUNT() or SUM() functions for each group, rather than trying to subtract the counts directly. This is because the COUNT() function ignores NULL values, so if one of the conditions doesn't match any rows, the COUNT() will return 0, but the subtraction will still work correctly. However, in this case, using separate SUM() functions with CASE statements is a more elegant and flexible solution, as it allows for easy extension to more than two groups. Additionally, using SUM() instead of COUNT() allows for more flexibility in the future, if the query needs to be modified to count something other than rows.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.`Customer Names` = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.`Customer Names` = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID",
        "difficulty": ""
    },
    {
        "question": "How many flights were there on 2018/8/1?",
        "hint": "on 2018/8/1 refers to FL_DATE = '2018/8/1';",
        "error_sql": "SELECT COUNT(*) FROM flights WHERE FL_DATE = '2018/8/1'",
        "compiler_hint": "no such table: ontime",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table name in the FROM clause matches the actual table name in the database schema. In this case, the correct table name is 'ontime', not 'flights' or 'Airlines'. Always verify the table name against the provided schema to avoid such errors.",
        "ground_truth_sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1'",
        "difficulty": ""
    },
    {
        "question": "Among the students from the navy department, how many of them have payment due?",
        "hint": "from the navy department refers to organ = 'navy'; have payment due refers to bool = 'pos';",
        "error_sql": "SELECT COUNT(T1.name) FROM enlistments AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy' AND T2.bool = 'pos'",
        "compiler_hint": "no such table: enlist",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the table names and column names match exactly with the actual schema. In this case, the error was due to incorrect table names ('enrolled' instead of 'no_payment_due') and missing backticks around column names ('name' is a reserved keyword in SQL and should be enclosed in backticks). Always double-check the schema and use exact table and column names to avoid such errors.",
        "ground_truth_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.`name` = T2.`name` WHERE T1.organ = 'navy' AND T2.bool = 'pos'",
        "difficulty": ""
    },
    {
        "question": "Provide the number of events participated by the device users at coordinates of (80,37).",
        "hint": "coordinates of (80,37) refers to longitude = 80 and latitude = 37;",
        "error_sql": "SELECT COUNT(T1.event_id) FROM event_user AS T1 INNER JOIN device_user AS T2 ON T1.user_id = T2.user_id INNER JOIN user AS T3 ON T2.user_id = T3.user_id WHERE T3.longitude = 80 AND T3.latitude = 37",
        "compiler_hint": "no such table: event",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join conditions are correct and the tables being joined actually exist in the database. In this case, the error was due to a non-existent table 'event' and incorrect join conditions. Additionally, analyze the schema carefully to avoid unnecessary joins. In this case, the 'events' table already contains the required columns 'longitude' and 'latitude', making the joins with 'user' and 'device_user' tables unnecessary.",
        "ground_truth_sql": "SELECT COUNT(event_id) FROM events WHERE longitude = 80 AND latitude = 37",
        "difficulty": ""
    },
    {
        "question": "In year 2000, who are the coaches with more than 50 games won. List the coachID, team name and number of game won at home game.",
        "hint": "more than 50 games won refers to won > 50",
        "error_sql": "SELECT T1.coachID, T2.team_name, T1.won \nFROM coach AS T1 \nINNER JOIN team AS T2 \nON T1.teamID = T2.teamID \nWHERE T1.year = 2000 AND T1.won > 50",
        "compiler_hint": "no such table: coach_season",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition includes all relevant columns to avoid incorrect results. In this case, the join condition should include both the team ID and the year to accurately match coaches with their respective teams and seasons. Additionally, verify that the column names and table names are correct, and that the correct table is being used to retrieve the desired information (e.g., won > 50 refers to the won column in the teams table, not the coaches table).",
        "ground_truth_sql": "SELECT T1.coachID, T2.name, T2.won FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2000 AND T2.won > 50",
        "difficulty": ""
    },
    {
        "question": "Name the neighborhood of the community area in crime with report number 23843?",
        "hint": "neighborhood refers to neighborhood_name; '23778' is the report_no",
        "error_sql": "SELECT T2.neighborhood_name FROM Community_Area AS T2 INNER JOIN Crime_Data AS T1 ON T1.community_area_number = T2.area_number WHERE T1.report_no = '23843'",
        "compiler_hint": "no such table: Crime",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table names and column names match exactly with the actual schema. In this case, the error was due to incorrect table names ('Community_Area' instead of 'Community_Areas' and 'Neighborhood' instead of 'Neighborhoods') and incorrect column names ('community_area_number' instead of 'community_area_no'). To avoid this mistake, double-check the schema before writing the SQL query.",
        "ground_truth_sql": "SELECT T3.neighborhood_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T2.report_no = 23778",
        "difficulty": ""
    },
    {
        "question": "Identify the user who has been yelping since 2004. Is he or she an Yelp Elite member?",
        "hint": "has been yelping since 2004 refers to user_yelping_since_year = 2004",
        "error_sql": "SELECT elite FROM yelp_user WHERE yelping_since_year = 2004",
        "compiler_hint": "no such table: User",
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the correct table names are used and that the join conditions are accurate. In this case, the error was due to the incorrect table name 'User' instead of 'Users', and the failure to join the 'Elite' table to correctly identify the Yelp Elite member. To avoid this mistake, carefully review the schema and ensure that all table names and join conditions are correct before executing the query. Additionally, consider the relationships between tables and the specific columns required to answer the question, in this case, the 'Elite' table is necessary to determine if the user is a Yelp Elite member.",
        "ground_truth_sql": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004",
        "difficulty": ""
    },
    {
        "question": "How many inspection points with serious point level that have no fine?",
        "hint": "serious point level refers to point_level = 'Serious '; have no fine refers to fine = 0",
        "error_sql": "SELECT COUNT(point_id) FROM inspection_point WHERE point_level = 'Serious' AND fine = 0",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, consider the potential for duplicate rows and use DISTINCT when counting to avoid overcounting. Also, ensure that the join is necessary and that the correct columns are being compared. In this case, the join with the violation table was necessary to filter for inspection points with no fine, but the DISTINCT keyword was needed to avoid counting duplicate point_ids. Additionally, the correct spelling of 'Serious ' (with a space) was necessary to match the point_level.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0",
        "difficulty": ""
    },
    {
        "question": "Which organization does student 313 belong to?",
        "hint": "organization refers to organ",
        "error_sql": "SELECT organ FROM enlistments WHERE name = 313",
        "compiler_hint": "no such table: enlist",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the column values are correctly formatted and matched with the actual data in the table. In this case, the error occurred because the name was not correctly formatted as 'student313' and later as 'studenT113'. To avoid this mistake, carefully review the table data and ensure that the values used in the WHERE clause are accurate and correctly formatted, including case sensitivity and exact string matching.",
        "ground_truth_sql": "SELECT organ FROM enlist WHERE name = 'studenT113'",
        "difficulty": ""
    },
    {
        "question": "Please list the titles of all the films in the category of \"Horror\".",
        "hint": "\"Horror\" is the name of category",
        "error_sql": "SELECT T3.title FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.name = 'Horror'",
        "compiler_hint": "no such table: film_category",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the order of the tables in the FROM and JOIN clauses matches the order of the tables in the ON clause. In this case, the correct order is to start with the 'film' table, then join 'film_category', and finally join 'category'. This is because we are selecting the title from the 'film' table, and we need to join the 'film_category' table first to get the category_id, and then join the 'category' table to filter by the 'Horror' category.",
        "ground_truth_sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'",
        "difficulty": ""
    },
    {
        "question": "At what latitude is the Thomas Kemper brand beer consumed the most?",
        "hint": "Thomas Kemper refers to BrandName = 'Thomas Kemper';\u00a0 latitude the beer is consumed the most refers to MAX(COUNT(Latitude));",
        "error_sql": "SELECT Latitude FROM ( SELECT Latitude, COUNT(*) as count FROM beer_data WHERE BrandName = 'Thomas Kemper' GROUP BY Latitude ORDER BY count DESC LIMIT 1 )",
        "compiler_hint": "no such table: beer",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table names and column names match the actual schema of the database. In this case, the error occurred because the table name 'beer' was used instead of the actual table names 'rootbeer', 'rootbeerbrand', and 'geolocation'. Additionally, the join conditions and column names should be carefully checked to ensure they match the schema. To avoid this mistake, it's essential to carefully review the database schema before generating SQL queries.",
        "ground_truth_sql": "SELECT T3.Latitude FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Thomas Kemper' GROUP BY T3.Latitude ORDER BY COUNT(T1.BrandID) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among students registered for the most difficult course, list the students' full names who got grade A.",
        "hint": "difficulty refers to diff; most difficult course refers to MAX(diff); student's full names = f_name, l_name;",
        "error_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = (SELECT MAX(diff) FROM course) AND T2.grade = 'A'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen dealing with queries that involve finding the maximum or minimum value of a certain column, consider whether the query should return multiple rows or just one row. In this case, the original query was trying to find students who got grade A in the most difficult course, but it was using a subquery to find the maximum difficulty and then joining the tables to find the students. However, this approach would return all students who got grade A in any course with the maximum difficulty, not just the students in the single most difficult course. To avoid this mistake, consider using ORDER BY and LIMIT to ensure that only one row (or a limited number of rows) is returned, as in the Ground Truth SQL.",
        "ground_truth_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' ORDER BY T3.diff DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "In the state with the highest number of schools, how many institutions have a percentage of no less than 90 of undergraduates who attend full-time? List all of the institutions' names.",
        "hint": "highest number of schools refers to MAX(schools_count); percentage of no less than 90 of undergraduates who attend full-time refers to ft_pct > 90; institutions' names refers to chronname;",
        "error_sql": "SELECT T2.chronname FROM state_sector_grads AS T2 INNER JOIN state_sector_details AS T1 ON T2.stateid = T1.stateid WHERE T1.schools_count = (SELECT MAX(schools_count) FROM state_sector_details) AND T2.ft_pct > 90",
        "compiler_hint": "no such table: state_sector_details",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the tables being joined actually exist in the database. Also, carefully consider the logic of the query, including the use of aggregate functions, filtering, and sorting, to ensure it aligns with the desired outcome. In this case, the error was due to a non-existent table and incorrect logic. To avoid this, take the time to thoroughly review the database schema and the query logic before executing it. Additionally, break down complex queries into smaller parts to test and validate each component before combining them.",
        "ground_truth_sql": "SELECT COUNT(t1.unitid), t1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state WHERE t1.ft_pct > 90 ORDER BY t2.schools_count DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Provide the zip code, city, and congress representative's full names of the area which has highest population in 2020.",
        "hint": "representative's full names refer to first_name, last_name; area which has highest population in 2020 refers to MAX(population_2020);",
        "error_sql": "SELECT T1.zip, T1.city, T2.first_name, T2.last_name FROM zip_city_state AS T1 INNER JOIN congress_representative AS T2 ON T1.congress_district = T2.congress_district ORDER BY T1.population_2020 DESC LIMIT 1",
        "compiler_hint": "no such table: area",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being referenced and that the join conditions are accurate. In this case, the error was due to referencing the wrong table name ('area' instead of 'zip_data') and incorrect join conditions. To avoid this mistake, carefully review the schema and ensure that the table names and join conditions match the actual schema. Additionally, verify that the correct columns are being referenced, especially when there are similar column names across different tables (e.g., 'congress_district' vs 'district', 'congress_rep_id' vs 'cognress_rep_id').",
        "ground_truth_sql": "SELECT T1.zip_code, T1.city, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id GROUP BY T2.district ORDER BY T1.population_2020 DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the average value of the sales order?",
        "hint": "calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "error_sql": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(OrderID) FROM SalesOrders",
        "compiler_hint": "no such table: Sales Orders",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table name in the FROM clause matches the actual table name in the database schema. In this case, the correct table name is `Order Details`, not `Sales Orders`. Always verify the table name to avoid this common mistake.",
        "ground_truth_sql": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(OrderID) FROM `Order Details`",
        "difficulty": ""
    },
    {
        "question": "Does student348 have a due payment?",
        "hint": "payment due refers to bool = 'pos' means the student has payment due , bool = 'neg' means the student does not have payment due;",
        "error_sql": "SELECT bool FROM no_payment_due WHERE name = 'student348'",
        "compiler_hint": "no such table: no_payment_due",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table name in the query matches the actual table name in the database schema. In this case, the correct table name is not provided, but the error message indicates that the table 'no_payment_due' does not exist. To avoid this mistake, carefully review the database schema before generating the SQL query, and verify that the table name is correct.",
        "ground_truth_sql": "SELECT bool FROM no_payment_due WHERE name = 'student348'",
        "difficulty": ""
    },
    {
        "question": "To which user group do most of the users who uses a vivo device belong?",
        "hint": "user group where most of the users belong refers to MAX(COUNT(group)); vivo device refers to phone_brand = 'vivo';",
        "error_sql": "SELECT T2.group FROM device_user AS T1 INNER JOIN user AS T2 ON T1.user_id = T2.user_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.group ORDER BY COUNT(T2.group) DESC LIMIT 1",
        "compiler_hint": "near \"group\": syntax error",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema, and be aware of the potential for keyword conflicts (e.g., 'group' is a reserved keyword in SQL). Always verify the schema and use backticks or square brackets to escape reserved keywords if necessary. Additionally, double-check the table and column names to avoid typos and incorrect references.",
        "ground_truth_sql": "SELECT T.`group` FROM ( SELECT T2.`group`, COUNT(`group`) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.`group` ) AS T ORDER BY T.num DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many games were published by Activision?",
        "hint": "Activision refers to publisher_name = 'Activision';",
        "error_sql": "SELECT COUNT(T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Activision'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen counting the number of games published by a specific publisher, it's essential to join the game table to ensure that each game is only counted once. The initial error SQL query only joined the game_publisher and publisher tables, which could lead to counting the same game multiple times if it has multiple publishers. The SQL after reflection corrected this by joining the game table and using COUNT(DISTINCT T3.id) to ensure each game is only counted once. However, the initial error SQL query and the SQL after reflection both missed the fact that the game_publisher table is a many-to-many relationship table and does not directly relate to the game table. The correct approach is to join the game_publisher table with the game table through the game_id, and then join the publisher table through the publisher_id. The Ground Truth SQL query correctly implements this approach.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T3.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T2.publisher_name = 'Activision'",
        "difficulty": ""
    },
    {
        "question": "Please name three cities that belong to Algeria.",
        "hint": "Algeria is a country",
        "error_sql": "SELECT T1.city FROM geo_city AS T1 INNER JOIN geo_country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Algeria'",
        "compiler_hint": "no such table: city",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the ON clause match the actual column names in the tables. In this case, the Error SQL Query used 'country_code' and 'code', while the correct columns were 'country_id'. Additionally, verify the table names and aliases to avoid confusion. Always double-check the schema and table relationships to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'",
        "difficulty": ""
    },
    {
        "question": "What is the Asian population in the city with the alias Leeds?",
        "hint": "",
        "error_sql": "SELECT T1.asian FROM cities AS T1 INNER JOIN alias AS T2 ON T1.city_id = T2.city_id WHERE T2.alias = 'Leeds'",
        "compiler_hint": "no such table: city",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table names and column names match the actual schema. In this case, the error occurred because the table name was incorrect ('city' instead of 'zip_data') and the column name was incorrect ('city_id' instead of 'zip_code'). Additionally, the column 'asian' does not exist in the 'city' table, but 'asian_population' exists in the 'zip_data' table. Always double-check the schema before writing SQL queries.",
        "ground_truth_sql": "SELECT SUM(T2.asian_population) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Leeds'",
        "difficulty": ""
    },
    {
        "question": "Among the seafoods, how many of them have an order quantity of more than 50?",
        "hint": "\"Seafood\" is the CategoryName; order quantity of more than 50 refers to Quantity > 50",
        "error_sql": "SELECT COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Category AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50",
        "compiler_hint": "no such table: Products",
        "reflective_cot": "### Tip:\nThe issue here is that the table name 'Products' is correct, but the error message 'no such table: Product' suggests that the actual table name might be 'Product' instead of 'Products'. To avoid this mistake in the future, double-check the table names in the database schema to ensure they match the names used in the SQL query.",
        "ground_truth_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50",
        "difficulty": ""
    },
    {
        "question": "How many horror movies were made by the worst directors?",
        "hint": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst",
        "error_sql": "SELECT COUNT(T1.film_id) FROM film_director AS T1 INNER JOIN director AS T2 ON T1.director_id = T2.director_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN film_category AS T4 ON T3.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T5.name = 'Horror' AND T2.d_quality = 0",
        "compiler_hint": "no such table: film",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema. In this case, the error occurred due to the non-existent 'film_director' table. To avoid this mistake, carefully review the schema before generating the query. Additionally, pay attention to the column names and their corresponding tables. In the provided schema, the correct table for linking movies and directors is 'movies2directors', not 'film_director'. Also, the correct column names are 'movieid', 'genre', and 'directorid', not 'film_id', 'name', and 'director_id'.",
        "ground_truth_sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T1.directorid = T3.directorid WHERE T1.genre = 'horror' AND T3.d_quality = 0",
        "difficulty": ""
    },
    {
        "question": "List out the star scores of episode which has title of \"How the Test Was Won\".",
        "hint": "star scores refers to stars",
        "error_sql": "SELECT stars FROM episodes WHERE title = \"How the Test Was Won\"",
        "compiler_hint": "no such table: episode",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table names match exactly with the actual table names in the database schema, including case sensitivity and pluralization. In this case, the correct table name is \"Episode\" (singular) instead of \"episodes\" (plural). Additionally, consider the relationships between tables and perform necessary joins to retrieve the desired information.",
        "ground_truth_sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'How the Test Was Won';",
        "difficulty": ""
    },
    {
        "question": "Please list the country of the movie that stars an actress who acts the worse.",
        "hint": "a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst",
        "error_sql": "SELECT T4.country FROM actor AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid INNER JOIN countries AS T4 ON T3.countryid = T4.countryid WHERE T1.a_gender = 'F' AND T1.a_quality = 0",
        "compiler_hint": "no such table: actors",
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the column you are selecting (in this case, the country) is from the correct table. In the Error SQL Query and SQL after Reflection, the country was being selected from the 'countries' table (T4), but the correct table is the 'movies' table (T3) as it directly contains the country information for each movie. Always verify the schema and table relationships to avoid such mistakes.",
        "ground_truth_sql": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0",
        "difficulty": ""
    },
    {
        "question": "Does the length of the tip influence the number of likes for hotel and travel business category?",
        "hint": "the longer the tip_length, the lesser the likes OR the longer the tip length the higher the likes; hotel and travel business category refers to category_name = 'Hotels & Travel';",
        "error_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Tip AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Hotels & Travel'",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip:\nWhen generating SQL queries, ensure that the table names and column names match the actual schema. In this case, the error was due to incorrect table names ('Business' instead of 'Categories' and 'Business_Categories', and 'Tip' instead of 'Tips'). To avoid this mistake, carefully review the schema before generating the query, and double-check the table and column names to ensure accuracy. Additionally, consider using the actual schema to inform the query generation process, rather than relying on assumptions or incomplete information.",
        "ground_truth_sql": "SELECT T3.tip_length, SUM(T3.likes) AS likes FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Hotels & Travel' GROUP BY T3.tip_length",
        "difficulty": ""
    },
    {
        "question": "How many times was \"Blanket Beverly\" rented?",
        "hint": "\"BLANKET BEVERLY\" is the title of film; rented times refers to count(rental_id)",
        "error_sql": "SELECT COUNT(T3.rental_id) FROM inventory AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T1.inventory_id = T3.inventory_id WHERE T2.title = 'BLANKET BEVERLY'",
        "compiler_hint": "no such table: film",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names and table names are correct and consistent with the actual database schema. In this case, the error was not due to the SQL query itself, but rather the case sensitivity of the title 'BLANKET BEVERLY' vs 'Blanket Beverly'. The database schema is case sensitive, and the correct title is 'Blanket Beverly'. To avoid this mistake, double-check the column names, table names, and data values for consistency and accuracy.",
        "ground_truth_sql": "SELECT COUNT(T3.rental_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.title = 'Blanket Beverly'",
        "difficulty": ""
    },
    {
        "question": "What is the average height of people from USA?",
        "hint": "people from USA refers to birth_country = 'USA'; average height = AVG(height_meters)",
        "error_sql": "SELECT AVG(T2.height_meters) FROM athlete_info AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birth_country = 'USA'",
        "compiler_hint": "no such table: athlete",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that you carefully examine the schema to identify the correct table and column names. In this case, the height information is stored directly in the 'Person' table, eliminating the need for a join operation. Always verify the schema before generating a query to avoid unnecessary complexity and incorrect table references.",
        "ground_truth_sql": "SELECT AVG(height_meters) FROM Person WHERE birth_country = 'USA';",
        "difficulty": ""
    },
    {
        "question": "What is the total ordered quantity for products under the 'Touring' line?",
        "hint": "The Touring line refers to the product line, therefore ProductLine = 'T'",
        "error_sql": "SELECT SUM(OrderQty) FROM SalesOrderDetail AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'T'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being joined based on the query's requirements. In this case, the error was due to joining `SalesOrderDetail` instead of `PurchaseOrderDetail` to get the total ordered quantity for products under the 'Touring' line. Always verify the table names and their relationships to avoid such mistakes.",
        "ground_truth_sql": "SELECT SUM(T2.OrderQty) FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'T'",
        "difficulty": ""
    },
    {
        "question": "List all the customer company names and cities located in Canada.",
        "hint": "located in Canada refers to Country = 'Canada'",
        "error_sql": "SELECT CompanyName, City FROM Customer WHERE Country = 'Canada'",
        "compiler_hint": "no such table: Customers",
        "reflective_cot": "### Tip: \nAlways verify the table name in the database schema to ensure it matches the table name used in the SQL query. In this case, the correct table name should be verified to avoid the mistake of using 'Customers' instead of the actual table name, which might be 'Customer' or something else.",
        "ground_truth_sql": "SELECT CompanyName, City FROM Customers WHERE Country = 'Canada'",
        "difficulty": ""
    },
    {
        "question": "Please provide the full name of the conference where one of the papers of Jean-luc Hainaut were published.",
        "hint": "papers of Jean-luc Hainaut refers to Name = 'Jean-luc Hainaut'",
        "error_sql": "SELECT T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId INNER JOIN PaperAuthor AS T3 ON T2.Id = T3.PaperId WHERE T3.Name = 'Jean-luc Hainaut'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join order makes sense in the context of the query. In this case, the initial error was due to joining Conference with Paper before joining Paper with PaperAuthor, which led to a mismatch in the join order. The corrected query joins Paper with PaperAuthor first, and then joins the result with Conference, which is the correct order to retrieve the conference name for a specific author's papers. To avoid this mistake, always consider the logical flow of the query and ensure that the join order follows the relationships between the tables in a way that makes sense for the query being asked.",
        "ground_truth_sql": "SELECT DISTINCT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T2.Name = 'Jean-luc Hainaut' LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "List down the ID of movies with running time of 3 and average revenue of 1?",
        "hint": "",
        "error_sql": "SELECT movieid FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.runtime = 3 AND T2.avg_revenue = 1",
        "compiler_hint": "no such table: movies",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the column names and table names match exactly with the provided schema. In this case, the error occurred because the column name was 'runningtime' instead of 'runtime', and 'avg_revenue' was in the 'directors' table, not the 'movies' table. Additionally, the query required joining multiple tables, which was not considered in the initial attempt. To avoid such mistakes, carefully review the schema and verify the column and table names before generating the SQL query.",
        "ground_truth_sql": "SELECT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T1.runningtime = 3 AND T3.avg_revenue = 1",
        "difficulty": ""
    },
    {
        "question": "Which nations have a 100% Spanish-speaking population?",
        "hint": "",
        "error_sql": "SELECT nation FROM language_data WHERE spanish_speakers = 100",
        "compiler_hint": "no such table: language",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema exactly, including case sensitivity. In this case, the correct table name is 'language' (not 'language_data'), and the correct column names are 'Country', 'Name', and 'Percentage' (not 'nation', 'spanish', or 'percentage'). Always double-check the schema before generating a query to avoid such mistakes.",
        "ground_truth_sql": "SELECT Country FROM language WHERE Name = 'Spanish' AND Percentage = 100",
        "difficulty": ""
    },
    {
        "question": "How old was Mr. Stacy Morar at the time of his first emergency room admission due to a drug overdose?",
        "hint": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); his first emergency room admission refers to MIN(encounters.DATE); drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose' ;",
        "error_sql": "SELECT (strftime('%J', MIN(T1.ENCOUNTER_DATE)) - strftime('%J', T2.BIRTHDATE)) / 365.25 FROM Encounter AS T1 INNER JOIN Patient AS T2 ON T1.PATID = T2.PATID WHERE T1.REASONDESCRIPTION = 'Drug overdose' AND T2.FIRSTNAME = 'Stacy' AND T2.LASTNAME = 'Morar'",
        "compiler_hint": "no such table: encounters",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that column names and table aliases match the actual schema. In this case, the error was due to incorrect column names (e.g., 'DATE' instead of 'ENCOUNTER_DATE', 'PATID' instead of 'PATIENT', 'FIRSTNAME' and 'LASTNAME' instead of 'first' and 'last', 'DESCRIPTION' was missing) and incorrect table aliases (e.g., 'T1' and 'T2' were swapped). Additionally, the query logic was incorrect, as it did not account for the 'Emergency Room Admission' condition and did not use the correct method to calculate the age. To avoid this mistake, carefully review the schema and ensure that the query logic accurately reflects the problem statement.",
        "ground_truth_sql": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Stacy' AND T1.last = 'Morar' AND T2.DESCRIPTION = 'Emergency Room Admission' AND T2.REASONDESCRIPTION = 'Drug overdose' ORDER BY T2.DATE LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What kind of expression correlation occurs in physical type interacting gene pairs and what percentage of these are negatively correlated?",
        "hint": "If the Expression_Corr value is negative then it's negatively correlated. Percentage of Negative Correlation = count(negative Expression_Corr physical type) / count(Expression_Corr physical type) * 100%",
        "error_sql": "SELECT \n    CASE \n        WHEN T2.Expression_Corr < 0 THEN 'negatively correlated'\n        ELSE 'positively correlated'\n    END AS correlation_type,\n    CAST(SUM(CASE WHEN T2.Expression_Corr < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Expression_Corr) AS percentage_negative_correlation\nFROM \n    gene_pair AS T1\nINNER JOIN \n    gene_pair_expression AS T2\nON \n    T1.id = T2.gene_pair_id\nWHERE \n    T1.physical_type = 'interacting'",
        "compiler_hint": "no such table: gene_pairs",
        "reflective_cot": "### Tip:\nWhen generating SQL queries, ensure that you accurately identify the relevant table(s) and column(s) based on the provided schema. In this case, the error occurred because the query referenced a non-existent table 'gene_pairs' and incorrectly joined the 'Interactions' table. To avoid this mistake, carefully review the schema to confirm the correct table and column names, and ensure that the query logic aligns with the problem requirements. Additionally, consider breaking down complex queries into simpler components to verify the accuracy of each part before combining them.",
        "ground_truth_sql": "SELECT Expression_Corr FROM Interactions WHERE Type = 'Physical' UNION ALL SELECT CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*) FROM Interactions WHERE Type = 'Physical'",
        "difficulty": ""
    },
    {
        "question": "Among the orders placed by Ei, how many orders have quantity greater than 4?",
        "hint": "Ei is the name of the customer; orders have quantity greater than 4 refer to OrderNumber WHERE Order Quantity > 4;",
        "error_sql": "SELECT COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.`Customer Names` = 'Ei' AND T1.`Order Quantity` > 4",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and applying conditions, ensure that the conditions are correctly applied to the joined tables. In this case, the initial error was not actually an error, but the reflection SQL was also provided as incorrect. However, the actual issue here is that the initial SQL query was correct and should have worked as intended. The reflection SQL was unnecessary and added complexity. The tip is to trust the initial query and only revise it if there's actual error information or a logical flaw.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.`Order Quantity` > 4 AND T2.`Customer Names` = 'Ei ' THEN 1 ELSE 0 END) FROM `Sales Orders` AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID",
        "difficulty": ""
    },
    {
        "question": "Please list the names of all the players with a height of over 6'2\" inches.",
        "hint": "name of the players refers to PlayerName; height of over 6'2\" inches refers to height_in_inch > '6''2\"' ;",
        "error_sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '6''2\"'",
        "compiler_hint": "no such table: PlayerInfo",
        "reflective_cot": "### Tip:\nWhen generating SQL queries, ensure that the table names used in the query match the actual table names in the database schema. In this case, the error occurred because the table name was incorrectly assumed to be 'PlayerInfo' instead of 'Player' and also 'PlayerInfo' instead of 'PlayerInfo' in the second attempt. The correct table name should be used consistently throughout the query. Additionally, verify that the table and column names are correctly referenced in the query to avoid errors.",
        "ground_truth_sql": "SELECT DISTINCT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch > '6''2\"'",
        "difficulty": ""
    },
    {
        "question": "How many events were held at coordinate 97,40?",
        "hint": "coordinate 97,40 refers to longitude = 97 AND latitude = 40;",
        "error_sql": "SELECT COUNT(event_id) FROM event WHERE longitude = 97 AND latitude = 40",
        "compiler_hint": "no such table: events",
        "reflective_cot": "### Tip:\nWhen dealing with table names that are also SQL keywords or contain special characters, it's essential to enclose them in backticks (``) to avoid conflicts and ensure the query is executed correctly. In this case, the table name \"events\" should be enclosed in backticks as it's a reserved keyword in SQL.",
        "ground_truth_sql": "SELECT COUNT(event_id) FROM `events` WHERE latitude = 40 AND longitude = 97",
        "difficulty": ""
    },
    {
        "question": "Which employee is in charge of the sales in Hollis? Please give the employee's full name.",
        "hint": "Hollis refers to TerritoryDescription = 'Hollis'; full name = FirstName, LastName;",
        "error_sql": "SELECT T1.FirstName, T1.LastName FROM EmployeeTerritories AS T2 INNER JOIN Employees AS T1 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T3.TerritoryID = T2.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'",
        "compiler_hint": "no such table: Employees",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order is correct and logical. In this case, the correct order is to join Employees with EmployeeTerritories first, and then join the result with Territories. This is because an employee is associated with multiple territories through the EmployeeTerritories table, and then each territory is associated with a description. Joining in the correct order helps to avoid errors and ensures that the query returns the correct results.",
        "ground_truth_sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'",
        "difficulty": ""
    },
    {
        "question": "For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price.",
        "hint": "in May 2013 refers to month(date) = 5 AND year(date) = 2013; time to achieve the highest price refers to time_high; time to achieve the lowest price refers to time_low; WRAP refers to name = 'WARP'",
        "error_sql": "SELECT MAX(time_high), MIN(time_low) FROM WRAP WHERE STRFTIME('%Y-%m', date) = '2016-08'",
        "compiler_hint": "no such table: transactions",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the schema exactly, including case sensitivity. In this case, the error was due to a typo in the name 'WRAP' instead of 'WARP'. Always double-check the schema and query to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.time_high, T2.time_low, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND STRFTIME('%Y-%m', T2.date) = '2016-08'",
        "difficulty": ""
    },
    {
        "question": "How many domestic violence cases were brought in the ward that uses \"ward13@cityofchicago.org\"?",
        "hint": "domestic violence refers to domestic = 'TRUE'; uses \"ward13@cityofchicago.org\" refers to ward_email = 'ward13@cityofchicago.org'",
        "error_sql": "SELECT COUNT(T2.report_no) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward = T2.community_area_no INNER JOIN Community_Areas AS T3 ON T2.community_area_no = T3.area_number WHERE T1.ward_email = 'ward13@cityofchicago.org' AND T2.domestic = 'TRUE'",
        "compiler_hint": "no such table: Wards",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and the tables are joined in the correct order. In this case, the error occurred because the join was not done directly between the Ward and Crime tables, but rather through the Community_Areas table. However, the correct join is directly between Ward and Crime on the ward_no column. To avoid this mistake, carefully examine the schema and ensure that the join conditions are correct and the tables are joined in the most direct and logical way.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no WHERE T1.ward_email = 'ward13@cityofchicago.org'",
        "difficulty": ""
    },
    {
        "question": "How many of the businesses are in Surprise?",
        "hint": "Surprise is a city",
        "error_sql": "SELECT COUNT(business_id) FROM Businesses WHERE city = 'Surprise'",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip: \nAlways verify the exact table name from the schema before writing the SQL query. In this case, the correct table name is not provided, but the error message suggests that the table name might be different from 'Business'. It's essential to check the schema for the correct table name to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Surprise'",
        "difficulty": ""
    },
    {
        "question": "Among the students that have been absent from school for more than 5 months, how many of them are male?",
        "hint": "absent from school for more than 5 months refers to `month`\u00a0 > = 5;",
        "error_sql": "SELECT COUNT(T1.name) FROM absent AS T1 INNER JOIN person AS T2 ON T1.name = T2.name WHERE T2.gender = 'M' AND T1.month >= 5",
        "compiler_hint": "no such table: absent",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join is performed with the correct table that contains the required information. In this case, the error occurred because the join was performed with the 'person' table instead of the 'male' table, which is the correct table to filter for male students. Always verify the schema and table relationships to avoid such mistakes. Additionally, be cautious when using table aliases and ensure that the correct columns are being referenced.",
        "ground_truth_sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN male AS T2 ON T1.`name` = T2.`name` WHERE T1.`month` >= 5",
        "difficulty": ""
    },
    {
        "question": "For how many times had the dish \"Chicken gumbo\" appeared on a menu page?",
        "hint": "Chicken gumbo is a name of dish;",
        "error_sql": "SELECT COUNT(T2.menu_page_id) FROM MenuItem AS T1 INNER JOIN MenuItem AS T2 ON T1.dish_id = T2.dish_id WHERE T1.name = 'Chicken gumbo'",
        "compiler_hint": "no such table: dish",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the ON clause match the actual column names in the tables. In this case, the Error SQL Query used 'dish_id' which does not exist in the Dish table, and the SQL after Reflection used 'id' but did not verify if it's the correct column to join on. Additionally, verify the logic of the query, in this case, the COUNT function is not the best approach as it counts all rows, whereas the SUM function with a CASE statement is more suitable for counting specific conditions. Always double-check the schema and the logic of the query to avoid such mistakes.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.name = 'Chicken gumbo' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id",
        "difficulty": ""
    },
    {
        "question": "Give the full name of legislators who have accounts on OpenSecrets.org.",
        "hint": "full name refers to first_name, last_name; have accounts on OpenSecrets.org refers to opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "error_sql": "SELECT first_name, last_name FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the query aligns with the question's requirements. In this case, the question asks for the \"full name\" of legislators, but the provided Ground Truth SQL query only counts the number of legislators with OpenSecrets.org accounts. To answer the question correctly, the query should select the full names (first_name and last_name) of the legislators, not count them.",
        "ground_truth_sql": "SELECT COUNT(*) FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''",
        "difficulty": ""
    },
    {
        "question": "How much more expensive in percentage is the product with the highest selling price from the product with the lowest selling price in the Clothing category?",
        "hint": "selling price refers to ListPrice; highest selling price refers to MAX(ListPrice); lowest selling price refers to MIN(ListPrice);",
        "error_sql": "SELECT CAST(((MAX(T1.ListPrice) - MIN(T1.ListPrice)) * 100.0) / MIN(T1.ListPrice), REAL) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'",
        "compiler_hint": "near \",\": syntax error",
        "reflective_cot": "### Tip: \nWhen performing calculations involving multiple tables, ensure that the tables are properly joined and that the columns are correctly referenced. In this case, the error was due to the incorrect use of the CAST function and the lack of proper table joins. To avoid this mistake, always verify that the tables are correctly joined and that the columns are properly referenced. Additionally, be mindful of the order of operations and the use of parentheses to ensure that the calculations are performed correctly.",
        "ground_truth_sql": "SELECT (MAX(T1.ListPrice) - MIN(T1.ListPrice)) * 100 / MIN(T1.ListPrice) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'",
        "difficulty": ""
    },
    {
        "question": "What is the average heights of crew members from Animation Department?",
        "hint": "from Animation Department refers to category = 'Animation Department';\u00a0AVG(height_meters) where category = 'Animation Department'",
        "error_sql": "SELECT AVG(T2.height_meters) FROM crew AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.category = 'Animation Department'",
        "compiler_hint": "no such table: crew_info",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column being joined is present in both tables and that the correct table alias is used to reference the column. In this case, the error occurred because the column 'height_meters' was referenced from the wrong table alias in the SQL after Reflection. Additionally, the correct join order and table aliases should be used to avoid confusion. Always verify the schema and table relationships before writing the SQL query.",
        "ground_truth_sql": "SELECT AVG(T1.height_meters) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Animation Department';",
        "difficulty": ""
    },
    {
        "question": "How many turnovers per game did the assist champion had in the 2003 NBA season?",
        "hint": "turnovers per game = avg(turnovers); 2003 refers to year = 2003; NBA refers to lgID = 'NBA'",
        "error_sql": "SELECT AVG(T1.turnovers) FROM Season_Stats AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2003 AND T1.lgID = 'NBA'",
        "compiler_hint": "no such table: season",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct table is being referenced for the desired column. In this case, the 'lgID' column is in the 'players_teams' table, not the 'season' table. Also, when filtering for a specific league, consider whether the filter is necessary if the question only asks for a specific year and the league is already implied by the context (NBA season). Additionally, be cautious when using aggregate functions with GROUP BY, as the grouping columns should be relevant to the query's requirements.",
        "ground_truth_sql": "SELECT AVG(T2.turnovers) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2003 GROUP BY T1.playerID, T2.assists ORDER BY T2.assists DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the independent countries, how many of them has a GDP per capita of over 5000?",
        "hint": "",
        "error_sql": "SELECT COUNT(name) FROM countries WHERE independent = 'TRUE' AND gdp_per_capita > 5000",
        "compiler_hint": "no such table: country",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the column names and table names match the actual schema. In this case, the error was due to incorrect column names ('gdp_per_capita' instead of 'GDP') and incorrect table names ('country' instead of joining 'country', 'politics', and 'economy' tables). Always verify the schema before generating the query to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Independence IS NOT NULL AND T3.GDP > 5000",
        "difficulty": ""
    },
    {
        "question": "What are the coordinates of the school where project 'Look, Look, We Need a Nook!' Was donated to and what resource type is it?",
        "hint": "Coordinates of the school refer to school_latitude, school_longitude); Look, Look, We Need a Nook! Refer to title;",
        "error_sql": "SELECT T1.lat, T1.long, T2.resource_type FROM schools AS T1 INNER JOIN projects AS T2 ON T1.id = T2.school_id WHERE T2.title = 'Look, Look, We Need a Nook!'",
        "compiler_hint": "no such table: schools",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names and table aliases used in the SELECT and WHERE clauses match the actual column names and table aliases in the database schema. Also, verify that the join conditions are correct and that the tables are joined in the correct order. In this case, the error was due to incorrect table aliases and column names, as well as incorrect join conditions. To avoid this mistake, carefully review the database schema and double-check the SQL query before execution. Additionally, consider using table aliases that are descriptive and consistent with the table names to reduce confusion.",
        "ground_truth_sql": "SELECT T2.school_latitude, T2.school_longitude, T2.resource_type FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Look, Look, We Need a Nook!'",
        "difficulty": ""
    },
    {
        "question": "Which order have the highest unit cost?",
        "hint": "order have the highest unit cost refers to OrderNumber where MAX(Unit Cost);",
        "error_sql": "SELECT OrderNumber FROM `Sales Orders` ORDER BY CAST(REPLACE(`Unit Cost`, ',', '') AS REAL) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find the maximum or minimum value in a column, avoid using ORDER BY and LIMIT. Instead, use a subquery to find the maximum or minimum value and then use that value to select the corresponding rows. This is because ORDER BY and LIMIT can return multiple rows if there are ties for the maximum or minimum value, whereas the subquery approach will return all rows that have the maximum or minimum value.",
        "ground_truth_sql": "SELECT OrderNumber FROM `Sales Orders` WHERE REPLACE(`Unit Cost`, ',', '') = ( SELECT REPLACE(`Unit Cost`, ',', '') FROM `Sales Orders` ORDER BY REPLACE(`Unit Cost`, ',', '') DESC LIMIT 1 )",
        "difficulty": ""
    },
    {
        "question": "List the names and business certificates of the eateries which got inspection score under 50.",
        "hint": "eateries which got inspection score under 50 refer to business_id where score < 50;",
        "error_sql": "SELECT T1.name, T1.business_certificate FROM businesses AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE T2.score < 50",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column names in the SELECT statement match the table alias used in the JOIN clause. In this case, the correct table alias for the businesses table is T2, and the correct column name to retrieve is business_id, not business_certificate. Always double-check the column names and table aliases to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.name, T2.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score < 50",
        "difficulty": ""
    },
    {
        "question": "What is the average number of less severe crimes reported a day in February of 2018?",
        "hint": "day in February of 2018 refers to date LIKE '2/%/2018'; less severe crime refers to index_code = 'N'; average = Divide (Count(case_number), 28)",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T2.index_code = 'N' THEN T2.case_number END) AS REAL) / 28 FROM Community_Areas AS T1 INNER JOIN Crime_Data AS T2 ON T1.area_number = T2.community_area_number WHERE T2.date LIKE '2/%/2018'",
        "compiler_hint": "no such table: Crime",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join is based on the correct columns and that all necessary tables are included. In this case, the first two attempts failed because they did not join the IUCR table, which contains the index_code column necessary for filtering less severe crimes. Additionally, the join condition in the second attempt was incorrect, as it joined on community_area_no instead of iucr_no. To avoid this mistake, carefully review the schema and ensure that all necessary tables and columns are included in the query.",
        "ground_truth_sql": "SELECT CAST(COUNT(T2.case_number) AS REAL) / 28 FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.date LIKE '2/%/2018%' AND T1.index_code = 'N'",
        "difficulty": ""
    },
    {
        "question": "List ther users who gave the worst rating for movie 'Love Will Tear Us Apart'.",
        "hint": "worst rating refers to rating_score = 1;",
        "error_sql": "SELECT T4.user_id FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T2.user_id = T3.user_id INNER JOIN lists_users AS T4 ON T3.user_id = T4.user_id WHERE T1.movie_title = 'Love Will Tear Us Apart' AND T2.rating_score = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order and the table aliases are consistent with the query's logic. In this case, the error was caused by joining the tables in the wrong order and using incorrect aliases. To avoid this mistake, carefully plan the join order and use meaningful table aliases that reflect the query's logic. Additionally, verify that the join conditions and the WHERE clause are correctly referencing the table aliases.",
        "ground_truth_sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Love Will Tear Us Apart' AND T1.rating_score = 1",
        "difficulty": ""
    },
    {
        "question": "What brand of beer has been the worst rated most times?",
        "hint": "brand of beer refers to BrandName; worst rated most times refers to MAX(COUNT(StarRating = 1));",
        "error_sql": "SELECT T2.BrandName FROM beer AS T1 INNER JOIN beerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.StarRating = 1 GROUP BY T2.BrandName ORDER BY COUNT(T1.BrandID) DESC LIMIT 1",
        "compiler_hint": "no such table: rootbeer",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join is performed between the correct tables and that the join condition is based on the correct columns. In this case, the error occurred because the join was performed between `rootbeer` and `rootbeerbrand`, but the `StarRating` column is actually in the `rootbeerreview` table. To avoid this mistake, carefully examine the schema and ensure that the joins are performed between the correct tables and that the join conditions are based on the correct columns. Additionally, verify that the columns used in the WHERE, GROUP BY, and ORDER BY clauses exist in the tables being queried.",
        "ground_truth_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 GROUP BY T1.BrandName ORDER BY COUNT(T1.BrandName) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How did Kyran Muller submit his complaint?",
        "hint": "how it was submitted refers to \"Submitted via\";",
        "error_sql": "SELECT T2.`Submitted via` FROM complaint AS T1 INNER JOIN complaint_info AS T2 ON T1.complaint_id = T2.complaint_id WHERE T1.first_name = 'Kyran' AND T1.last_name = 'Muller'",
        "compiler_hint": "no such table: complaints",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the WHERE clause match the actual column names in the tables. In this case, the error occurred because the columns 'first_name' and 'last_name' do not exist in the 'client' table; instead, they are named 'first' and 'last'. Additionally, when retrieving distinct values, use the DISTINCT keyword to avoid duplicate results.",
        "ground_truth_sql": "SELECT DISTINCT T2.`Submitted via` FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kyran' AND T1.last = 'Muller'",
        "difficulty": ""
    },
    {
        "question": "List the active business ID and its stars of the businesses fall under the category of Pets.",
        "hint": "active business refers to active = 'true'; 'Pets' is the category_name",
        "error_sql": "SELECT T2.business_id, T2.stars FROM Categories AS T1 INNER JOIN Business_Categories AS T3 ON T1.category_id = T3.category_id INNER JOIN Business AS T2 ON T3.business_id = T2.business_id WHERE T1.category_name = 'Pets' AND T2.active = 'true'",
        "compiler_hint": "no such table: Business_Categories",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table aliases (e.g., T1, T2, T3) are consistently used throughout the query. In the Error SQL Query and SQL after Reflection, the aliases were not correctly assigned to the tables, leading to incorrect table references. To avoid this mistake, carefully review the table aliases and ensure they match the correct tables in the FROM and JOIN clauses. Additionally, verify that the table names and column names match the actual schema to prevent errors like \"no such table.\"",
        "ground_truth_sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Pets'",
        "difficulty": ""
    },
    {
        "question": "What is the total number of fans or followers who received most likes of their comments in the business?",
        "hint": "fans and followers refers to user_fans; most likes of their comments refer to Max(likes)",
        "error_sql": "SELECT COUNT(user_fans) FROM Review WHERE likes = (SELECT MAX(likes) FROM Review)",
        "compiler_hint": "no such table: Users",
        "reflective_cot": "### Tip: \nWhen solving SQL problems, it's essential to carefully analyze the relationships between tables and the conditions specified in the problem. In this case, the error was due to not considering the relationship between the Users table and the Tips table, and also not aggregating the likes before ordering. To avoid similar mistakes, always make sure to identify the relevant tables and their relationships, and consider the aggregation requirements for the problem at hand. Additionally, be cautious when using ORDER BY and LIMIT, as they can significantly impact the result, and ensure that the columns used in these clauses are correctly aggregated if necessary.",
        "ground_truth_sql": "SELECT COUNT(T1.user_fans) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id ORDER BY COUNT(T2.likes) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the difference between the number of children's films and action films?",
        "hint": "'children' AND 'action' are names of a category; Calculation = SUBTRACT(AVG('children'), AVG('action'))",
        "error_sql": "SELECT SUM(IIF(T4.name = 'Children', 1, -1)) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN category AS T4 ON T2.name = T4.name",
        "compiler_hint": "no such table: film",
        "reflective_cot": "### Tip: \nWhen writing SQL queries, ensure that the logic and conditions are correctly implemented to achieve the desired outcome. In this case, the first two attempts were incorrect because they did not accurately represent the calculation of the difference between the number of children's films and action films. The first query had incorrect table names and the second query only counted the children's films but did not subtract the action films. To avoid this mistake, carefully review the query logic and conditions to ensure they align with the desired outcome, and consider breaking down complex calculations into smaller, manageable parts.",
        "ground_truth_sql": "SELECT SUM(IIF(T2.name = 'Children', 1, 0)) - SUM(IIF(T2.name = 'Action', 1, 0)) AS diff FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id",
        "difficulty": ""
    },
    {
        "question": "Among the patients who were immunized with meningococcal MCV4P, how many have viral sinusitis disorder after getting the immunization?",
        "hint": "immunized with meningococcal MCV4P refers to DESCRIPTION = 'meningococcal MCV4P' from immunizations; viral sinusitis disorder refers to DESCRIPTION = 'Viral sinusitis (disorder)' from conditions;",
        "error_sql": "SELECT COUNT(T1.PATIENT) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN immunizations AS T3 ON T1.patient = T3.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)' AND T3.DESCRIPTION = 'meningococcal MCV4P'",
        "compiler_hint": "no such table: conditions",
        "reflective_cot": "### Tip:\nWhen joining two tables, ensure that the join order and the conditions in the WHERE clause are correctly aligned with the problem statement. In this case, the problem asks for patients who were immunized with meningococcal MCV4P and then developed viral sinusitis disorder. Therefore, the immunizations table should be the primary table, and the conditions table should be joined to it. Additionally, using DISTINCT in the COUNT function is necessary to avoid counting duplicate patients.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.patient) FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'meningococcal MCV4P' AND T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "difficulty": ""
    },
    {
        "question": "What is the category and itune url of the title \"Scaling Global\"?",
        "hint": "",
        "error_sql": "SELECT T3.category, T1.itunes_url FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T1.podcast_id = T2.podcast_id INNER JOIN categories AS T3 ON T1.podcast_id = T3.podcast_id WHERE T2.title = 'Scaling Global'",
        "compiler_hint": "no such column: T2.itunes_url",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that you are referencing the correct table alias for the column you want to select. In this case, the error occurred because the `itunes_url` column is in the `podcasts` table, not the `reviews` table. Similarly, the `title` column used in the WHERE clause should also be from the `podcasts` table, not the `reviews` table. Always double-check the table aliases and column names to avoid such mistakes. Additionally, the join order and conditions should be carefully considered to ensure that the correct data is being retrieved.",
        "ground_truth_sql": "SELECT T1.category, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Scaling Global'",
        "difficulty": ""
    },
    {
        "question": "For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active?",
        "hint": "at 14:09:49 on 2016/5/6 refers to timestamp = '2016/5/6 14:09:49'; location coordinate(116, 40) refers to longitude = '116' AND latitude = '40'; active refers to is_active = '1';",
        "error_sql": "SELECT COUNT(T1.app_id) FROM event AS T1 WHERE T1.longitude = 116 AND T1.latitude = 40 AND T1.timestamp = '2016/5/6 14:09:49' AND T1.is_active = 1",
        "compiler_hint": "no such table: app",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table names used in the query match the actual table names in the database schema. In this case, the error occurred because the table name 'event' was used instead of 'events' and 'app_events' was not used. To avoid this mistake, carefully review the database schema before generating the query, and double-check that the table names are correct. Additionally, pay attention to the exact column names and data types to avoid any potential errors.",
        "ground_truth_sql": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'",
        "difficulty": ""
    },
    {
        "question": "Please list any three community areas with a population of more than 50,000.",
        "hint": "population of more than 50000 refers to Population > 50000; community area refers to community_area_name",
        "error_sql": "SELECT community_area_name FROM Community_Area WHERE Population > 50000 LIMIT 3",
        "compiler_hint": "no such table: Community_Areas",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match exactly with the provided schema, including case sensitivity. In this case, the correct table name is \"Community_Area\" (singular), not \"Community_Areas\" (plural).",
        "ground_truth_sql": "SELECT community_area_name FROM Community_Area WHERE population > 50000 LIMIT 3",
        "difficulty": ""
    },
    {
        "question": "How many releases by the artist michael jackson are tagged \"pop\"?",
        "hint": "tag = 'pop';",
        "error_sql": "SELECT COUNT(T1.groupName) FROM releases AS T1 INNER JOIN artists AS T2 ON T1.artistId = T2.artistId WHERE T2.artistName = 'Michael Jackson' AND T1.tag LIKE '%pop%'",
        "compiler_hint": "no such table: torrents",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being joined based on the correct keys. In this case, the error was due to joining the 'artists' table instead of the 'tags' table, and also using 'LIKE' instead of '=' for exact matching. Additionally, the 'releases' table was not used in the query, but the error message mentioned it, indicating a possible misunderstanding of the schema. To avoid this, carefully review the schema and the relationships between tables before writing the query.",
        "ground_truth_sql": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.artist = 'michael jackson'",
        "difficulty": ""
    },
    {
        "question": "For how many consecutive years did Aruba get a footnote on the series code BX.KLT.DINV.CD.WD?",
        "hint": "Aruba is the name of country where ShortName = 'Aruba'",
        "error_sql": "SELECT COUNT(DISTINCT T1.year) FROM footnote AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id INNER JOIN series AS T3 ON T1.series_id = T3.id WHERE T2.ShortName = 'Aruba' AND T3.code = 'BX.KLT.DINV.CD.WD'",
        "compiler_hint": "no such table: footnote",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and the column names match exactly, including case sensitivity. In this case, the error was due to incorrect table and column names. The correct table name is 'FootNotes' instead of 'footnote', and the correct join conditions are 'Countrycode' and 'CountryCode' instead of 'country_id' and 'id'. Additionally, the correct column to count is 'Year' instead of 'id' or 'year'. To avoid this mistake, double-check the schema and table names before writing the query.",
        "ground_truth_sql": "SELECT COUNT(T2.Year) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'BX.KLT.DINV.CD.WD'",
        "difficulty": ""
    },
    {
        "question": "On 8/29/2013, who took the longest to arrive in California Ave Caltrain Station from University and Emerson? Indicate the bike id.",
        "hint": "start_date = '8/29/2013'; end_date = '8/29/2013'; end_station_name = 'California Ave Caltrain Station'; start_station_name = 'University and Emerson'; who took the longest to arrive refers to MAX(duration);",
        "error_sql": "SELECT bike_id FROM trip WHERE start_date = '8/29/2013' AND end_date = '8/29/2013' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' ORDER BY duration DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the maximum or minimum value of a column based on certain conditions, using `ORDER BY` and `LIMIT` may not always be the correct approach, especially if there are multiple rows with the same maximum or minimum value. Instead, use a subquery to find the maximum or minimum value first, and then use that value to filter the results. This ensures that all rows with the maximum or minimum value are included, not just the first one encountered.",
        "ground_truth_sql": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' )",
        "difficulty": ""
    },
    {
        "question": "Which are the years that character Mr. Burns won an award?",
        "hint": "",
        "error_sql": "SELECT T1.year FROM award AS T1 INNER JOIN winner AS T2 ON T1.award_id = T2.award_id INNER JOIN character AS T3 ON T2.character_id = T3.character_id WHERE T3.character_name = 'Mr. Burns'",
        "compiler_hint": "no such table: Award",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct table names and column names are used. In this case, the error occurred because the table name 'Winner' was incorrect, and the correct table name was 'Character_Award'. Additionally, the column name 'character_id' was incorrect, and the correct column name was 'character'. To avoid this mistake, double-check the schema of the database to ensure that the correct table and column names are used.",
        "ground_truth_sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';",
        "difficulty": ""
    },
    {
        "question": "Describe the specific description and case locations under IUCR 142.",
        "hint": "specific description refers to secondary_description; location refers to latitude, longitude; IUCR 142 refers to iucr_no = 142",
        "error_sql": "SELECT T2.secondary_description, T1.latitude, T1.longitude FROM Crime_Data AS T1 INNER JOIN Crime AS T2 ON T1.report_no = T2.report_no WHERE T2.iucr_no = 142",
        "compiler_hint": "no such table: Crime",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table with the column being filtered (in this case, iucr_no = 142) is the same table that contains the column being filtered. Also, verify that the column being selected (secondary_description) is from the correct table. In this case, the correct table for secondary_description is IUCR, not Crime_Data or Crime. Always double-check the schema to ensure the correct table and column relationships are being used.",
        "ground_truth_sql": "SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142",
        "difficulty": ""
    },
    {
        "question": "What is the height in centimeter of the tallest player born in Edmonton, Alberta, Canada?",
        "hint": "height in centimeter refers to height_in_cm; tallest player refers to MAX(height_in_cm); born in Edmonton, Alberta, Canada refers to birthplace = 'Edmonton, AB, CAN';",
        "error_sql": "SELECT MAX(T2.height_in_cm) FROM Player AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN'",
        "compiler_hint": "no such table: PlayerInfo",
        "reflective_cot": "### Tip:\nWhen using aggregate functions like MAX, MIN, AVG, etc., consider whether you need to retrieve additional information about the row that corresponds to the aggregated value. In this case, using MAX alone would only return the maximum height, but not the corresponding height_in_cm value. To avoid this mistake, think about whether you need to use a subquery or an ORDER BY with LIMIT to retrieve the entire row that corresponds to the aggregated value.",
        "ground_truth_sql": "SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN' ORDER BY T2.height_in_cm DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Where is the school that needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\"? Provide the latitude and longitude of that school.",
        "hint": "needs a \"Viewscreen LCD from Texas Instruments, TI-84 Plus\" refers to item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'; where is the school refers to school_city; latitude refers to school_latitude; longtitude refers to school_longitude",
        "error_sql": "SELECT T2.school_latitude, T2.school_longitude, T2.school_city FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'",
        "compiler_hint": "no such table: essays",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct table is being referenced for the desired columns. In this case, the error occurred because the 'essays' table was referenced instead of the 'resources' table, and 'school_city' was missing in the SELECT statement. To avoid this mistake, double-check the schema to confirm the correct table and column names, and make sure to include all required columns in the SELECT statement.",
        "ground_truth_sql": "SELECT T2.school_city, T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'Viewscreen LCD FROM Texas Instruments, TI-84 Plus'",
        "difficulty": ""
    },
    {
        "question": "In the state where Lisa Murkowski is the representative, how many cities have zero employees?",
        "hint": "zero employee refers to employees = 0",
        "error_sql": "SELECT COUNT(T1.city) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.congress_rep_id WHERE T3.first_name = 'Lisa' AND T3.last_name = 'Murkowski' AND T1.employees = 0",
        "compiler_hint": "no such table: zip_city_state",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being referenced and that the join conditions are accurate. In this case, the error was due to referencing the wrong table (zip_city_state instead of zip_data) and incorrect join conditions. Additionally, pay attention to the order of the first_name and last_name in the WHERE clause, as it should match the actual order in the congress table. To avoid this mistake, double-check the schema and the relationships between tables before writing the query.",
        "ground_truth_sql": "SELECT COUNT(T3.city) FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T1.first_name = 'Murkowski' AND T1.last_name = 'Lisa' AND T3.employees = 0",
        "difficulty": ""
    },
    {
        "question": "Provide the supplier company name in Sydney and its homepage address if available.",
        "hint": "in Sydney refers to City = 'Sydney';",
        "error_sql": "SELECT CompanyName, HomePage FROM Suppliers WHERE City = 'Sydney'",
        "compiler_hint": "no such table: Supplier",
        "reflective_cot": "### Tip:\nAlways double-check the table name in the database schema to ensure it matches the table name used in the SQL query. In this case, the correct table name is 'Suppliers' (with an 's'), not 'Supplier'.",
        "ground_truth_sql": "SELECT CompanyName, HomePage FROM Suppliers WHERE City = 'Sydney'",
        "difficulty": ""
    },
    {
        "question": "What is the newest established organization where Singapore is a member of?",
        "hint": "",
        "error_sql": "SELECT organ FROM ( SELECT organ, MAX(year) AS max_year FROM member GROUP BY organ ) T ORDER BY T.max_year DESC LIMIT 1",
        "compiler_hint": "no such table: members",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct columns are used for matching, especially when there are multiple columns with similar names. In this case, the mistake was made by joining organization table with isMember table on OrgCode and Country, but the correct join should be on Country. Always double-check the schema and the relationships between tables to avoid such errors.",
        "ground_truth_sql": "SELECT T3.Name FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T1.Name = 'Singapore' ORDER BY T3.Established DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Name the teams played in a match which resulted in a tie in 2015.",
        "hint": "resulted in a tie refers to Win_Type = 'Tie'; in 2015 refers to SUBSTR(Match_Date, 1, 4) = 2015",
        "error_sql": "SELECT T1.Team_Name, T2.Team_Name FROM Team AS T1 INNER JOIN Team AS T2 ON T1.Team_Id = T3.Team_1 INNER JOIN Match AS T3 ON T2.Team_Id = T3.Team_2 WHERE T3.Win_Type = 'Tie' AND SUBSTR(T3.Match_Date, 1, 4) = '2015'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join conditions are correct and that the correct columns are being referenced. In the Error SQL Query, the join condition `T1.Team_Id = T3.Team_1` is incorrect because it is trying to join `Team` with `Match` on `Team_Id` with `Team_1`, but `Team_1` is not a foreign key referencing `Team_Id`. \n\nAdditionally, when using `OR` conditions in joins, use parentheses to ensure the correct order of operations. In the Error SQL Query, the join condition `T1.Team_Id = T3.Team_1 INNER JOIN Match AS T3 ON T2.Team_Id = T3.Team_2` is incorrect because it is trying to join `Team` with `Match` on two different conditions, but the conditions are not correctly grouped.\n\nIn the SQL after Reflection, the query is still incorrect because it is trying to join `Team` with `Match` on two different conditions, but the conditions are not correctly grouped.\n\nThe Ground Truth SQL query correctly joins `Team` with `Match` on the condition that `Team_Id` is either `Team_1` or `Team_2`, and then joins `Match` with `Win_By` on the condition that `Win_Type` is `Tie`. The `LIMIT 1` clause is used to return only one row, assuming that there is only one match that resulted in a tie in 2015.",
        "ground_truth_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Team_Id = T2.Team_2 INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE SUBSTR(T2.Match_Date, 1, 4) = '2015' AND T3.Win_Type = 'Tie' LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Please indicate the business id have the closing time with the category of Arts & Entertainment on Sunday.",
        "hint": "Sunday refers to day_of_week = 'Sunday' where day_id = 1; category of Arts & Entertainment refers to category_name = 'Arts & Entertainment';",
        "error_sql": "SELECT T1.business_id FROM Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.day_of_week = 'Sunday' AND T4.category_name = 'Arts & Entertainment'",
        "compiler_hint": "no such table: Business_Hours",
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order and the columns used for joining are correct. In this case, the error occurred because the join order was incorrect, and the columns used for joining were not properly aligned with the query's requirements. To avoid this mistake, carefully analyze the query's requirements, identify the primary table, and then join the other tables in a logical order that aligns with the query's conditions. Additionally, double-check the column names and table aliases to ensure they are correct and consistent throughout the query.",
        "ground_truth_sql": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'",
        "difficulty": ""
    },
    {
        "question": "How many female users use ZenFone 5 devices?",
        "hint": "female refers to gender = 'F'; ZenFone 5 refers to device_model = 'ZenFone 5';",
        "error_sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F' AND T1.device_model = 'ZenFone 5'",
        "compiler_hint": "no such table: device_user",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and the tables are joined in the correct order. In this case, the error occurred because the join was done in the wrong order, and the wrong table was used for the join. To avoid this mistake, carefully examine the schema and the relationships between the tables, and make sure to join the tables in the correct order based on the foreign key relationships. Additionally, double-check the table names and column names to ensure they are correct.",
        "ground_truth_sql": "SELECT COUNT(T1.gender) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'F' AND T2.device_model = 'ZenFone 5'",
        "difficulty": ""
    },
    {
        "question": "What is the position coordinate on the page menu of the \"Small Hominy\" dish and how long did it appear?",
        "hint": "position coordinate = xpos, ypos; Small Hominy is a name of dish; how long it appear = SUBTRACT(last_appeared, first_appeared);",
        "error_sql": "SELECT T2.xpos, T2.ypos, T2.last_appeared - T2.first_appeared FROM MenuItem AS T1 INNER JOIN MenuItem AS T2 ON T1.dish_id = T2.dish_id WHERE T1.name = 'Small Hominy'",
        "compiler_hint": "no such table: Dish",
        "reflective_cot": "### Tip: \nWhen joining two tables, carefully examine the column names in the SELECT statement to ensure they are being retrieved from the correct table. In this case, the 'last_appeared' and 'first_appeared' columns should be retrieved from the 'Dish' table (T1), not the 'MenuItem' table (T2), as the 'Dish' table is the one that contains the information about the dish's appearance.",
        "ground_truth_sql": "SELECT T2.xpos, T2.ypos, T1.last_appeared - T1.first_appeared FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Small Hominy'",
        "difficulty": ""
    },
    {
        "question": "What is the full name of client whose email address is emily.garcia43@outlook.com?",
        "hint": "full name refers to first middle last",
        "error_sql": "SELECT first, middle, last FROM ClientInformation WHERE email = 'emily.garcia43@outlook.com'",
        "compiler_hint": "no such table: client",
        "reflective_cot": "### Tip: \nAlways verify the table name in the database schema before writing a SQL query. In this case, the correct table name is not provided, but the error message suggests that the correct table name might be 'ClientInformation' instead of 'client'. The correct query should be written as: SELECT first, middle, last FROM ClientInformation WHERE email = 'emily.garcia43@outlook.com'.",
        "ground_truth_sql": "SELECT first, middle, last FROM client WHERE email = 'emily.garcia43@outlook.com'",
        "difficulty": ""
    },
    {
        "question": "How many rainy days were recorded in Mountain View?",
        "hint": "rainy days refers to events = 'rain'; Mountain View refers to zip_code = 94041;",
        "error_sql": "SELECT COUNT(date) FROM weather WHERE events = 'rain' AND zip_code = '94041'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen dealing with data that may have varying cases or formats, it's essential to ensure consistency in the query. In this case, the error SQL query and SQL after reflection were incorrect because they assumed the 'events' column would always be in lowercase or title case, respectively. However, the correct approach is to use a case-insensitive comparison or to standardize the data before querying. Additionally, using the SUM and IIF functions provides a more robust way to count the occurrences of a specific condition, as it allows for more flexibility and accuracy in the query.",
        "ground_truth_sql": "SELECT SUM(IIF(zip_code = 94041 AND events = 'Rain', 1, 0)) FROM weather",
        "difficulty": ""
    },
    {
        "question": "For the Yelp business which had the most number of \"short\" tips, which category does it belong to?",
        "hint": "short tips refers to tip_length = 'short'; most number of short tips refers to MAX(COUNT(tip_length = 'short')); category refers to category_name;",
        "error_sql": "SELECT T3.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T3.tip_length = 'short' GROUP BY T3.category_name ORDER BY COUNT(T3.tip_length) DESC LIMIT 1",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join order is correct and logical. In this case, the correct order is to start with the Categories table, then join Business_Categories, followed by Business, and finally Tips. This order makes sense because we are trying to find the category of a business, so we start with the category and work our way down to the business and its tips. Additionally, when using the COUNT function with a condition, it's better to use the COUNT function with a CASE statement or the SUM function with an IF statement, but in this case, using the COUNT function directly with the WHERE clause is sufficient. However, using the DISTINCT keyword is necessary to avoid duplicate category names in case a business belongs to multiple categories.",
        "ground_truth_sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'",
        "difficulty": ""
    },
    {
        "question": "How many authors drafted the paper \"Subcellular localization of nuclease in barley aleurone\"?",
        "hint": "'Subcellular localization of nuclease in barley aleurone' is the title of paper",
        "error_sql": "SELECT COUNT(T2.AuthorId) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen counting the number of authors for a specific paper, it's essential to consider that multiple authors might have the same name. Therefore, counting distinct names might not provide the accurate count of unique authors. Instead, count the distinct AuthorId, which uniquely identifies each author. The corrected SQL query should be: SELECT COUNT(DISTINCT T2.AuthorId) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'",
        "difficulty": ""
    },
    {
        "question": "Give the number of followers for the user who posted the most lists.",
        "hint": "number of followers refers to user_subscriber; posted the most lists refers to MAX(COUNT(list_id))",
        "error_sql": "SELECT MAX(T1.user_subscriber) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T2.list_id) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen solving SQL problems, it's essential to carefully read and understand the question, especially the column names and their meanings. In this case, the question asks for the \"number of followers\" which refers to the column \"list_followers\" in the \"lists\" table, not \"user_subscriber\" in the \"lists_users\" table. Additionally, the question asks for the \"user who posted the most lists,\" which means we need to count the number of lists each user has, not the number of movies. Therefore, we should group by the user_id and count the list_id, then order by this count in descending order and limit the result to 1.",
        "ground_truth_sql": "SELECT SUM(T1.list_followers) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T1.list_id) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the ratio of active and inactive app users of the event ID \"58\"?",
        "hint": "ratio = DIVIDE(SUM(is_active = 1), SUM(is_active = 0)); active refers to is_active = 1; inactive refers to is_active = 0;",
        "error_sql": "SELECT CAST(SUM(IIF(is_active = 1, 1, 0)) AS REAL) / SUM(IIF(is_active = 0, 1, 0)) FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = \"58\"",
        "compiler_hint": "no such table: app_events",
        "reflective_cot": "### Tip: \nWhen writing SQL queries, be mindful of the data types of the columns. In this case, the event_id column is likely an integer, not a string. Therefore, the value \"58\" should not be enclosed in quotes. Additionally, the CAST to REAL is unnecessary in this case, as the division operation will automatically return a floating-point number.",
        "ground_truth_sql": "SELECT SUM(IIF(is_active = 1, 1, 0)) / SUM(IIF(is_active = 0, 1, 0)) AS per FROM app_events WHERE event_id = 58",
        "difficulty": ""
    },
    {
        "question": "List the student's first and last name that got a C in the course named \"Applied Deep Learning\".",
        "hint": "student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';",
        "error_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning' AND T2.grade = 'C'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables and filtering data, ensure that the column values used in the WHERE clause are exact matches. In this case, the error was due to a trailing space in the course name 'Applied Deep Learning '. Always verify the data and column values to avoid such mistakes. Additionally, consider using the TRIM() function to remove leading and trailing spaces from column values to prevent similar errors in the future.",
        "ground_truth_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'",
        "difficulty": ""
    },
    {
        "question": "How many 4-year public institutions are there in the state of Florida? Give all of their names.",
        "hint": "4-year refers to level = '4-year'; public refers to control = 'Public'; names refers to chronname;",
        "error_sql": "SELECT COUNT(T1.unitid), T1.chronname FROM institution AS T1 INNER JOIN state_sector AS T2 ON T1.state = T2.state WHERE T1.level = '4-year' AND T1.control = 'Public' AND T2.state = 'FL'",
        "compiler_hint": "no such table: institution_details",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the join condition is correct and that the columns being joined are from the correct tables. In this case, the error was due to joining on the 'state' column which is present in both tables, but the condition for 'level' and 'control' should be applied to the 'state_sector_details' table, not the 'institution_details' table. Additionally, the 'COUNT' function is not necessary when the goal is to retrieve the names of institutions, not the count.",
        "ground_truth_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 WHERE T2.level = '4-year' AND T2.control = 'Public' AND T2.state = 'Florida'",
        "difficulty": ""
    },
    {
        "question": "What is the age of the youngest female user of the app?",
        "hint": "youngest user refers to MIN(age); female refers to gender = 'F';",
        "error_sql": "SELECT MIN(T1.age) FROM user AS T1 INNER JOIN device_user AS T2 ON T1.user_id = T2.user_id WHERE T1.gender = 'F'",
        "compiler_hint": "no such table: gender_age",
        "reflective_cot": "### Tip: \nAlways ensure that the table name in the SQL query matches the actual table name in the database schema. In this case, the correct table name is not provided, but the error message suggests that the table name should be 'user' instead of 'gender_age'. The correct query should be: SELECT MIN(age) FROM user WHERE gender = 'F'.",
        "ground_truth_sql": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'",
        "difficulty": ""
    },
    {
        "question": "Indicate the quantity of Blade products sold.",
        "hint": "Blade' is name of product;",
        "error_sql": "SELECT SUM(T1.Quantity) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Blade'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and selecting a column, ensure that the column name and table alias match. In this case, the error was due to selecting `T2.Quantity` instead of `T1.Quantity` in the first query, and then incorrectly changing `SUM(T1.Quantity)` to `SUM(T2.Quantity)` in the second query. The correct approach is to use `SUM(T1.Quantity)` and keep the table alias consistent. Additionally, since we want the total quantity of 'Blade' products sold, we should use `SUM` aggregation function instead of `DISTINCT` which would return multiple rows if there are multiple sales of 'Blade' products.",
        "ground_truth_sql": "SELECT DISTINCT T2.Quantity FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Blade'",
        "difficulty": ""
    },
    {
        "question": "What is the ratio of female users to male users who uses a vivo device?",
        "hint": "ratio = DIVIDE(SUM(gender = 'M' WHERE phone_brand = 'vivo'), SUM(gender = 'F' WHERE phone_brand = 'vivo')); female refers to gender = 'F'; male refers to gender = 'M'; vivo device refers to phone_brand = 'vivo';",
        "error_sql": "SELECT CAST(SUM(IIF(T2.gender = 'M', 1, 0)) AS REAL) / SUM(IIF(T2.gender = 'F', 1, 0)) FROM gender_age AS T2 INNER JOIN phone_brand_device_model2 AS T1 ON T1.device_id = T2.device_id WHERE T1.phone_brand = 'vivo'",
        "compiler_hint": "no such table: phone_brand_device_model2",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the join condition is correct and the tables are joined in the correct order. In this case, the error was due to the incorrect join condition (T2.device_id = T1.device_id instead of T1.device_id = T2.device_id) and the tables were joined in the wrong order (phone_brand_device_model2 was joined with gender_age instead of the other way around). To avoid this mistake, carefully examine the schema of the tables and the join condition to ensure that they are correct. Additionally, consider the logical relationship between the tables and the columns being joined to ensure that the join is performed in the correct order.",
        "ground_truth_sql": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'",
        "difficulty": ""
    },
    {
        "question": "In which group of islands is Rinjani Mountain located?",
        "hint": "",
        "error_sql": "SELECT T2.Islands FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Rinjani'",
        "compiler_hint": "near \"Group\": syntax error",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table names and their aliases are correct and consistent with the actual schema. In this case, the initial error was due to a non-existent table 'mountain AS T1'. The corrected query used the correct table names 'island AS T1', 'mountainOnIsland AS T2', and 'mountain AS T3'. To avoid this mistake, double-check the schema and table names before writing the SQL query.",
        "ground_truth_sql": "SELECT T1.Islands FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Name = 'Rinjani'",
        "difficulty": ""
    },
    {
        "question": "How many businesses are with high review count?",
        "hint": "high review count refers to review_count = 'High'",
        "error_sql": "SELECT COUNT(business_id) FROM Businesses WHERE review_count = 'High'",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip: \nAlways verify the exact table and column names from the schema before writing the SQL query. In this case, the correct table name is not provided, but the error message suggests it might be 'Businesses' instead of 'Business'. The correct query should be written as `SELECT COUNT(business_id) FROM Businesses WHERE review_count = 'High'`.",
        "ground_truth_sql": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'High'",
        "difficulty": ""
    },
    {
        "question": "How many disabled students have zero absences?",
        "hint": "zero absences refers to month = 0;",
        "error_sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN person AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T2.name = T3.name WHERE T1.month = 0",
        "compiler_hint": "no such table: disabled",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table names are correct and consistent with the actual table names in the database schema. In this case, the correct table name is \"longest_absence_from_school\" (with an \"e\" in \"absence\"), not \"longest_absense_from_school\" (without an \"e\" in \"absense\"). Double-check the table names to avoid such typos.",
        "ground_truth_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0",
        "difficulty": ""
    },
    {
        "question": "Which low income country has a series code of DT.DOD.DECT.CD? Name the country code of it.",
        "hint": "IncomeGroup = 'Low income';",
        "error_sql": "SELECT T1.Code FROM Country AS T1 INNER JOIN Economy AS T2 ON T1.Code = T2.Country INNER JOIN Series AS T3 ON T2.SeriesCode = T3.SeriesCode WHERE T2.IncomeGroup = 'Low income' AND T3.SeriesCode = 'DT.DOD.DECT.CD'",
        "compiler_hint": "no such table: country",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the ON clause match the actual column names in the tables. In this case, the error was due to using 'Code' instead of 'CountryCode' in the Country table and 'Country' instead of 'Countrycode' in the CountryNotes table. Additionally, verify that the table names and column names are correct and match the schema of the database.",
        "ground_truth_sql": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'Low income' AND T2.Seriescode = 'DT.DOD.DECT.CD'",
        "difficulty": ""
    },
    {
        "question": "What is the inventory ID of Karen Jackson?",
        "hint": "",
        "error_sql": "SELECT inventory_id FROM client WHERE first = 'Karen' AND last = 'Jackson'",
        "compiler_hint": "no such table: ClientInformation",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema. In this case, the error occurred because the table name was incorrect ('ClientInformation' instead of 'customer') and the column names were also incorrect ('first' and 'last' instead of 'first_name' and 'last_name'). Additionally, the query required a join with the 'rental' table to access the 'inventory_id' column. To avoid this mistake, carefully review the schema and verify the table and column names before generating the query.",
        "ground_truth_sql": "SELECT T2.inventory_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'KAREN' AND T1.last_name = 'JACKSON'",
        "difficulty": ""
    },
    {
        "question": "How many teams did the team with the most victories in 1915 play against?\nIndicate the name of the team who won the most games in 1915, as well as the names of the opposing team.",
        "hint": "team playing refers to tmID; oppositng team refers to oppID; victories' and 'wins' are synonyms; most victories refers to max(w)",
        "error_sql": "SELECT T1.name, T2.name FROM Teams AS T1 INNER JOIN TeamVsTeam AS T2 ON T1.tmID = T2.tmID INNER JOIN Teams AS T3 ON T2.oppID = T3.tmID WHERE T1.year = 1915 AND T1.W = (SELECT MAX(W) FROM Teams WHERE year = 1915)",
        "compiler_hint": "no such column: T2.name",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that you are joining on the correct columns and that the columns you are selecting exist in the tables you are joining. In this case, the error occurred because the `TeamVsTeam` table does not have a `name` column, but rather `oppID` which is the ID of the opposing team. Additionally, when trying to find the team with the most victories, it's better to use a subquery to find the team ID with the most wins and then join this result with the `TeamVsTeam` table to find the number of teams they played against.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT oppID), T2.tmID, T2.oppID FROM Teams AS T1 INNER JOIN TeamVsTeam AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.year = 1915 GROUP BY T2.tmID, T2.oppID ORDER BY SUM(T2.W) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Under the category name of \"Coffee & Tea\", mention any 5 business ID , their state and city.",
        "hint": "",
        "error_sql": "SELECT T1.business_id, T1.state, T1.city FROM Businesses AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Coffee & Tea' LIMIT 5",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the order of the tables in the FROM and JOIN clauses matches the order of the joins in the query logic. In this case, the query starts with the Categories table, then joins Business_Categories, and finally joins Business. The original queries started with the Business table, which is incorrect. Always follow the logical order of the joins to avoid mistakes.",
        "ground_truth_sql": "SELECT T2.business_id, T3.state, T3.city FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Coffee & Tea' LIMIT 5",
        "difficulty": ""
    },
    {
        "question": "List out the phone number of the shipping company of order id 10296.",
        "hint": "shipping company refers to Shippers; phone number refers to Phone",
        "error_sql": "SELECT T2.Phone FROM `Order` AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10296",
        "compiler_hint": "no such table: Orders",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema, and double-check the data values used in the WHERE clause to avoid incorrect results. In this case, the error was due to using the wrong OrderID (10296 instead of 10260). Always verify the data values against the provided schema or sample data to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.Phone FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260",
        "difficulty": ""
    },
    {
        "question": "Among the cars from Asia, list the IDs of cars that were introduced in 1979.",
        "hint": "from Asia refers to country = 'Japan'; introduced in 1979 refers to model_year = 1979",
        "error_sql": "SELECT car_id FROM Car WHERE country = 'Japan' AND model_year = 1979",
        "compiler_hint": "no such table: Cars",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema. In this case, the error occurred because the table name was incorrect ('Cars' instead of 'production') and the country was not directly compared to 'Japan' but rather to 'Asia' which was then joined with the 'country' table to get the correct origin. Also, the column name for the car ID was incorrect ('car_id' instead of 'ID'). To avoid this mistake, carefully review the schema and ensure that all table and column names are accurate.",
        "ground_truth_sql": "SELECT T1.ID FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Japan' AND T1.model_year = 1979",
        "difficulty": ""
    },
    {
        "question": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.",
        "hint": "amount of order refers to quantityOrdered; most amount of orders refers to SUM(QuantityOrdered); estimated earnings refers to expected profits; expected profits = SUBTRACT(msrp, buyPrice);",
        "error_sql": "SELECT T1.productVendor, SUM(T1.quantityInStock * T1.MSRP - T1.buyPrice * T1.quantityInStock) FROM products AS T1 INNER JOIN `orderdetails` AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the total estimated earnings, avoid multiplying the sum of quantityInStock or MSRP/buyPrice with the sum of quantityOrdered. Instead, calculate the profit per unit (MSRP - buyPrice) and multiply it with the sum of quantityOrdered for each product. Also, use COUNT(T2.quantityOrdered) or COUNT(T2.orderNumber) to get the total number of orders, not SUM(T2.quantityOrdered) which gives the total quantity ordered.",
        "ground_truth_sql": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the players who played 72 games, how many are left-shooters?",
        "hint": "played 72 games refers to GP = 72; left-shooters refers to shoots = 'L';",
        "error_sql": "SELECT COUNT(T1.playerID) FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.GP = 72 AND T2.shoots = 'L'",
        "compiler_hint": "no such table: players",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that you accurately identify the relevant tables and their corresponding columns based on the provided schema. In this case, the error occurred because the query referenced a non-existent table 'players' and did not account for the correct table names 'SeasonStatus' and 'PlayerInfo' and their respective columns. To avoid this mistake, carefully review the schema and verify the table and column names before generating the query.",
        "ground_truth_sql": "SELECT COUNT(T2.ELITEID) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.GP = 72 AND T2.shoots = 'L'",
        "difficulty": ""
    },
    {
        "question": "How many items did Customer#000021159 order? Calculate those items total charges.",
        "hint": "items Customer#000021159 order refer to l_linenumber where c_name = 'Customer#000021159'; SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where c_name = 'Customer#000021159';",
        "error_sql": "SELECT COUNT(T2.l_linenumber), SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM customers AS T1 INNER JOIN lineitem AS T2 ON T1.c_custkey = T2.l_custkey WHERE T1.c_name = 'Customer#000021159'",
        "compiler_hint": "no such table: customer",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join order and conditions are correct. In this case, the error was due to missing the 'orders' table in the join sequence. To avoid this mistake, carefully analyze the relationships between tables and verify the join conditions. Additionally, when aggregating data, ensure that the GROUP BY clause is correctly applied to the relevant columns, and the COUNT function is applied to the correct column. In this case, the COUNT function should be applied to 'o_orderkey' instead of 'l_linenumber', and the GROUP BY clause should be removed or applied to a different column if not necessary.",
        "ground_truth_sql": "SELECT COUNT(T2.o_orderkey), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey INNER JOIN lineitem AS T3 ON T2.o_orderkey = T3.l_orderkey WHERE T1.c_name = 'Customer#000021159' GROUP BY T3.l_linenumber",
        "difficulty": ""
    },
    {
        "question": "Indicate the name of the country where Leka Trading supplies Ipoh Coffee product.",
        "hint": "'Leka Trading' is a CompanyName; 'Ipoh Coffee' is a ProductName",
        "error_sql": "SELECT T3.Country FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Countries AS T3 ON T1.CountryID = T3.CountryID WHERE T2.ProductName = 'Ipoh Coffee' AND T1.CompanyName = 'Leka Trading'",
        "compiler_hint": "no such table: Products",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column being referenced exists in the joined table. In this case, the error occurred because the 'Country' column was being referenced from the 'Countries' table (T3) instead of the 'Suppliers' table (T2), which already contains the 'Country' information. Always verify the schema and column names to avoid unnecessary joins and incorrect column references.",
        "ground_truth_sql": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Ipoh Coffee' AND T2.CompanyName = 'Leka Trading'",
        "difficulty": ""
    },
    {
        "question": "How many menus were created for lunch?",
        "hint": "created for lunch refers to event = 'LUNCH';",
        "error_sql": "SELECT COUNT(T1.id) FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.event = 'LUNCH'",
        "compiler_hint": "no such table: Menu",
        "reflective_cot": "### Tip: \nAlways verify the table name in the database schema before writing a SQL query. In this case, the correct table name is 'Menu' but the error message 'no such table: MenuPage' suggests that the query was trying to access a non-existent table 'MenuPage'. However, the actual mistake was in the SQL query itself, not the table name. The correct table name 'Menu' was used in the query, but the query was still incorrect. The mistake was not in the table name, but rather the query was missing the correct join or subquery to get the correct count of menus created for lunch. The correct query is indeed 'SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH'', but the error message was misleading. To avoid this mistake, always verify the table name and the query logic before executing the query.",
        "ground_truth_sql": "SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH'",
        "difficulty": ""
    },
    {
        "question": "What is the active and inactive ratio of the business with the review count of low.",
        "hint": "DIVIDE(COUNT(business_id where review_count = 'Low' and active = 'true'), COUNT(business_id where review_count = 'Low' and active = 'false'));",
        "error_sql": "SELECT CAST(SUM(IIF(review_count = 'Low' AND active = 1, 1, 0)) AS REAL) / SUM(IIF(review_count = 'Low' AND active = 0, 1, 0)) FROM Business",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table name and column names match the actual schema, and the data types of the columns are correctly handled. In this case, the error was due to the incorrect table name 'Business' instead of 'Businesses', and incorrect handling of the 'active' column which is of integer type (0/1) instead of string type ('true'/'false'). Additionally, the WHERE clause should be used to filter the rows before applying the aggregation functions, and the CASE statement should be used instead of IIF for better readability and compatibility with different SQL dialects.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN active = 'false' THEN 1 ELSE 0 END) AS radio FROM Business WHERE review_count = 'Low'",
        "difficulty": ""
    },
    {
        "question": "How many American cars have an acceleration time of less than 12 seconds?",
        "hint": "American car refers to country = 'USA'; an acceleration time of less than 12 seconds refers to acceleration < 12",
        "error_sql": "SELECT COUNT(ID) FROM cars WHERE country = 'USA' AND acceleration < 12",
        "compiler_hint": "no such table: production",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the column names used in the SELECT, WHERE, and JOIN clauses match the actual column names in the tables. In this case, the error occurred because the column 'acceleration' is in the 'data' table (T1), not the 'production' table. Also, use COUNT(*) instead of COUNT(T1.ID) to count all rows that match the condition, regardless of whether the ID is NULL or not.",
        "ground_truth_sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'USA' AND T1.acceleration < 12",
        "difficulty": ""
    },
    {
        "question": "Provide the price and country origin of the car named Ford Maverick.",
        "hint": "country origin refers to country; Ford Maverick refers to car_name = 'ford maverick'",
        "error_sql": "SELECT T1.price, T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.car_name = 'ford maverick'",
        "compiler_hint": "no such table: production",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table names and column names match the actual schema. In this case, the error occurred because the table name 'production' was used instead of 'data' for the car_name filter, and the join with 'price' table was missing. To avoid this mistake, carefully review the schema and verify the table and column names before generating the query. Additionally, consider the relationships between tables and ensure that the joins are correct to retrieve the desired information.",
        "ground_truth_sql": "SELECT DISTINCT T1.price, T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T4.car_name = 'ford maverick'",
        "difficulty": ""
    },
    {
        "question": "How many of the movies rated 5 are rated by a user between the ages of 25 and 35?",
        "hint": "",
        "error_sql": "SELECT COUNT(T1.movie_id) FROM movie_rating AS T1 INNER JOIN user AS T2 ON T1.user_id = T2.user_id WHERE T1.rating = 5 AND T2.age BETWEEN 25 AND 35",
        "compiler_hint": "no such table: ratings",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema. In this case, the error occurred due to incorrect table and column names. To avoid this mistake, carefully review the schema and verify the table and column names before generating the query. Additionally, pay attention to the error messages, as they often provide valuable information about the incorrect table or column names.",
        "ground_truth_sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age BETWEEN 25 AND 35",
        "difficulty": ""
    },
    {
        "question": "What are the titles and genres of the one-act works of Shakespeare?",
        "hint": "one-act works refers to count(Act) = 1; genre refers to GenreType\n",
        "error_sql": "SELECT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id GROUP BY T1.Title, T1.GenreType HAVING COUNT(T2.Act) = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with aggregate functions like COUNT() in SQL, it's essential to consider the context in which they are applied. In this case, the initial query attempted to use COUNT(T2.Act) to identify one-act works, but this approach is incorrect because it counts the number of rows in the chapters table where the Act is present, not the number of distinct Acts per work. The corrected query uses a simple WHERE clause to filter works with only one Act, which is a more accurate approach. To avoid similar mistakes, always carefully evaluate the logic behind your queries and consider the relationships between tables and the data they contain.",
        "ground_truth_sql": "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1",
        "difficulty": ""
    },
    {
        "question": "How many of the unemployed students are disabled?",
        "hint": "",
        "error_sql": "SELECT COUNT(T1.name) FROM no_job AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name",
        "compiler_hint": "no such table: unemployed",
        "reflective_cot": "### Tip: \nAlways verify the table names in the database schema before writing SQL queries. In this case, the table name is actually 'no_job' instead of 'unemployed'. The correct SQL query should be: SELECT COUNT(T1.name) FROM no_job AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name",
        "ground_truth_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name",
        "difficulty": ""
    },
    {
        "question": "How many images have less than 15 object samples?",
        "hint": "images refer to IMG_ID; less than 15 object samples refer to COUNT(OBJ_SAMPLE_ID) < 15;",
        "error_sql": "SELECT COUNT(IMG_ID) FROM ( SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) AS OBJ_SAMPLE_COUNT FROM IMG_OBJ GROUP BY IMG_ID ) WHERE OBJ_SAMPLE_COUNT < 15",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen solving SQL problems, carefully consider the question being asked and the structure of the database. In this case, the question asks for the number of images with less than 15 object samples, but the object samples are not directly comparable to 15. Instead, the question is asking for the count of images where the count of object samples is less than 15. The correct approach is to use the HAVING clause to filter the results after grouping, but in this case, the subquery is unnecessary. The correct solution is to use the COUNT(DISTINCT) function to count the number of images with less than 15 object samples. However, the provided Ground Truth SQL is incorrect as it is comparing OBJ_SAMPLE_ID directly to 15, which is not the correct interpretation of the question. The correct solution would be to use a subquery or a join to count the number of object samples for each image and then filter the results.",
        "ground_truth_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_SAMPLE_ID < 15",
        "difficulty": ""
    },
    {
        "question": "How much time do businesses in El Mirage City, AZ State operate in average daily?",
        "hint": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); DIVIDE(SUM(SUBTRACT(closing_time, opening_time)), SUM(Business.business_id))",
        "error_sql": "SELECT CAST(SUM(STRFTIME('%H', T1.closing_time) - STRFTIME('%H', T1.opening_time)) AS REAL) / COUNT(T1.business_id) FROM Business_Categories AS T2 INNER JOIN Business AS T1 ON T2.business_id = T1.business_id WHERE T1.city = 'El Mirage' AND T1.state = 'AZ'",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip: \nWhen performing date and time operations, be aware of the data types and the specific SQL functions used. In this case, the error was due to incorrect usage of STRFTIME and subtraction of time values. To avoid this mistake, ensure that you understand the data types of the columns involved (e.g., datetime, time, etc.) and use the correct functions for date and time operations. Additionally, verify that the columns are in the correct table, as the initial error was due to referencing a non-existent table. In this case, the correct approach was to simply subtract the opening_time from the closing_time, without using STRFTIME, and to join the Business and Business_Hours tables correctly.",
        "ground_truth_sql": "SELECT SUM(T2.closing_time - T2.opening_time) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'El Mirage' AND T1.state = 'AZ'",
        "difficulty": ""
    },
    {
        "question": "What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016?",
        "hint": "percentage = MULTIPLY(DIVIDE(SUM(`group` = 'F27-28'), COUNT(device_id)), 1.0); on the 3rd of May 2016 refers to timestamp = '2016-05-03%';",
        "error_sql": "SELECT CAST(SUM(IIF(T2.`group` = 'F27-28', 1, 0)) AS REAL) / COUNT(T1.device_id) * 100 FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp LIKE '2016-05-03%'",
        "compiler_hint": "no such table: device_user",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being joined and the correct columns are being used for the join operation. In this case, the error occurred because the 'group' column is in the 'gender_age' table, not the 'user' table, and the 'device_id' column should be joined with the 'events_relevant' table, not the 'events' table. Additionally, the 'timestamp' column should be filtered using the SUBSTR function to extract the date part, rather than using the LIKE operator. Always carefully review the schema and the query to ensure that the correct tables and columns are being used.",
        "ground_truth_sql": "SELECT SUM(IIF(T1.`group` = 'F27-28', 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE SUBSTR(T2.timestamp, 1, 10) = '2016-05-03'",
        "difficulty": ""
    },
    {
        "question": "What is the salary rate per hour that the company paid to the first 5 employees that they hired?",
        "hint": "salary rate per hour refers to Rate; first 5 employees that were hired refers to 5 oldest HireDate;",
        "error_sql": "SELECT Rate FROM EmployeePayHistory ORDER BY RateChangeDate ASC LIMIT 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the salary rate per hour for the first 5 employees hired, it's crucial to join the EmployeePayHistory table with the Employee table to access the HireDate column, which indicates the hiring order. However, the initial query only ordered by RateChangeDate, which doesn't necessarily reflect the hiring order. The corrected query joins the necessary tables and orders by HireDate to accurately retrieve the salary rates for the first 5 employees hired. Additionally, the LIMIT clause should be used with an OFFSET of 0 to ensure the correct results are returned.",
        "ground_truth_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T2.HireDate ASC LIMIT 0, 5",
        "difficulty": ""
    },
    {
        "question": "What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works?",
        "hint": "full address = addressLine1 + addressLine2; NYC is a shortname of New York City.",
        "error_sql": "SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode INNER JOIN customers AS T3 ON T2.employeeNumber = T3.salesRepEmployeeNumber WHERE T3.city = 'New York'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join conditions are correct and the tables are joined in the correct order. Also, verify that the column names and table aliases are correctly referenced in the SELECT and WHERE clauses. In this case, the error was due to incorrect table aliases and join order. Additionally, the city name in the WHERE clause should match the actual value in the database, which is 'NYC' instead of 'New York'. Furthermore, the job title filter 'Sales Rep' was missing in the initial query. To avoid such mistakes, it's essential to carefully review the database schema, table relationships, and data values before writing the SQL query.",
        "ground_truth_sql": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'",
        "difficulty": ""
    },
    {
        "question": "Which distinct state makes beer that has the least amount of bitterness?",
        "hint": "",
        "error_sql": "SELECT DISTINCT T1.state FROM breweries AS T1 INNER JOIN beers AS T2 ON T1.id = T2.brewery_id ORDER BY T2.ibu ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen solving SQL problems, especially those involving aggregate functions or subqueries, it's essential to consider the entire query, not just the individual parts. In this case, the initial query and the revised query both failed to correctly identify the state with the least bitter beer because they relied solely on the ORDER BY and LIMIT clauses, which can return incorrect results if there are multiple beers with the same minimum IBU value. To avoid this mistake, use a subquery to find the minimum IBU value and then join this result with the main query to find the corresponding state(s). This approach ensures that all states with the least bitter beer are correctly identified.",
        "ground_truth_sql": "SELECT DISTINCT T2.state, T1.ibu FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.ibu IS NOT NULL AND T1.ibu = ( SELECT MIN(ibu) FROM beers )",
        "difficulty": ""
    },
    {
        "question": "When did the earliest complaint start on 2017/3/22?",
        "hint": "earliest complaint refers to oldest ser_start; on 2017/3/22 refers to \"Date received\" = '2017-03-22';",
        "error_sql": "SELECT MIN(T2.ser_start) FROM complaint AS T1 INNER JOIN events AS T2 ON T1.complaint_id = T2.complaint_id WHERE T1.`Date received` = '2017-03-22'",
        "compiler_hint": "no such table: client",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table names and column names match the actual schema of the database. In this case, the error occurred because the query was referencing tables 'client' and 'events', but the correct table name is 'callcenterlogs'. Additionally, the column name 'ser_start' was used instead of 'ser_time'. To avoid this mistake, carefully review the database schema before generating SQL queries.",
        "ground_truth_sql": "SELECT MIN(ser_time) FROM callcenterlogs WHERE `Date received` = '2017-03-22'",
        "difficulty": ""
    },
    {
        "question": "Calculate the percentage of male patients with viral sinusitis condition.",
        "hint": "percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE gender = 'M'), COUNT(patients.patient) WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder))), 100); male patients refers to gender = 'M'; viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)';",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patient AS T1 INNER JOIN condition AS T2 ON T1.patient_id = T2.patient_id WHERE T2.description = 'Viral sinusitis (disorder)'",
        "compiler_hint": "no such table: patients",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the column names used in the ON clause match the actual column names in the tables. In this case, the error message \"no such table: patient\" suggests that the column name in the patients table is not \"patient\", but rather something else (e.g., \"id\", \"patient_id\", etc.). Always verify the column names in the schema before writing the SQL query.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "difficulty": ""
    },
    {
        "question": "How many elite users have reviewed Yelp_Business no.1?",
        "hint": "Yelp_Business no.1 refers to business_id = 1",
        "error_sql": "SELECT COUNT(T1.user_id) FROM User AS T1 INNER JOIN Review AS T2 ON T1.user_id = T2.user_id INNER JOIN Elite AS T3 ON T1.user_id = T3.user_id WHERE T2.business_id = 1",
        "compiler_hint": "no such table: Users",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table names match exactly with the actual table names in the database schema, including case sensitivity and pluralization. In this case, the error occurred because the table name was 'Reviews' instead of 'Review', and 'Users' instead of 'User'. Always double-check the table names to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.business_id = 1",
        "difficulty": ""
    },
    {
        "question": "What is the country location of the employee who handled order id 10257?",
        "hint": "",
        "error_sql": "SELECT T3.Country FROM `Order` AS T1 INNER JOIN Employees AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Customers AS T3 ON T2.EmployeeID = T3.SalesRepEmployeeNumber WHERE T1.OrderID = 10257",
        "compiler_hint": "no such table: Orders",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column being selected (in this case, Country) is from the correct table. Also, verify that the join conditions are correct and that the correct table is being referenced for the filter condition (in this case, OrderID). In this scenario, the Country column is in the Employees table, and the OrderID filter should be applied to the Orders table.",
        "ground_truth_sql": "SELECT T1.Country FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257",
        "difficulty": ""
    },
    {
        "question": "Identify the customer, which placed the largest order in terms of value.",
        "hint": "value refers to SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)); the largest order in value refers to MAX(value)",
        "error_sql": "SELECT T1.CustomerID, T1.CompanyName FROM `Customers` AS T1 INNER JOIN `Order Details` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.UnitPrice * T2.Quantity * (1 - T2.Discount) = ( SELECT MAX(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM `Customers` AS T1 INNER JOIN `Order Details` AS T2 ON T1.CustomerID = T2.CustomerID )",
        "compiler_hint": "no such table: customers",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join order and the tables being joined are correct. In this case, the error was due to missing the 'Orders' table in the join, which is necessary to link 'Customers' with 'Order Details'. Additionally, when using aggregate functions like SUM, MAX, etc., ensure that the GROUP BY clause is correctly defined to group the results by the desired column(s), in this case, the CustomerID.",
        "ground_truth_sql": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.CustomerID ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among professors with the highest teachability, how many of their students have high salary?",
        "hint": "highest teachability refers to MAX(teachability); high salary refers to salary = 'high';",
        "error_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = (SELECT MAX(teachingability) FROM prof) AND T1.salary = 'high'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen dealing with aggregate functions like MAX, MIN, or AVG, consider whether you need to filter the results based on the aggregate value or if you need to order the results based on the aggregate value. In this case, the goal is to find the count of students with high salary among professors with the highest teachability, which requires ordering the results by teachability in descending order and then limiting the result to the top one, rather than filtering the results based on the maximum teachability value. This is because there could be multiple professors with the same maximum teachability value, and we want to consider all of them.",
        "ground_truth_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What percentage of sell orders on 04/04/2020 were for the state of New York?",
        "hint": "sales order on 04/04/2020 refers to OrderDate = '4/4/20'; 'New York' is\u00a0 the City Name; percentage = Divide (Sum(OrderNumber where City Name = 'New York'), Count (OrderNumber)) * 100",
        "error_sql": "SELECT CAST(SUM(IIF(T2.`City Name` = 'New York', 1, 0)) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T1._StoreID = T2.StoreID WHERE T1.OrderDate = '4/4/20'",
        "compiler_hint": "no such column: T1.City Name",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names referenced in the SELECT, WHERE, and CASE statements match the actual column names in the joined tables. In this case, the error occurred because 'City Name' is not a column in the 'Sales Orders' table, but rather in the 'Store Locations' table. Additionally, when using conditional aggregation, use the standard SQL CASE expression instead of the IIF function, which is specific to certain databases.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN `Store Locations` AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'",
        "difficulty": ""
    },
    {
        "question": "How many employees have salary greater than 70000 but fail the inspection?",
        "hint": "salary greater than 70000 refers to salary > 70000; fail the inspection refers to results = 'Fail'",
        "error_sql": "SELECT COUNT(T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.salary > 70000 AND T2.results = 'Fail'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and counting the number of rows that meet certain conditions, use the DISTINCT keyword to avoid counting duplicate rows. In this case, the error SQL query and SQL after reflection were incorrect because they did not use the DISTINCT keyword, which could lead to incorrect counts if an employee has multiple failed inspections.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND T1.salary > 70000",
        "difficulty": ""
    },
    {
        "question": "How many users, who were a paying subscriber when they rated the movie, gave the movie that was released in 1924 and directed by Erich von Stroheim a rating score of 5?",
        "hint": "Directed by Buster Keaton refers to director_name; released in 1924 refers to movie_release_year = 1924; paying subscriber refers to user_has_payment_method = 1\n\n",
        "error_sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_release_year = 1924 AND T2.director_name = 'Erich von Stroheim' AND T1.rating_score = 5 AND T3.user_has_payment_method = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the correct table is being referenced for each column. In this case, the `user_has_payment_method` column is being referenced from the wrong table. It should be referenced from the `ratings` table, not the `ratings_users` table. Additionally, the `COUNT` function should be counting the `user_id` from the correct table, which is the `ratings` table. Always double-check the table and column references to avoid such mistakes.",
        "ground_truth_sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = 1924 AND T1.director_name = 'Erich von Stroheim' AND T2.rating_score = 5 AND T2.user_has_payment_method = 1",
        "difficulty": ""
    },
    {
        "question": "Which supplier supplies the most amount of products?",
        "hint": "supplier refers to SupplierID; most amount refers to max(count(ProductID))",
        "error_sql": "SELECT SupplierID FROM ProductInformation GROUP BY SupplierID ORDER BY COUNT(ProductID) DESC LIMIT 1",
        "compiler_hint": "no such table: Products",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that you are referencing the correct table and column names. In this case, the error occurred because the query was referencing 'ProductInformation' which does not exist, and also because it was only returning the SupplierID instead of the CompanyName. To avoid this mistake, carefully review the schema and question to ensure that all referenced tables and columns exist and are correctly named. Additionally, make sure to return the desired information, in this case, the CompanyName of the supplier, not just the SupplierID.",
        "ground_truth_sql": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierID, T2.CompanyName ORDER BY COUNT(T1.ProductName) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What are the keywords of the episode which has title as Dangerous Curves?",
        "hint": "",
        "error_sql": "SELECT T2.keywords FROM episodes AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves'",
        "compiler_hint": "no such table: Episode",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table names and column names match the actual schema. In this case, the error was due to joining with the 'Vote' table instead of the 'Keyword' table, and also selecting 'keywords' instead of 'keyword'. To avoid this mistake, double-check the schema and verify the table and column names before generating the SQL query.",
        "ground_truth_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';",
        "difficulty": ""
    },
    {
        "question": "Who directed the movie with the most voice actors?",
        "hint": "who directed refers director;",
        "error_sql": "SELECT T1.director FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2actors AS T3 ON T2.movieid = T3.actor_type = 'voice' GROUP BY T1.director ORDER BY COUNT(T3.actorid) DESC LIMIT 1",
        "compiler_hint": "no such table: movies",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema, and the join conditions are correct. In this case, the mistake was due to incorrect table names (movies2directors) and incorrect join conditions. Additionally, the query should focus on the specific type of actors ('voice') and use the correct table for voice actors. To avoid this mistake, carefully review the schema and ensure that the query accurately reflects the relationships between tables and the specific data being queried.",
        "ground_truth_sql": "SELECT T2.director, COUNT(DISTINCT T1.`voice-actor`) FROM `voice-actors` AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.`voice-actor`) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many right-shooted players have a height of 5'7''?",
        "hint": "right-shooted players refers to shoots = 'R'; height of 5'7'' refers to height_in_inch = '5''7\"';",
        "error_sql": "SELECT COUNT(T1.ELITEID) FROM Player AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch = '5''7\"' AND T1.shoots = 'R'",
        "compiler_hint": "no such table: PlayerInfo",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names used in the ON clause match the actual column names in the tables. In this case, the error occurred because the column name 'height' in the PlayerInfo table does not exist, it should be 'height_id' instead. Always verify the column names in the schema before writing the SQL query.",
        "ground_truth_sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T2.height_in_inch = '5''7\"' AND T1.shoots = 'R'",
        "difficulty": ""
    },
    {
        "question": "Please list the titles of the films that are released in 2006 and have a rental rate of $2.99.",
        "hint": "released in 2006 refers to release_year = 2006; rental rate of $2.99 refers to rental_rate = 2.99",
        "error_sql": "SELECT T1.title FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.release_year = 2006 AND T2.rental_rate = 2.99",
        "compiler_hint": "no such table: film",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the joined tables actually exist in the database schema. In this case, the error message \"no such table: film_category\" indicates that the table does not exist, and therefore, the join operation is unnecessary. Always verify the database schema before writing SQL queries to avoid such mistakes.",
        "ground_truth_sql": "SELECT title FROM film WHERE release_year = 2006 AND rental_rate = 2.99",
        "difficulty": ""
    },
    {
        "question": "Give the model year of the heaviest car.",
        "hint": "the heaviest refers to max(weight)",
        "error_sql": "SELECT model_year FROM data ORDER BY weight DESC LIMIT 1",
        "compiler_hint": "no such table: production",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column being ordered or selected is from the correct table. In this case, the weight column is in the 'data' table (T1), not the 'production' table (T2). Always verify the schema and table aliases to avoid such mistakes.",
        "ground_truth_sql": "SELECT T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What percentage of students are highly satisfied with the Intro to Database 2 course?",
        "hint": "percentage = MULTIPLY(DIVIDE(COUNT(MAX(sat)), (COUNT(student_id))), 1.0); highly satisfied refers to MAX(sat);",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T2.sat = (SELECT MAX(sat) FROM registration WHERE course_id = T1.course_id) THEN T2.student_id END) AS REAL) / COUNT(T2.student_id) * 1.0 FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T1.name = 'Intro to Database 2'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages, ensure that the denominator is the total number of relevant records, not just a count of records in the joined table. In this case, the denominator should be the total number of students who took the 'Intro to Database 2' course, not just the count of student IDs in the joined table. Additionally, consider using subqueries to accurately calculate the total number of relevant records, rather than relying on the joined table.",
        "ground_truth_sql": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'",
        "difficulty": ""
    },
    {
        "question": "What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake?",
        "hint": "apple juice is a name of an ingredient; raspberry-pear couscous cake refers to title",
        "error_sql": "SELECT T4.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T2.ingredient_id = T3.ingredient_id INNER JOIN Quantity AS T4 ON T1.recipe_id = T4.recipe_id WHERE T1.title = 'Raspberry-Pear Couscous Cake' AND T3.name = 'apple juice'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and consistent. In this case, the error was in the join condition between Ingredient and Quantity tables. The correct join condition should be `T3.ingredient_id = T2.ingredient_id` instead of `T2.ingredient_id = T3.ingredient_id`. Additionally, joining Quantity table twice is unnecessary and can lead to incorrect results. Always review the join conditions and table relationships to ensure accuracy.",
        "ground_truth_sql": "SELECT T2.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry-Pear Couscous Cake' AND T3.name = 'apple juice'",
        "difficulty": ""
    },
    {
        "question": "State the male population for all zip code which were under the Berlin, NH CBSA.",
        "hint": "\"Berlin, NH\" is the CBSA_name",
        "error_sql": "SELECT T1.zip_code, T1.male_population FROM zip_cbsa AS T1 INNER JOIN cbsa AS T2 ON T1.cbsa_name = T2.cbsa_name WHERE T2.cbsa_name = 'Berlin, NH'",
        "compiler_hint": "no such table: zip_data",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and the tables are joined in the correct order. In this case, the error was due to incorrect table names and join conditions. To avoid this mistake, carefully review the schema and ensure that the table names and join conditions match the schema. Additionally, when selecting columns, ensure that only the required columns are selected, and if aggregation is required, use the correct aggregation functions and group by the correct columns. In this case, the correct query only required the male_population column and a group by clause to aggregate the results.",
        "ground_truth_sql": "SELECT T2.male_population FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Berlin, NH' GROUP BY T2.male_population",
        "difficulty": ""
    },
    {
        "question": "What is the total number of game played for players from USA?",
        "hint": "game played refers to GP; from USA refers to birthCountry = 'USA';",
        "error_sql": "SELECT SUM(T1.GP) FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.birthCountry = 'USA'",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and performing aggregation operations, ensure that the column being aggregated is from the correct table. In this case, the `GP` column is from the `Scoring` table, not the `Master` table. Additionally, the question asks for the total number of games played, but the correct interpretation is the count of games played, not the sum. Therefore, the correct aggregation function to use is `COUNT`, not `SUM`.",
        "ground_truth_sql": "SELECT COUNT(T2.GP) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'",
        "difficulty": ""
    },
    {
        "question": "Among the countries with more than 3% population growth rate, state the country name in full along with its GDP.",
        "hint": "Population_growth = 3 means 3% population growth rate",
        "error_sql": "SELECT T1.Name, T3.GDP FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T3.Population_growth > 3",
        "compiler_hint": "no such table: country",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the correct tables are being joined based on the required information. In this case, the error occurred because the 'population' table was not initially joined, and the 'population_growth' column was incorrectly referenced from the 'economy' table. To avoid this mistake, carefully review the schema and required information to ensure that the correct tables are being joined and the correct columns are being referenced.",
        "ground_truth_sql": "SELECT T1.Name, T3.GDP FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Population_Growth > 3",
        "difficulty": ""
    },
    {
        "question": "How many crimes against society happened in the Wentworth district according to the FBI?",
        "hint": "\"Wentworth\" is the district_name; crime against society refers to crime_against = 'Society\"",
        "error_sql": "SELECT COUNT(T2.report_no) FROM Districts AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Wentworth' AND T2.crime_against = 'Society'",
        "compiler_hint": "no such table: District",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table names match exactly with the actual table names in the database schema. In this case, the error message \"no such table: Districts\" indicates that the table name should be \"District\" instead of \"Districts\". Additionally, verify that the join conditions and column references are correct to avoid incorrect results. Always double-check the database schema before generating SQL queries.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'",
        "difficulty": ""
    },
    {
        "question": "List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'.",
        "hint": "",
        "error_sql": "SELECT T1.OrderNumber, T4.`Product Name` FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T1._SalesTeamID = T2.SalesTeamID INNER JOIN Products AS T4 ON T1._ProductID = T4.ProductID WHERE T2.`Sales Team` = 'Douglas Tucker'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join order and the tables being joined are correct. In this case, the error was due to the incorrect join order and the fact that the Products table was not the primary table being queried. The correct approach is to start with the Products table and then join the Sales Orders and Sales Team tables to it, rather than starting with the Sales Orders table. Additionally, the query should select distinct ProductID and Product Name to avoid duplicates.",
        "ground_truth_sql": "SELECT DISTINCT T1.ProductID, T1.`Product Name` FROM Products AS T1 INNER JOIN `Sales Orders` AS T2 ON T2._ProductID = T1.ProductID INNER JOIN `Sales Team` AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.`Sales Team` = 'Douglas Tucker'",
        "difficulty": ""
    },
    {
        "question": "List all the cities in Sumatra and state the population of each city.",
        "hint": "Sumatra is an island",
        "error_sql": "SELECT T1.city, T2.population FROM island_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN island AS T3 ON T1.island_id = T3.island_id WHERE T3.island_name = 'Sumatra'",
        "compiler_hint": "no such table: city",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join order and aliasing are correct. In this case, the initial error was due to incorrect aliasing and join order. The correct join order should start with the city table, then join with the locatedOn table, and finally with the island table. Additionally, the aliasing should be consistent, with the city table aliased as T1 and the locatedOn and island tables aliased as T2 and T3, respectively. To avoid this mistake, carefully review the schema and ensure that the join order and aliasing are correct before executing the query.",
        "ground_truth_sql": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Name = 'Sumatra'",
        "difficulty": ""
    },
    {
        "question": "What is the percentage of historical works that have not fewer than five scenes in the 1500s?",
        "hint": "historical works refers to GenreType = 'history'; have not fewer than five scenes in the 1500s refers to count(Scene) > = 5 and DATE > = 1500 AND DATE < = 1599; percentage = divide(count(works.id) where GenreType = 'history' and count(Scene) > = 5, count(works.id) ) as percentage",
        "error_sql": "SELECT CAST(SUM(IIF(T1.GenreType = 'history' AND T2.Scene >= 5, 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Date >= 1500 AND T1.Date <= 1599",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages or ratios involving aggregate functions (like COUNT, SUM, etc.) across multiple tables, ensure that the aggregation is performed at the correct level. In this case, the error occurred because the COUNT(T2.Scene) was not properly aggregated per work_id before being compared to 5. To avoid this mistake, use subqueries or GROUP BY statements to ensure that aggregations are performed at the correct level, and then use the results of these aggregations in the outer query. Additionally, be mindful of the order of operations and ensure that filters (WHERE clauses) are applied before aggregations to avoid incorrect results.",
        "ground_truth_sql": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599",
        "difficulty": ""
    },
    {
        "question": "Give the time stamp for event No.887711.",
        "hint": "event no. refers to event_id; event_id = '887711';",
        "error_sql": "SELECT timestamp FROM `events` WHERE event_id = '887711'",
        "compiler_hint": "no such table: events",
        "reflective_cot": "### Tip: \nAlways verify the exact table name from the schema before generating SQL queries. In this case, the correct table name is 'events', not 'event'. The error message 'no such table: events' was misleading, but it should have prompted a double-check of the table name in the schema.",
        "ground_truth_sql": "SELECT timestamp FROM events WHERE event_id = '887711'",
        "difficulty": ""
    },
    {
        "question": "List at least 3 categories with the lowest number of users.",
        "hint": "lowest number of users refers to MIN(COUNT(label_id));",
        "error_sql": "SELECT T1.label_name FROM user_labels AS T1 INNER JOIN labels AS T2 ON T1.label_id = T2.label_id GROUP BY T1.label_name ORDER BY COUNT(T1.label_id) ASC LIMIT 3",
        "compiler_hint": "no such table: labels",
        "reflective_cot": "### Tip: \nWhen writing SQL queries, it's essential to carefully consider the relationships between tables and the specific columns being joined. In this case, the error occurred because the query was trying to join `labels` with `user_labels` (which doesn't exist) and then with `app_labels` without considering the correct relationships between the tables. Additionally, the query was grouping by `label_name` or `category` but not considering the actual count of users for each category. To avoid this mistake, take the time to thoroughly review the schema, understand the relationships between tables, and ensure that the query accurately reflects the desired outcome. In this case, the correct query simply joins `label_categories` with `app_labels` and orders by the count of `label_id` without grouping, as the goal is to find the categories with the lowest number of users.",
        "ground_truth_sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id ORDER BY T2.label_id LIMIT 3",
        "difficulty": ""
    },
    {
        "question": "Please list the business IDs of all the Yelp_Businesses that are good for kids.",
        "hint": "good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'\n",
        "error_sql": "SELECT T2.business_id FROM Attribute AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Good for Kids' AND T2.attribute_value = 'true'",
        "compiler_hint": "no such table: Attributes",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that all tables exist and are correctly referenced in the query. In this case, the error message 'no such table: Attribute' indicates that the table name is incorrect. The correct table name is 'Attributes'. Additionally, verify that the join conditions and where clause conditions are correct and necessary. In the Error SQL Query, the join with the 'Business' table (T3) is unnecessary and can be removed.",
        "ground_truth_sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Good for Kids' AND T2.attribute_value LIKE 'TRUE'",
        "difficulty": ""
    },
    {
        "question": "Name the suppliers that supply products under the category 'cheeses.'",
        "hint": "suppliers refers to CompanyName; 'cheeses' is a Description",
        "error_sql": "SELECT T2.CompanyName FROM ProductInformation AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Category AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.Description = 'Cheeses'",
        "compiler_hint": "no such table: Products",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the table order in the SQL query matches the logical order of the query. In this case, the query starts by selecting suppliers, so Suppliers should be the first table (T1) in the FROM clause. Additionally, use DISTINCT to avoid duplicate results when selecting non-unique columns like CompanyName.",
        "ground_truth_sql": "SELECT DISTINCT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.Description = 'Cheeses'",
        "difficulty": ""
    },
    {
        "question": "List out student names that enrolled in two schools and two organizations?",
        "hint": "enrolled in two schools refers to COUNT(school) = 2; two organizations refers to COUNT(organ) = 2;",
        "error_sql": "SELECT name FROM (SELECT name, school, organ FROM Enrollments) GROUP BY name HAVING COUNT(DISTINCT school) = 2 AND COUNT(DISTINCT organ) = 2",
        "compiler_hint": "no such table: Student",
        "reflective_cot": "### Tip:\nWhen dealing with complex queries involving multiple tables, ensure that you accurately identify the relationships between tables and use the correct join operations. In this case, the error was due to incorrect use of UNION ALL and GROUP BY, which did not accurately capture the relationships between Enrolled and Enlist tables. Instead, use INNER JOIN to combine the tables based on a common column (name) and then apply the GROUP BY and HAVING clauses to filter the results. Additionally, use COUNT(DISTINCT) to avoid counting duplicate values.",
        "ground_truth_sql": "SELECT T.name FROM ( SELECT T1.name, COUNT(T1.organ) AS num FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num = 2",
        "difficulty": ""
    },
    {
        "question": "Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers.",
        "hint": "average ratings of at least 4 refers to user_average_stars > = 4; no fans or followers refers to user_fans = 'None'; percentage = divide(count(user_id where user_average_stars > = 4 and user_fans = 'None'), sum(user_id where user_average_stars > = 4))*100%",
        "error_sql": "SELECT CAST(SUM(IIF(user_average_stars >= 4 AND user_fans = 'None', 1, 0)) AS REAL) * 100 / COUNT(user_id) FROM Review WHERE user_average_stars >= 4",
        "compiler_hint": "no such table: Users",
        "reflective_cot": "### Tip: \nWhen using conditional aggregation, it's essential to use the correct syntax. In this case, the initial query used `IIF` which is not a standard SQL function, whereas the correct syntax is `CASE WHEN` as shown in the Ground Truth SQL. Additionally, the condition `user_average_stars >= 4` should be applied in the `WHERE` clause, not within the `CASE` statement. To avoid similar mistakes, always verify the SQL dialect being used and ensure that the syntax is correct for that dialect.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN user_fans = 'None' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users WHERE user_average_stars >= 4",
        "difficulty": ""
    },
    {
        "question": "How many distinct movies in English stars a male actor who acts the best?",
        "hint": "Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English",
        "error_sql": "SELECT COUNT(DISTINCT T1.movie_id) FROM actor AS T1 INNER JOIN movie AS T2 ON T1.movie_id = T2.movie_id WHERE T1.a_gender = 'M' AND T2.isEnglish = 'T'",
        "compiler_hint": "no such table: acting",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column being counted is from the correct table. In this case, the question asks for the number of distinct movies, but the correct query should count the distinct actorid, not movieid, because the condition \"acts the best\" is related to the actor's quality, not the movie's quality. Additionally, verify the table and column names to avoid errors like \"no such table: actor\".",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.isEnglish = 'T' AND T1.a_gender = 'M' AND T1.a_quality = 5",
        "difficulty": ""
    },
    {
        "question": "How many times did Keven Kuhn receive DTaP immunization?",
        "hint": "DTaP immunization refers to immunizations where DESCRIPTION = 'DTaP';",
        "error_sql": "SELECT COUNT DESCRIPTION FROM immunization WHERE DESCRIPTION = 'DTaP' AND PAT_NAME = 'Keven Kuhn'",
        "compiler_hint": "no such table: immunizations",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column being counted is the one that is most relevant to the query's purpose. In this case, counting 'CODE' is more accurate than counting 'DESCRIPTION' because 'CODE' is likely to be unique for each immunization, whereas 'DESCRIPTION' might be the same for multiple immunizations. Additionally, verify the column names and table names to ensure they match the actual schema, and use the correct table alias in the COUNT function.",
        "ground_truth_sql": "SELECT COUNT(T2.CODE) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.DESCRIPTION = 'DTaP'",
        "difficulty": ""
    },
    {
        "question": "What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994?",
        "hint": "total amount of tax refers to sum(multiply(multiply(l_extendedprice, subtract(1, l_discount)), add(1, l_tax))); customer 88931 refers to o_custkey = 88931; on 7/13/1994 refers to o_orderdate = '1994-07-13'",
        "error_sql": "SELECT SUM(T1.l_extendedprice * (1 - T1.l_discount) * (1 + T1.l_tax)) FROM orders AS T2 INNER JOIN lineitem AS T1 ON T1.l_orderkey = T2.o_orderkey WHERE T2.o_custkey = 88931 AND T2.o_orderdate = '1994-07-13'",
        "compiler_hint": "no such table: lineitem",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column names used in the SELECT, WHERE, and JOIN clauses match the actual column names in the tables. In this case, the error occurred because the column 'l_extendedprice', 'l_discount', and 'l_tax' are from the 'lineitem' table, but in the Error SQL Query, they were referenced from the 'lineitem' table aliased as 'T1', which is incorrect. The correct alias for 'lineitem' is 'T2'. To avoid this mistake, double-check the table aliases and column names to ensure they match the actual table and column names.",
        "ground_truth_sql": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = 88931 AND T1.o_orderdate = '1994-07-13'",
        "difficulty": ""
    },
    {
        "question": "Provide the social security number of the patient with the highest systolic blood pressure.",
        "hint": "social security number refers to ssn; highest systolic blood pressure refers to MAX(observations.VALUE WHERE observations.DESCRIPTION = 'Systolic Blood Pressure');",
        "error_sql": "SELECT T1.ssn FROM patient AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T2.VALUE DESC LIMIT 1",
        "compiler_hint": "no such table: patients",
        "reflective_cot": "### Tip: \nWhen joining two tables, ensure that the column names used in the ON clause match the actual column names in the tables. In this case, the error occurred because the column name in the patients table is actually 'patient', not 'ssn' or any other name. Also, the alias 'T1' and 'T2' should be assigned based on the order of the tables in the FROM and JOIN clauses. In the error SQL query, 'T1' was assigned to 'patients' but in the correct query, 'T1' should be assigned to 'observations' because it is the first table in the FROM clause.",
        "ground_truth_sql": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count.",
        "hint": "category refers to category_name; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Active Life'), SUM(review_count = 'LOW')), 1.0);",
        "error_sql": "SELECT CAST(SUM(CASE WHEN category_name = 'Active Life' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN review_count = 'Low' THEN 1 ELSE 0 END) FROM Business AS T1 INNER JOIN Review AS T2 ON T1.business_id = T2.business_id",
        "compiler_hint": "no such table: Business",
        "reflective_cot": "### Tip:\n\nWhen generating SQL queries, ensure that you accurately interpret the question and understand the relationships between tables. In this case, the error was due to a misunderstanding of the question's requirements and incorrect table joins. To avoid this mistake, carefully read the question and identify the key elements, such as the tables involved, the conditions, and the desired output. Additionally, verify that the joins and conditions are correctly applied to produce the desired results. In this case, the question asked for the number of cities with businesses in the 'Active Life' category and the percentage of cities with a 'Low' review count, which required a more complex query with subqueries and accurate table joins.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id",
        "difficulty": ""
    },
    {
        "question": "Which two countries share the second highest mountain? Give the country code.",
        "hint": "",
        "error_sql": "SELECT T2.country_code FROM country_mountains AS T1 INNER JOIN countries AS T2 ON T1.country_code = T2.country_code INNER JOIN mountains AS T3 ON T1.mountain_id = T3.mountain_id GROUP BY T2.country_code ORDER BY T3.height DESC LIMIT 2 OFFSET 1",
        "compiler_hint": "no such table: mountains",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join conditions are correct and the tables being joined actually exist in the database. In this case, the error was due to a non-existent table 'country_mountains' and incorrect join conditions. To avoid this mistake, carefully review the database schema and ensure that the tables and columns being referenced actually exist and are correctly named. Additionally, verify that the join conditions are logical and correctly relate the tables being joined.",
        "ground_truth_sql": "SELECT T1.Code FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1, 1 )",
        "difficulty": ""
    },
    {
        "question": "Among the classic movies, how many movies have a rental rate of less than 1?",
        "hint": "classic movie refers to name = 'Classics'; rental rate of less than 1 refers to rental_rate < 1; movie refers to film_id",
        "error_sql": "SELECT COUNT(T1.film_id) FROM movies AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genres AS T3 ON T2.genre_id = T3.genre_id WHERE T3.name = 'Classics' AND T1.rental_rate < 1",
        "compiler_hint": "no such table: film",
        "reflective_cot": "### Tip: \nWhen joining multiple tables, ensure that the join order and the table aliases are correct. In this case, the error occurred because the join order was incorrect, and the table aliases were not properly assigned. To avoid this mistake, carefully analyze the relationships between the tables and ensure that the join order is logical and consistent with the query's requirements. Additionally, use meaningful table aliases to improve the readability of the query and reduce the likelihood of errors.",
        "ground_truth_sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate < 1 AND T2.name = 'Classics'",
        "difficulty": ""
    },
    {
        "question": "Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations?",
        "hint": "Georgia refer to school_state = 'GA'\n",
        "error_sql": "SELECT T1.payment_method FROM schools AS T1 INNER JOIN donations AS T2 ON T1.school_id = T2.school_id WHERE T1.school_state = 'GA' GROUP BY T1.payment_method ORDER BY COUNT(T1.payment_method) DESC LIMIT 1",
        "compiler_hint": "no such table: donations",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column used in the WHERE clause is from the correct table. In this case, the error occurred because the WHERE clause was filtering on T1.school_state instead of T2.school_state. Additionally, the GROUP BY clause should group by the column that is being filtered (T2.school_state), not the column being selected (T2.payment_method). Always double-check the table aliases and column references to avoid such mistakes.",
        "ground_truth_sql": "SELECT T1.payment_method FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_state = 'GA' GROUP BY T2.school_state ORDER BY COUNT(T1.payment_method) DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What ingredients does the longest cooking time recipe have?",
        "hint": "the longest cooking time refers to MAX(cook_min)",
        "error_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T2.ingredient_id = T3.ingredient_id WHERE T1.cook_min = ( SELECT MAX(cook_min) FROM Recipe )",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen trying to find the maximum or minimum value of a column and then joining it with other tables to get related data, consider using ORDER BY and LIMIT instead of using a subquery to find the maximum or minimum value. This is because the subquery will return the maximum or minimum value, but it will not guarantee that the joined data is from the same row as the maximum or minimum value. In this case, the subquery returns the maximum cooking time, but the joined data may not be from the recipe with the maximum cooking time. Using ORDER BY and LIMIT ensures that the joined data is from the same row as the maximum or minimum value.",
        "ground_truth_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Which supplier can provide the most number of \"hot spring dodger dim light\"? Please give the supplier's phone number.",
        "hint": "the most number refers to max(ps_availqty); \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone",
        "error_sql": "SELECT T2.s_phone FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T1.ps_availqty DESC LIMIT 1",
        "compiler_hint": "no such table: part",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that all necessary tables are included in the query. In this case, the initial error was due to missing the 'partsupp' table, which was corrected in the second attempt. However, it's crucial to understand the schema and relationships between tables to avoid such mistakes. Always verify the schema and ensure that the query includes all relevant tables to produce the correct results.",
        "ground_truth_sql": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "What is the name of the organization which most of the students are enlisted in?",
        "hint": "name of the organization refers to organ; organization which most of the students are enlisted in refers to MAX(COUNT(organ));",
        "error_sql": "SELECT organ FROM Enlistments GROUP BY organ ORDER BY COUNT(organ) DESC LIMIT 1",
        "compiler_hint": "no such table: enlist",
        "reflective_cot": "### Tip:\nWhen using aggregate functions like COUNT() in the ORDER BY clause, it's essential to use a subquery to calculate the count first, and then order the results based on that calculated count. This is because the ORDER BY clause is executed before the aggregate function is calculated, resulting in incorrect ordering. By using a subquery, you ensure that the count is calculated first, and then the results are ordered correctly.",
        "ground_truth_sql": "SELECT organ FROM ( SELECT organ, COUNT(organ) AS num FROM enlist GROUP BY organ ) T ORDER BY T.num DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Calculate the average net profit of bar tools which has ordered quantity exceed 5.",
        "hint": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bar Tools' and Order Quantity > 5;",
        "error_sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.`Unit Price`, 2), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T1.`Unit Cost`, 2), ',', '') AS REAL)) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T1._ProductID = T2.ProductID WHERE T2.`Product Name` = 'Bar Tools' AND T1.`Order Quantity` > 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the average of a value, make sure to use the SUM function to add up all the values and then divide by the COUNT of rows, rather than using the AVG function directly on the calculated values. This is because AVG function may not work correctly with calculated values, especially when the values are not numeric. Additionally, be careful when using string manipulation functions like REPLACE, SUBSTR, and CAST, as they can be error-prone and may not work as expected. Always test your queries thoroughly to ensure they produce the correct results.",
        "ground_truth_sql": "SELECT SUM(REPLACE(T1.`Unit Price`, ',', '') - REPLACE(T1.`Unit Cost`, ',', '')) / COUNT(T1.OrderNumber) FROM `Sales Orders` AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.`Product Name` = 'Bar Tools' AND T1.`Order Quantity` > 5",
        "difficulty": ""
    },
    {
        "question": "How much taller is David Bornhammar than Pauli Levokari in centimeters?",
        "hint": "how much taller = SUBTRACT(SUM(height_in_cm WHERE PlayerName = 'David Bornhammar'), SUM(height_in_cm WHERE PlayerName = 'Pauli Levokari')); height in centimeters refers to height_in_cm;",
        "error_sql": "SELECT (SUM(CASE WHEN PlayerName = 'David Bornhammar' THEN height_in_cm ELSE 0 END) - SUM(CASE WHEN PlayerName = 'Pauli Levokari' THEN height_in_cm ELSE 0 END)) FROM player",
        "compiler_hint": "no such table: players",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that you accurately identify the tables involved and their relationships. In this case, the error was due to not joining the correct tables (`PlayerInfo` and `height_info`) and not using the correct column names. To avoid this mistake, carefully review the schema and column descriptions before generating the query. Additionally, consider breaking down complex queries into simpler sub-queries, as seen in the Ground Truth SQL, to improve readability and accuracy.",
        "ground_truth_sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )",
        "difficulty": ""
    },
    {
        "question": "Among the menu pages on which the dish \"Paysanne Soup\" had appeared, how many of them had a stable price for the dish?",
        "hint": "Paysanne Soup is a name of dish; stable price refers to highest_price is null;",
        "error_sql": "SELECT COUNT(T2.menu_page_id) FROM dishes AS T1 INNER JOIN menu_items AS T2 ON T1.dish_id = T2.dish_id WHERE T1.name = 'Paysanne Soup' AND T2.highest_price IS NULL",
        "compiler_hint": "no such table: menu_pages",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the column names and table names match the actual schema. In this case, the error was due to incorrect table and column names. The correct table names are 'Dish' and 'MenuItem', and the correct column name for the highest price is in the 'Dish' table, not the 'MenuItem' table. Additionally, the COUNT function is not suitable for this query as it counts the number of rows, whereas the SUM function with a CASE statement is needed to count the number of menu pages where the dish 'Paysanne Soup' has a stable price.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.name = 'Paysanne Soup' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL",
        "difficulty": ""
    },
    {
        "question": "Calculate the average number of disabled female students enrolled in UCI.",
        "hint": "average = DIVIDE(SUM(disabled.name who are not in male.name WHERE school = 'uci'), COUNT(enrolled.name)); female students refers to disabled.name who are NOT in male.name; UCI refers to school = 'uci';",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.name NOT IN (SELECT name FROM male) THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.name) FROM Enrollments AS T1 INNER JOIN Disabled AS T2 ON T1.name = T2.name WHERE T1.school = 'uci'",
        "compiler_hint": "no such table: enrolled",
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that the join conditions are correct and consider all relevant tables that may affect the result. In this case, the `person` table was missing, which contains the gender information, and a `LEFT JOIN` with the `male` table was necessary to correctly identify female students. Additionally, the `IIF` function is more suitable for this scenario than `CASE WHEN` because it allows for more complex conditions.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T1.school = 'uci' AND T4.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN person AS T3 ON T1.name = T3.name LEFT JOIN male AS T4 ON T3.name = T4.name",
        "difficulty": ""
    },
    {
        "question": "List down the author ID of authors with a name of \"Peter\".",
        "hint": "\"Peter\" is the name of author",
        "error_sql": "SELECT Id FROM Author WHERE Name = 'Peter'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying a database, it's essential to consider the relationships between tables and the specific table that contains the desired information. In this case, the `Author` table contains the author's name, but the `PaperAuthor` table contains the author's ID in relation to a specific paper. However, the `PaperAuthor` table also contains the author's name, which is not necessarily the same as the author's name in the `Author` table. To get the correct author ID, we should query the `Author` table directly, not the `PaperAuthor` table. The correct query should be `SELECT Id FROM Author WHERE Name = 'Peter'`. The mistake was made by querying the `PaperAuthor` table instead of the `Author` table. To avoid this mistake in the future, always carefully consider the relationships between tables and the specific table that contains the desired information.",
        "ground_truth_sql": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'",
        "difficulty": ""
    },
    {
        "question": "State the name of menu with the longest full height.",
        "hint": "longest full height refers to MAX(full_height);",
        "error_sql": "SELECT T1.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.menu_page_id ORDER BY T2.full_height DESC LIMIT 1",
        "compiler_hint": "no such table: menu",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that you accurately identify the relevant tables and their relationships. In this case, the error occurred because the initial query referenced a non-existent table 'menu' and the second query, although referencing the correct tables, did not accurately represent the relationship between 'MenuPage' and 'Menu'. To avoid this mistake, carefully review the schema to identify the correct tables and their relationships, and ensure that the query accurately reflects these relationships.",
        "ground_truth_sql": "SELECT T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T1.full_height DESC LIMIT 1",
        "difficulty": ""
    },
    {
        "question": "Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively.",
        "hint": "viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));",
        "error_sql": "SELECT T1.gender, COUNT(T1.gender) FROM patient AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)' GROUP BY T1.gender",
        "compiler_hint": "no such table: patients",
        "reflective_cot": "### Tip:\nWhen joining tables, ensure that the column names used in the ON clause match exactly with the column names in the respective tables. In this case, the error message \"no such table: patient\" indicates that the column name in the patients table is not \"patient\" but rather something else (likely \"PATIENT_ID\" or similar). Additionally, when counting occurrences of specific values, consider using SUM with CASE statements instead of COUNT with GROUP BY to get the desired results.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "difficulty": ""
    },
    {
        "question": "Which flight carrier operator flies from Atlantic City to Fort Lauderdale?",
        "hint": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; from Atlantic City refers to ORIGIN = 'ACY'; to Fort Lauderdale refers to DEST = 'FLL';",
        "error_sql": "SELECT OP_CARRIER_AIRLINE_ID FROM ontime WHERE ORIGIN = 'ACY' AND DEST = 'FLL'",
        "compiler_hint": "no such table: flights",
        "reflective_cot": "### Tip: \nWhen joining tables, ensure that the join condition is correct and that the columns used in the WHERE clause are from the correct table. Additionally, consider the need for aggregation (e.g., GROUP BY) when retrieving data from multiple tables, especially if the query is expected to return a single value or a distinct set of values. In this case, the initial query was incorrect because it did not join the Airlines table with the Air Carriers table, and the second query was incorrect because it did not include the GROUP BY clause to ensure that only distinct carrier descriptions were returned.",
        "ground_truth_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN `Air Carriers` AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.ORIGIN = 'ACY' AND T1.DEST = 'FLL' GROUP BY T2.Description",
        "difficulty": ""
    },
    {
        "question": "What is the first name of the driver who transported shipment id 1028?",
        "hint": "shipment id 1028 refers to ship_id = 1028",
        "error_sql": "SELECT T1.first_name FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id WHERE T2.ship_id = 1028",
        "compiler_hint": null,
        "reflective_cot": "### Tip: \nWhen joining two tables and selecting columns, ensure that the table alias used in the SELECT statement matches the table alias used in the JOIN clause. In this case, the error occurred because the SELECT statement used T1 for the driver table, but the JOIN clause used T2 for the driver table. To avoid this mistake, double-check that the table aliases are consistent throughout the query. Additionally, when selecting columns, consider selecting all relevant columns (e.g., first_name and last_name) to provide more complete information.",
        "ground_truth_sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = 1028",
        "difficulty": ""
    },
    {
        "question": "How many awards had been held in 2009?",
        "hint": "had been held in 2009 refers to year = 2009",
        "error_sql": "SELECT COUNT(*) FROM award WHERE year = 2009",
        "compiler_hint": "no such table: awards",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema exactly, including case sensitivity. In this case, the correct table name is 'Award' (with a capital 'A'), not 'awards'. Additionally, verify the data type of the columns to use the correct functions, such as SUBSTR for string data types.",
        "ground_truth_sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009';",
        "difficulty": ""
    },
    {
        "question": "How many trains are running west?",
        "hint": "west is a direction",
        "error_sql": "SELECT COUNT(*) FROM train_direction AS T1 INNER JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.direction = 'west'",
        "compiler_hint": "no such table: train",
        "reflective_cot": "### Tip: \nAlways verify the table and column names in the database schema before generating SQL queries. In this case, the correct table name is 'trains' (plural) instead of 'train', and the correct column name is 'direction' which exists in the 'trains' table.",
        "ground_truth_sql": "SELECT COUNT(id) FROM trains WHERE direction = 'west'",
        "difficulty": ""
    },
    {
        "question": "What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times?",
        "hint": "release title refers to groupName; Ron Hunt is an artist; groupYear = 1979; releaseType = 'single'; downloaded 239 times refer to totalSnatched = 239;",
        "error_sql": "SELECT T1.groupName FROM artists AS T1 INNER JOIN releases AS T2 ON T1.artist_id = T2.artist_id WHERE T1.artistName = 'Ron Hunt' AND T2.groupYear = 1979 AND T2.releaseType = 'single' AND T2.totalSnatched = 239",
        "compiler_hint": "no such table: groups",
        "reflective_cot": "### Tip: \nWhen generating SQL queries, ensure that the table and column names match the actual schema. In this case, the error occurred because the table 'artists' did not exist, and the correct table was 'torrents'. Additionally, the 'artist' column in the 'torrents' table contains the full artist name, not just the individual artist's name. To avoid this mistake, carefully review the schema and ensure that the query accurately reflects the table and column names, as well as the data they contain.",
        "ground_truth_sql": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239",
        "difficulty": ""
    },
    {
        "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "hint": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "error_sql": "SELECT MAX(`Percent (%) Eligible Free (K-12)`) FROM frpm WHERE `County Name` = 'Alameda County'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating ratios (like eligible free rates), ensure to specify the correct SQL functions and ordering to retrieve the desired maximum value from the calculated results. Use `CAST` when dividing integer fields to avoid integer division, and consider ordering results properly if aiming to find a maximum value based on a derived calculation. Always verify that the aggregation and filtering logic aligns with your intended outcome.",
        "ground_truth_sql": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "hint": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `District Type` = 'Continuation' ORDER BY (CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)`) ASC LIMIT 3",
        "compiler_hint": "no such column: Enrollment (Ages 5-17",
        "reflective_cot": "### Tip:\nAlways verify the correct column names and their corresponding values in your SQL queries, especially when referencing them in calculations or conditions. Additionally, ensure that the filtering criteria match the correct terminology used in the database (e.g., `Educational Option Type` instead of `District Type`). Review the schema before constructing queries to avoid errors related to column names and possible null values.",
        "ground_truth_sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
        "difficulty": "moderate"
    },
    {
        "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
        "hint": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
        "error_sql": "SELECT Zip FROM schools WHERE County = 'Fresno County Office of Education' AND Charter = 1;",
        "compiler_hint": "no such column: Charter School (Y/N)",
        "reflective_cot": "### Tip:\nAlways ensure that you understand the structure of your database and the relationships between tables before writing your SQL queries. Pay special attention to the columns and their respective tables when filtering conditions. Use descriptions and aliasing to clarify which columns belong to which tables when performing joins. A good practice is to test individual components of your query (like the join conditions) to verify they produce expected results before combining them into a final query.",
        "ground_truth_sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
        "difficulty": "simple"
    },
    {
        "question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
        "hint": "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm",
        "error_sql": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, it's crucial to carefully analyze the requirements, including all necessary conditions and filters specified in the question. Ensure that you pay attention to any specific attributes that differentiate subsets of data, such as \"Charter Funding Type\" in this case. Double-check the table structures and descriptions to confirm the correct fields and conditions are used in the query to avoid missing key criteria that could lead to incorrect results.",
        "ground_truth_sql": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
        "hint": "Magnet schools or offer a magnet program means that Magnet = 1",
        "error_sql": "SELECT s.School, s.County \nFROM schools AS s \nINNER JOIN satscores AS st ON s.CDSCode = st.cds \nWHERE st.NumTstTakr > 500 AND s.Magnet = 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the JOIN conditions and the order of table references in your SQL statements. The primary table should often be the one containing the condition that you're filtering on, and ensure the WHERE clause correctly reflects the intended logic to avoid confusion. In this case, using alias names appropriately within the WHERE clause can prevent misalignment between table joins.",
        "ground_truth_sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500",
        "difficulty": "simple"
    },
    {
        "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
        "hint": "",
        "error_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE AvgScrMath > 1500);",
        "compiler_hint": "no such column: T3.Phone",
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting from the correct tables and fields. In your initial query, you attempted to reference T3.Phone, but T3 was a derived table that only contained `cds` and `NumTstTakr` and did not include the `Phone` field. When using subqueries or derived tables, ensure that the necessary columns for the final output are included. Additionally, double-check the filtering conditions to capture the desired data accurately, especially when using aggregate functions or specific conditions.",
        "ground_truth_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which active district has the highest average score in Reading?",
        "hint": "",
        "error_sql": "SELECT T2.District FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.StatusType = 'Active' GROUP BY T2.District ORDER BY AVG(T1.AvgScrRead) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen forming SQL queries, ensure that you group by the correct table and fields that correlate with your aggregate functions. Always check that you're referencing the correct columns from the tables involved, especially when using joins. Additionally, prioritize which table to group or order by based on the data you intend to analyze; in this case, projecting the averages should start with the table that contains the scores.",
        "ground_truth_sql": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "How many schools in merged Alameda have number of test takers less than 100?",
        "hint": "",
        "error_sql": "SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alameda' AND T2.NumTstTakr < 100;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to include all necessary conditions specified in the prompt or requirements, such as specific keywords like 'Merged' or corrections for the correct county. Double-check your conditions in the WHERE clause to ensure they align closely with the requirements (in this case, 'Merged' for StatusType and the correct county). This helps avoid logical oversights and ensures you capture the relevant data accurately.",
        "ground_truth_sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'",
        "difficulty": "simple"
    },
    {
        "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
        "hint": "Valid charter number means the number is not null",
        "error_sql": "SELECT T2.CharterNum, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite > 499 AND T2.CharterNum IS NOT NULL ORDER BY T1.AvgScrWrite DESC;",
        "compiler_hint": "no such column: T1.NCESSchool",
        "reflective_cot": "### Tip:\nAlways ensure you are selecting the correct columns from the appropriate tables in your SQL queries. Specifically, when joining tables, make sure columns referenced exist in the corresponding tables. Utilize table aliases consistently and check for their correct prefixes. When using functions like `RANK()`, ensure all necessary fields are included in the selection.",
        "ground_truth_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
        "difficulty": "simple"
    },
    {
        "question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
        "hint": "",
        "error_sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Directly Funded' AND T2.NumTstTakr <= 250 AND T1.City = 'Fresno'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify that you are using the correct tables and fields relevant to the specific conditions of your query. In this case, the correct table for the funding type was `frpm`, not `schools`, and the criteria should reference `County Name` instead of the `City`. Double-check joins, relevant filters, and ensure you\u2019re referencing the right attributes that align with your query objectives.",
        "ground_truth_sql": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250",
        "difficulty": "simple"
    },
    {
        "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
        "hint": "",
        "error_sql": "SELECT COUNT(CDSCode) FROM schools WHERE County = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'",
        "compiler_hint": "no such column: Low Grade",
        "reflective_cot": "### Tip:\nAlways ensure you're referencing the correct table for each column used in your query. In this case, `Low Grade` and `High Grade` are columns in the `frpm` table, not the `schools` table. Utilize explicit joins to access columns from different tables or consider using table aliases for clarity. Always double-check the schema to confirm the correct table and column names.",
        "ground_truth_sql": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
        "difficulty": "simple"
    },
    {
        "question": "Which school in Contra Costa has the highest number of test takers?",
        "hint": "",
        "error_sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are using the correct fields for filtering and ordering in your query. In this case, check that you are retrieving the correct attribute for the county (like `County Name` vs. `County`) and use the appropriate column for ordering results (like `sname` for the school name). Always verify field names and values in the specified tables to avoid referencing errors.",
        "ground_truth_sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
        "hint": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT T1.`School Name`, T2.`Street`, T2.`StreetAbr`, T2.`City`, T2.`State`, T2.`Zip` \nFROM frpm AS T1 \nINNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode \nWHERE ABS(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30;",
        "compiler_hint": "no such column: Street",
        "reflective_cot": "### Tip:\nAlways ensure you are referencing the correct table and its columns in your SELECT statement, especially when joining multiple tables. Double-check the column names from both tables before writing your query to avoid errors related to non-existent columns. Use aliases (e.g., T1, T2) consistently to clarify the source of each column, which can help prevent confusion.",
        "ground_truth_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
        "difficulty": "moderate"
    },
    {
        "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
        "hint": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)",
        "error_sql": "SELECT S.School, S.Phone FROM frpm AS F INNER JOIN satscores AS T ON F.CDSCode = T.cds INNER JOIN schools AS S ON F.CDSCode = S.CDSCode WHERE (F.`Free Meal Count (K-12)` / F.`Enrollment (K-12)`) > 0.1 AND T.NumGE1500 >= 1;",
        "compiler_hint": "no such column: T1.School",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, ensure you have the correct columns from the appropriate tables. Double-check that the column names used in your SELECT and WHERE clauses exist in the specified tables. Additionally, be aware of how you're joining tables to ensure you're referencing values correctly. To avoid errors, always verify the schema before writing queries and test smaller parts if possible to ensure accuracy.",
        "ground_truth_sql": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
        "difficulty": "moderate"
    },
    {
        "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
        "hint": "Average of average math = sum(average math scores) / count(schools).",
        "error_sql": "SELECT T1.`FundingType` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Riverside' GROUP BY T1.CDSCode HAVING SUM(T2.AvgScrMath) / COUNT(T1.CDSCode) > 400",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nCarefully analyze the requirements of the query, particularly the aggregation logic needed to compute averages correctly. Ensure that you're using the right metrics for grouping, averaging, and filtering, and confirm that you're referencing the correct tables and their relationships. Additionally, remember the importance of the logical flow: if you're calculating an average, always consider if you should use `AVG()` over `SUM() / COUNT()` to simplify your query and improve readability.",
        "ground_truth_sql": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
        "difficulty": "moderate"
    },
    {
        "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "hint": "Full communication address should include Street, City, State and zip code if any.",
        "error_sql": "SELECT T1.School, T1.Street, T1.City, T1.State, T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Educational Option Type` = 'High School' AND T2.`Free Meal Count (Ages 5-17)` > 800 AND T2.`County Name` = 'Monterey'",
        "compiler_hint": "no such column: T2.Free Meal Count (Ages 15-17)",
        "reflective_cot": "### Tip:\nAlways verify column names and their data types by checking the schema carefully before constructing your SQL queries. Pay special attention to spelling, capitalization, and the presence of any special characters in the column names to avoid referencing non-existent columns. Additionally, ensure that you are joining the correct tables and using the right conditions based on the attributes available in the relevant tables.",
        "ground_truth_sql": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
        "hint": "Communication number refers to phone number.",
        "error_sql": "SELECT T2.sname, AVG(T2.AvgScrWrite) AS AvgScrWrite, T1.Phone \nFROM schools AS T1 \nINNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds \nWHERE T1.OpenDate > '1991-01-01' OR T1.ClosedDate < '2000-01-01' \nGROUP BY T2.sname, T1.Phone;",
        "compiler_hint": "no such column: T1.sname",
        "reflective_cot": "### Tip:\nAlways verify the correct table and column names before writing your SQL query. Use consistent naming conventions and ensure you understand the context of each table to avoid referencing non-existent columns. Additionally, when using joins, confirm that the columns you intend to select or group by exist in the correct respective tables.",
        "ground_truth_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
        "difficulty": "moderate"
    },
    {
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "hint": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "error_sql": "SELECT T1.`School`, T1.`DOCType` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`District Type` = 'Locally Funded' AND (T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > (SELECT AVG(T2_sub.`Enrollment (K-12)` - T2_sub.`Enrollment (Ages 5-17)`) FROM frpm AS T2_sub WHERE T2_sub.`District Type` = 'Locally Funded')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the conditions you apply in your WHERE clause are consistent with the table structures and the data you intend to analyze. Specifically, double-check that you're referencing the correct columns and table names, particularly when using aliases. Ensuring that you use the correct JOIN conditions and relevant identifiers from the appropriate tables is crucial for accurate filtering and computation of aggregate functions. Additionally, pay attention to the data type and naming conventions in your SQL queries to avoid mismatches or errors.",
        "ground_truth_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "difficulty": "challenging"
    },
    {
        "question": "When did the first-through-twelfth-grade school with the largest enrollment open?",
        "hint": "K-12 means First-through-twelfth-grade",
        "error_sql": "SELECT MIN(OpenDate) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Low Grade` = '1' AND T2.`High Grade` = '12' AND T2.`Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm WHERE `Low Grade` = '1' AND `High Grade` = '12')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific records based on aggregate functions (like MAX), ensure you are correctly accessing the desired fields and ordering the results appropriately. Use `ORDER BY` to directly sort and retrieve the highest values, rather than relying on nested subqueries if not necessary. Always double-check that you are joining the correct tables and referencing the related fields properly.",
        "ground_truth_sql": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
        "hint": "K-12 refers to students in grades 1 through 12.",
        "error_sql": "SELECT T2.City, T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you understand the requirements of the query. In this case, the goal was to identify cities with the lowest total enrollment for grades 1 through 12, not just individual enrollments from the `frpm` table. Group the results by city to sum the enrollments and accurately reflect total enrollment numbers for each city, rather than filtering based on individual school grade levels. Use aggregation functions like `SUM()` along with `GROUP BY` for such queries.",
        "ground_truth_sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
        "hint": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
        "error_sql": "SELECT `FRPM Count (K-12)` / `Enrollment (K-12)` AS EligibleRate FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE `Ownership Code` = 66) AND `Enrollment (K-12)` > 0 ORDER BY `FRPM Count (K-12)` DESC LIMIT 5;",
        "compiler_hint": "no such column: Ownership Code",
        "reflective_cot": "### Tip:\nAlways verify that you are referencing the correct column names and logic within your queries. In this case, the initial error arose from using a non-existent column \"`Ownership Code`\" instead of the correct column \"`SOC`\". To avoid such mistakes, double-check your table schemas before crafting your SQL queries and consider testing your subqueries separately to ensure they return the expected results.",
        "ground_truth_sql": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
        "hint": "",
        "error_sql": "SELECT T1.`School Name`, T2.`Website` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways check for NULL values in the columns you are selecting or filtering by, particularly when retrieving data from multiple tables. Include conditions to exclude NULLs in your WHERE clause where relevant, ensuring you receive meaningful output.",
        "ground_truth_sql": "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
        "hint": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500",
        "error_sql": "SELECT T1.AdmFName1, T1.AdmLName1 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to consider how you join tables to access the appropriate columns required for your query. In this case, the first query only retrieved a single administrator's name, ignoring the possibility of multiple administrators. Additionally, aggregate functions like `MAX` should be used carefully, ensuring that subsequent queries can access all necessary details that relate back to your initial aggregate computation. Whenever dealing with potential multiple records, using ordering or limiting techniques to get the top record should be combined with a suitable join to retrieve associated details comprehensively.",
        "ground_truth_sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
        "hint": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
        "error_sql": "SELECT T1.Street, T1.City, T1.Zip, T1.State \nFROM satscores AS T2 \nINNER JOIN schools AS T1 ON T2.cds = T1.CDSCode \nORDER BY (T2.NumGE1500 * 1.0 / T2.NumTstTakr) ASC \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the columns involved in calculations or comparisons are explicitly cast to the appropriate data type to avoid integer division issues and to ensure correct results. When dealing with potential divisions, especially those involving integers, converting at least one operand to a floating-point type can prevent losing precision in calculations.",
        "ground_truth_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
        "hint": "Fresno Unified is a name of district;",
        "error_sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Fresno Unified' ORDER BY T2.AvgScrRead ASC LIMIT 1",
        "compiler_hint": "no such column: T2.Phone",
        "reflective_cot": "### Tip:\nAlways ensure you reference the correct table and column names in your SQL query, especially when using aliases. Double-check the structure of your tables to confirm where each column is located, and pay careful attention to the join conditions to avoid mixing up the columns from different tables.",
        "ground_truth_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
        "hint": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
        "error_sql": "SELECT School, County FROM (\n    SELECT T1.School, T1.County, RANK() OVER (PARTITION BY T1.County ORDER BY T2.AvgScrRead DESC) AS Rank\n    FROM schools AS T1 \n    INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds \n    WHERE T1.Virtual = 'F'\n) AS RankedSchools WHERE Rank <= 5",
        "compiler_hint": "misuse of window function RANK()",
        "reflective_cot": "### Tip:\nWhen using window functions like RANK() in SQL, ensure that they are included in the SELECT statement directly within a subquery or derived table. Avoid placing them directly in the WHERE clause of a main query. Additionally, always be cautious to reference the correct columns from the appropriate tables to prevent any mismatches or logic errors in join conditions.",
        "ground_truth_sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
        "difficulty": "simple"
    },
    {
        "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
        "hint": "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite",
        "error_sql": "SELECT T2.County, (T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite) / 3 AS AvgScore FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL AND T1.AvgScrRead IS NOT NULL AND T1.AvgScrWrite IS NOT NULL ORDER BY (T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite) ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting the correct metrics when ordering results. In the initial query, the calculation for the average score was divided by 3, but the Ground Truth SQL does not divide the sum, as the order should only be based on the summed score of all subjects for finding the lowest average. Additionally, ensure that all necessary components are included when filtering and ordering, especially when calculating averages or totals from multiple fields.",
        "ground_truth_sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
        "hint": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
        "error_sql": "SELECT T2.School, SUM(T1.`Enrollment (K-12)`) AS TotalEnrollment \nFROM frpm AS T1 \nINNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode \nWHERE T2.DOC = 31 \nGROUP BY T2.School \nORDER BY TotalEnrollment DESC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for a specific condition, ensure that your selection criteria align with the aggregation logic. If you want to filter and sort based on a specific column after aggregation, use that column in the correct context (e.g., in the `ORDER BY` clause) after ensuring the correct logical flow of data retrieval. Always double-check the need for groupings and ensure that aggregates are applied only after filtering.",
        "ground_truth_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
        "hint": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
        "error_sql": "SELECT COUNT(T1.CDSCode) / 12 FROM schools AS T1 WHERE T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND T1.DOC = '52' AND T1.County = 'Alameda';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the date functions you use in your SQL queries are appropriate for the SQL dialect being used. In this case, using `strftime` to extract the year from the date is more reliable than comparing against a date range. Additionally, when performing division, explicitly casting the numerator to a floating-point type will ensure that you get a decimal result instead of an integer division.",
        "ground_truth_sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
        "difficulty": "moderate"
    },
    {
        "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
        "hint": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "error_sql": "SELECT T2.County, T2.School, T2.ClosedDate \nFROM schools AS T2 \nWHERE T2.StatusType = 'Closed' \nGROUP BY T2.County \nORDER BY COUNT(T2.School) DESC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that when using `GROUP BY`, you include only the necessary columns for aggregation while excluding non-aggregated columns unless they are in the `GROUP BY` clause. This prevents incorrect grouping and ensures that you remain compliant with SQL's aggregate functions. Additionally, consider using subqueries or common table expressions (CTEs) for more complex aggregations where you need to filter data first based on the results of an aggregation.",
        "ground_truth_sql": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
        "hint": "Postal street and mailing street are synonyms.",
        "error_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are using the correct column names that accurately represent what you need. In your case, \"Postal Street Address\" corresponds to `MailStreet`, not `Street`. Double-checking column names and understanding their definitions in the context of your query will help avoid similar mistakes in the future.",
        "ground_truth_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
        "difficulty": "simple"
    },
    {
        "question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
        "hint": "",
        "error_sql": "SELECT SUM(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are referencing the correct columns from the appropriate tables in your SQL queries. In the first two attempts, there was a confusion regarding the selection of columns and aggregation. When summing values, make sure to use the correct column from the relevant table, and confirm the join conditions to ensure data integrity across the joined tables. Checking for `NULL` values appropriately can help avoid errors in your aggregation results.",
        "ground_truth_sql": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
        "difficulty": "simple"
    },
    {
        "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
        "hint": "",
        "error_sql": "SELECT T1.School, T1.MailZip FROM schools AS T1 WHERE T1.AdmFName1 = 'Avetik' AND T1.AdmLName1 = 'Atoian' OR T1.AdmFName2 = 'Avetik' AND T1.AdmLName2 = 'Atoian' OR T1.AdmFName3 = 'Avetik' AND T1.AdmLName3 = 'Atoian'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways encapsulate conditions involving multiple logical expressions with parentheses to ensure proper order of evaluation. This helps avoid unintended precedence issues that may lead to incorrect results in SQL queries. For example, if you have an `AND` condition mixed with `OR`, group them logically to maintain clarity and correctness.",
        "ground_truth_sql": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "difficulty": "simple"
    },
    {
        "question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
        "hint": "",
        "error_sql": "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to consistently follow the order of the columns as specified in your SQL queries. The SQL standard favors listing the target columns in a meaningful order, which typically means the more relevant identifiers (like `School`) should appear towards the end in the SELECT clause for readability. Always cross-check against the specified schema to confirm consistency in column arrangement and table relationships.",
        "ground_truth_sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
        "difficulty": "simple"
    },
    {
        "question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
        "hint": "Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name",
        "error_sql": "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3, School, City \nFROM schools \nWHERE Charter = 1 AND CharterNum = '00D2';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for multiple columns that represent similarly categorized data (like administrator names), it's important to prioritize clarity and relevance in your selection. Always evaluate the requirements of your task and ensure that the result set includes only the necessary fields, avoiding redundant or irrelevant data. In this case, focusing on the required administrators rather than including all columns at once would yield a more efficient and clear result.",
        "ground_truth_sql": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
        "difficulty": "simple"
    },
    {
        "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
        "hint": "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%",
        "error_sql": "SELECT (CAST(COUNT(CASE WHEN `Charter Funding Type` = 'Locally funded' THEN 1 END) AS REAL) / COUNT(*) * 100) AS percentage_ratio \nFROM frpm \nWHERE `County Name` = 'Santa Clara'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you are referencing the correct table and column names for the data you intend to analyze. In this case, the correct source was the `schools` table, not `frpm`. Additionally, explicitly define conditions in your aggregate functions to avoid confusion, and always double-check the logic of your queries to align with the intended calculations.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
        "difficulty": "moderate"
    },
    {
        "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
        "hint": "Directly funded schools refers to FundingType = 'Directly Funded'",
        "error_sql": "SELECT COUNT(School) FROM schools WHERE FundingType = 'Directly Funded' AND County = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to use consistent casing for string comparisons, especially in SQL. Additionally, when dealing with date comparisons, consider using functions like `strftime()` to avoid issues with date formats and inclusivity, particularly when dealing with a range that includes the start and end date.",
        "ground_truth_sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
        "difficulty": "simple"
    },
    {
        "question": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?",
        "hint": "Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989",
        "error_sql": "SELECT County, COUNT(*) as ClosureCount FROM schools WHERE SOC = 11 AND strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you match the data types correctly in your SQL queries. For example, when comparing values (like `SOC`), make sure to use the correct format (string vs. integer). Additionally, pay close attention to SQL syntax, especially the placement of conditions and functions, as they can significantly affect the logic of the query. Using `COUNT(School)` rather than `COUNT(*)` can also help clarify what is being counted, ensuring only relevant rows are included in the results.",
        "ground_truth_sql": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many active and closed District Community Day Schools are there in the county of Alpine?",
        "hint": "",
        "error_sql": "SELECT COUNT(DISTINCT District) AS Active_Districts, \n       SUM(CASE WHEN StatusType = 'Closed' THEN 1 ELSE 0 END) AS Closed_Districts \nFROM schools \nWHERE County = 'Alpine' \nAND DOC = 'Community Day School' \nGROUP BY StatusType;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying a database, ensure that you are using the correct conditions for your filters and aggregations. Specifically, confirm whether you're grouping data appropriately based on unique identifiers and the intended results. In this case, specifying the proper `DOC` type for \"District Community Day School\" and ensuring that you check the `SOC` value related to these schools would provide more accurate results. Always review the table schema and required conditions carefully to align your query with the data model.",
        "ground_truth_sql": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'",
        "difficulty": "simple"
    },
    {
        "question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
        "hint": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.",
        "error_sql": "SELECT T1.`District Code` FROM schools AS T1 WHERE T1.City = 'Fresno' AND T1.Magnet = 0 LIMIT 1",
        "compiler_hint": "no such column: T1.District Code",
        "reflective_cot": "### Tip:\nAlways ensure that you are joining relevant tables when querying data that requires columns from multiple tables. Check the relationships and foreign keys between tables to avoid errors related to non-existent columns in the specified context. In this case, the `District Code` was found in the `frpm` table, which needed to be joined with the `schools` table based on the common `CDSCode`.",
        "ground_truth_sql": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0",
        "difficulty": "simple"
    },
    {
        "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
        "hint": "State Special School means EdOpsCode = 'SSS'",
        "error_sql": "SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T1.`Academic Year` = '2014-2015' AND T2.City = 'Fremont'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering for specific date ranges, ensure that you are using the correct logic for the year. Use methods like `BETWEEN` for including all relevant records across the specified years. Always confirm the data types and constraints of the columns involved to ensure the query logic aligns with the database structure.",
        "ground_truth_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
        "difficulty": "moderate"
    },
    {
        "question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?",
        "hint": "",
        "error_sql": "SELECT `Free Meal Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOC = 'Youth Authority School'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the specific column names and criteria in the database schema you're working with, paying particular attention to the correct terms used for classifications and types, such as `SOC` or `SOCType`, to avoid using incorrect or ambiguous criteria that may lead to inaccurate results.",
        "ground_truth_sql": "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'",
        "difficulty": "simple"
    },
    {
        "question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.",
        "hint": "",
        "error_sql": "SELECT T1.`Educational Option Type`, T1.`School Name` FROM frpm AS T1 WHERE T1.`NSLP Provision Status` = '2' AND T1.`County Code` = '37'",
        "compiler_hint": "no such column: T2.Educational Option Type",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, always double-check the column names in the tables you are querying. If you encounter an error stating that a column does not exist, verify the exact name and ensure you are referencing the correct table. Reading SQL schema carefully can help avoid misnaming columns, particularly if they are similar in different tables. Additionally, ensure you match comparator values correctly with the expected type (e.g., string vs number).",
        "ground_truth_sql": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37",
        "difficulty": "simple"
    },
    {
        "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
        "hint": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
        "error_sql": "SELECT T1.`School Name`, (T1.`FRPM Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) * 100 AS `Percent (%) Eligible FRPM (Ages 5-17` \nFROM frpm AS T1 \nINNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode \nWHERE T2.County = 'Los Angeles' AND T2.GSserved LIKE '%K-9%'",
        "compiler_hint": "no such column: T2.Low Grade",
        "reflective_cot": "### Tip:\nAlways double-check the column names in your SQL queries against the provided schema. Ensure that you fully understand the structure of the tables and the data types, and pay attention to valid value formats (e.g., string representations of grade spans). If you're unsure about column names or their types, consider using a descriptive query to first explore the table structure. This can help avoid referencing non-existent columns in your queries.",
        "ground_truth_sql": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the most common type of grade span served in the city of Adelanto?",
        "hint": "",
        "error_sql": "SELECT GSserved, COUNT(*) as Count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY Count DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using aggregate functions like `COUNT()`, ensure that the column you are counting is directly referenced in the `ORDER BY` clause. This helps avoid confusion and ensures you're ordering by the correct aggregated result rather than by the column itself. Always verify that the query logic corresponds to the intended output.",
        "ground_truth_sql": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.",
        "hint": "",
        "error_sql": "SELECT T2.School, T2.Latitude, T2.SchoolType FROM schools AS T2 ORDER BY T2.Latitude DESC LIMIT 1",
        "compiler_hint": "no such column: T2.SchoolType",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries involving multiple tables, always ensure that you reference the correct columns from the appropriate tables, particularly when there's a possibility of column name overlaps or similarities. Additionally, verify that you're correctly using JOIN operations to combine data from different tables, as missing JOINs can lead to missing columns or incorrect results. To prevent such mistakes, draft the query step-by-step: start with simple SELECT statements, then gradually introduce JOINs, ensuring each addition aligns with your data structure.",
        "ground_truth_sql": "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the grade span offered in the school with the highest longitude?",
        "hint": "the highest longitude refers to the school with the maximum absolute longitude value.",
        "error_sql": "SELECT T1.`Low Grade`, T1.`High Grade` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY ABS(T2.Longitude) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check your query logic and ensure you are selecting the correct columns from the appropriate tables. In particular, when ordering by a specific criteria (like longitude), ensure you're using the intended data and not possibly excluding relevant data by a join or order clause. Consider validating whether you need to join tables before applying aggregate functions or ordering that might limit your dataset incorrectly.",
        "ground_truth_sql": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
        "hint": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
        "error_sql": "SELECT City, COUNT(*) AS NumSchools FROM frpm WHERE Magnet = 1 AND `Low Grade` = 'K' AND `High Grade` = '8' AND `NSLP Provision Status` = 'Multiple Provision Types' GROUP BY City;",
        "compiler_hint": "no such column: Low Grade",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, always ensure that you are referencing the correct columns from the right tables. In cases of ambiguity or similar column names across joined tables, it's good practice to use aliases (e.g., T1, T2) for clarity and to explicitly specify the table names for each column being selected, especially in JOIN operations. Additionally, always verify the columns you want to filter on exist in the appropriate table. This prevents errors related to non-existent columns in your queries.",
        "ground_truth_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
        "difficulty": "challenging"
    },
    {
        "question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.",
        "hint": "",
        "error_sql": "SELECT AdmFName1, District, COUNT(*) AS NameCount \nFROM schools \nGROUP BY AdmFName1, District \nORDER BY NameCount DESC \nLIMIT 2;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen counting occurrences and wanting to identify distinct results, ensure that you're not grouping by other columns (like `District`) unless necessary. Instead, focus on aggregating the specific field (in this case, names) while ensuring to join back to the original table for other related information (like `District`) only after obtaining the most common results.",
        "ground_truth_sql": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1",
        "difficulty": "simple"
    },
    {
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "hint": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "error_sql": "SELECT T1.`District Code` FROM schools AS T1 WHERE T1.AdmFName1 = 'Alusine' AND T1.CDSCode IN (SELECT T2.CDSCode FROM frpm AS T2 WHERE (CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12) * 100`) IS NOT NULL)",
        "compiler_hint": "no such column: T1.District Code",
        "reflective_cot": "### Tip:\nAlways ensure that you are correctly referencing column names from the appropriate tables in your SQL queries, especially when using aliases. Additionally, verify the logic and structure of your calculations before placing them in your WHERE clause; computations like divisions should be part of the SELECT clause rather than a condition in WHERE. This approach helps prevent errors relating to non-existent columns or incorrect logic flow.",
        "ground_truth_sql": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
        "hint": "",
        "error_sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for numerical values that may have leading zeros, always ensure the format matches the stored data type. If a number is stored as a string with leading zeros, like '0040', using an integer format in your query may not yield results. Always check the data type and format of the column to ensure accurate querying.",
        "ground_truth_sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "difficulty": "simple"
    },
    {
        "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
        "hint": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
        "error_sql": "SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = 62 OR DOC = 54)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the criteria used in your SQL query precisely match the data you are filtering against, especially for complex conditions involving multiple tables and fields. Additionally, be mindful of data types (e.g., using the correct type for `SOC` and `DOC`), and double-check the exact values in your filtering criteria, such as names and titles, that can be easily misrepresented or misread. Using explicit joins instead of implicit conditions can help clarify relationships and avoid unintentional exclusions of relevant data.",
        "ground_truth_sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
        "difficulty": "challenging"
    },
    {
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "hint": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "error_sql": "SELECT COUNT(DISTINCT A.account_id) \nFROM account AS A \nINNER JOIN district AS D ON A.district_id = D.district_id \nWHERE D.A3 = 'East Bohemia' AND A.frequency = 'POPLATEK PO OBRATU'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the case of string comparisons in SQL matches the data in the database. SQL string comparisons are case-sensitive in certain database engines. To avoid such mistakes, consider using functions like `LOWER()` or `UPPER()` on both the column and the string being compared to ensure consistent casing during comparisons. For example:\n```sql\nWHERE LOWER(D.A3) = 'east bohemia' AND A.frequency = 'POPLATEK PO OBRATU'\n```",
        "ground_truth_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "hint": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
        "error_sql": "SELECT \n    CASE \n        WHEN AVG(A12) > AVG(A13) THEN '1995 has higher unemployment ratio'\n        WHEN AVG(A12) < AVG(A13) THEN '1996 has higher unemployment ratio'\n        ELSE 'Both years have the same unemployment ratio'\n    END AS result\nFROM \n    district;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check your SQL functions and syntax. While using `CASE` statements can be effective for conditional logic, using functions like `IIF` or comparing averages directly can yield clearer and more efficient results. To avoid mistakes, ensure that your logic aligns with the desired output format and that you're grouping or aggregating data correctly before making comparisons.",
        "ground_truth_sql": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "difficulty": "simple"
    },
    {
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "hint": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "error_sql": "SELECT COUNT(T1.client_id) \nFROM client AS T1 \nINNER JOIN district AS T2 ON T1.district_id = T2.district_id \nWHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways pay attention to case sensitivity in string comparisons when querying a database, as some database systems treat string values as case-sensitive. It\u2019s useful to double-check the exact value in the database and match it in your query.",
        "ground_truth_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "difficulty": "moderate"
    },
    {
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "hint": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "error_sql": "SELECT A.account_id, (MAX(A11) - MIN(A11)) AS gap \nFROM (SELECT C.client_id, D.account_id, AVG(District.A11) AS A11 \n      FROM client AS C \n      INNER JOIN disp AS D ON C.client_id = D.client_id \n      INNER JOIN district AS District ON C.district_id = District.district_id \n      WHERE C.gender = 'F' \n      GROUP BY C.client_id, D.account_id) AS A;",
        "compiler_hint": "no such column: D.A11",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, ensure that you correctly reference column names from the appropriate tables, especially when using joins. It's crucial to verify that the specified column exists in the intended table to avoid errors like \"no such column.\" Additionally, always structure your subqueries to directly correlate with your main query's logic and required joins, avoiding unnecessary grouping and ordering that can lead to confusion. Always double-check table relationships and column existence before executing your queries.",
        "ground_truth_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "hint": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
        "error_sql": "SELECT T1.account_id FROM account AS T1 \nINNER JOIN disp AS T2 ON T1.account_id = T2.account_id \nINNER JOIN client AS T3 ON T2.client_id = T3.client_id \nINNER JOIN district AS T4 ON T1.district_id = T4.district_id \nWHERE T3.birth_date = (SELECT MIN(birth_date) FROM client) \nAND T4.A11 = (SELECT MAX(A11) FROM district) ",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nPay close attention to the logical conditions when querying for the youngest client and the maximum average salary. Specifically, ensure that you're using the correct aggregate functions and conditions. For example, instead of looking for the minimum birth date (which indicates the oldest), focus on correctly identifying the maximum birth date (which indicates the youngest). Additionally, verify that you are correctly correlating different criteria, such as connecting clients with their average salary through a properly structured query. Using `ORDER BY` and `LIMIT` can help to isolate specific records that meet your criteria more effectively.",
        "ground_truth_sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
        "difficulty": "moderate"
    },
    {
        "question": "How many customers who choose statement of weekly issuance are Owner?",
        "hint": "'POPLATEK TYDNE' stands for weekly issuance",
        "error_sql": "SELECT COUNT(DISTINCT C.client_id) \nFROM client AS C \nINNER JOIN disp AS D ON C.client_id = D.client_id \nWHERE D.type = 'Owner' AND D.account_id IN \n    (SELECT A.account_id FROM account AS A WHERE A.frequency = 'POPLATEK TYDNE');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the proper joins and conditions in your SQL queries. Ensure that the fields you are referencing in WHERE clauses correctly relate to the tables you are querying from, and double-check the intended logic behind using subqueries. When filtering on types or values, ensure you use the correct case and format (for example, 'OWNER' should be consistently used if that's the intended case in the database).",
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple"
    },
    {
        "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "hint": "'POPLATEK TYDNE' stands for weekly issuance",
        "error_sql": "SELECT T1.account_id \nFROM account AS T1 \nINNER JOIN loan AS T2 ON T1.account_id = T2.account_id \nWHERE T2.status = 'approved' \nAND strftime('%Y', T2.date) = '1997' \nAND T2.amount = (SELECT MIN(amount) FROM loan WHERE status = 'approved' AND strftime('%Y', date) = '1997') \nAND T1.frequency = 'POPLATEK TYDNE';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to correctly align your JOIN operations with the logical flow of the query. Specifically, focus on which tables need to be joined to filter the results appropriately, and consider the sequence of conditions to properly isolate the records that meet all criteria. Using a clearly defined ordering without unnecessary conditions will lead to more accurate and concise results. Always verify that you are selecting and filtering from the appropriate tables in relation to your requirements.",
        "ground_truth_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "hint": "Loan validity more than 12 months refers to duration > 12",
        "error_sql": "SELECT T1.account_id FROM loan AS T1 WHERE T1.duration > 12 AND STRFTIME('%Y', T1.date) = '1993' ORDER BY T1.amount DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways prioritize the sequence of filtering conditions to ensure logical clarity, specifically placing the primary criteria (such as the duration check) after checking for non-negotiable constraints (like the account opening date). In this case, keep the date condition at the beginning to ensure correct filtering prior to evaluating loan durations and other attributes.",
        "ground_truth_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "List out the accounts who have the earliest trading date in 1995 ?",
        "hint": "",
        "error_sql": "SELECT T1.account_id FROM account AS T1 WHERE STRFTIME('%Y', T1.date) = '1995' ORDER BY T1.date ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific data, ensure you're looking in the correct table that contains the information you need. In this case, the `trans` table contains the trading dates, while the `account` table does not. Carefully review the table schema to understand where each type of data resides before writing the query. Always verify the relationships and constraints to ensure you're querying the expected data context.",
        "ground_truth_sql": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
        "hint": "",
        "error_sql": "SELECT DISTINCT T2.account_id FROM account AS T2 INNER JOIN loan AS T1 ON T2.account_id = T1.account_id WHERE T2.date < '1997-01-01' AND T1.amount > 3000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you understand the structure and purpose of each table in your database schema before writing queries. In this case, the original queries relied on the `loan` table instead of considering the `trans` table, which contained the relevant transactions. Always check if you're utilizing the correct table for the criteria specified in your query to avoid missing key data components.",
        "ground_truth_sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
        "difficulty": "simple"
    },
    {
        "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
        "hint": "",
        "error_sql": "SELECT a.date FROM account AS a INNER JOIN trans AS t ON a.account_id = t.account_id WHERE t.date = '1998-10-14';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to always verify all conditions that need to be satisfied in your SQL queries. In this case, the first query lacked the filter for the transaction amount which was crucial for identifying the correct transaction. Always cross-check the requirements of the query against the data conditions explicitly before finalizing the SQL statement.",
        "ground_truth_sql": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "difficulty": "simple"
    },
    {
        "question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
        "hint": "",
        "error_sql": "SELECT MAX(T3.amount) \nFROM card AS T1 \nINNER JOIN disp AS T2 ON T1.card_id = T2.disp_id \nINNER JOIN trans AS T3 ON T2.account_id = T3.account_id \nWHERE T1.issued = '1996-10-21'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you carefully review the join conditions and the relationships between tables to correctly link them. Specifically, double-check that you're using the right foreign key references and ensure you're selecting the appropriate columns that reflect the intended relationships (e.g., using the correct `disp_id` to join the `card` and `disp` tables). Always verify the correctness of your SQL logic against the database schema to avoid any discrepancies.",
        "ground_truth_sql": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "hint": "",
        "error_sql": "SELECT T2.disp_id FROM trans AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN disp AS T2 ON T3.account_id = T2.account_id WHERE T1.amount = 5100 AND T1.date = '1998-09-02'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you correctly understand the relationships between tables and the structure of the joins. Double-check the filtering criteria to ensure that attributes belong to the appropriate tables, and review the table definitions for foreign key relationships to avoid ambiguity when joining tables.",
        "ground_truth_sql": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
        "difficulty": "simple"
    },
    {
        "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
        "hint": "Female refers to gender = 'F'; A2 refers to district names",
        "error_sql": "SELECT A.district_id FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id WHERE C.gender = 'F' AND C.birth_date = '1976-01-29'",
        "compiler_hint": "no such column: D.A2",
        "reflective_cot": "### Tip:\nAlways verify the relationships between the tables and the structure of the data you need to retrieve. In your first attempt, you were trying to access a field (`A2`) from the `district` table without joining it, resulting in an error. Ensure that all necessary joins are included in your query to access the required fields from the respective tables.",
        "ground_truth_sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "hint": "A3 stands for region names",
        "error_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to clearly define the requirements of your query, including the order of results and any necessary conditions. In this case, specifying `ORDER BY T1.date ASC` was essential to retrieve the first account opened. Take time to consider both the filtering and sorting aspects before executing a query.",
        "ground_truth_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "hint": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
        "error_sql": "SELECT ((T3.balance - T2.balance) / T2.balance) * 100 AS increase_rate \nFROM trans AS T2 \nJOIN (SELECT T1.account_id \n      FROM loan AS T1 \n      WHERE T1.date = '1993-07-05' \n      ORDER BY T1.date \n      LIMIT 1) AS T1 ON T2.account_id = T1.account_id \nJOIN trans AS T3 ON T1.account_id = T3.account_id \nWHERE T2.date = '1993-03-22' AND T3.date = '1998-12-27';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen formulating SQL queries, especially with nested subqueries and joins, it's important to ensure the correct aggregation and filtering logic aligns with the dataset's requirements. Use aggregate functions wisely and double-check that conditions on dates and account associations are accurately structured to avoid missing data. Always verify that your joins connect the intended tables and that the fields used for calculations are properly aggregated or filtered to prevent incorrect outcomes.",
        "ground_truth_sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "difficulty": "challenging"
    },
    {
        "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
        "hint": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "error_sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T1.date) = '1993' AND T3.type = 'POPLATEK PO OBRATU'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the conditions in your `WHERE` clause accurately reflect the requirements of the query. In this case, the condition for the account frequency should match the appropriate column (`frequency` instead of `type`). Additionally, double-check the context of the data being joined to ensure you're referencing the correct tables and their attributes as intended by the question.",
        "ground_truth_sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
        "difficulty": "moderate"
    },
    {
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "hint": "A3 refers to regions; A11 refers to average salary",
        "error_sql": "SELECT T1.loan_id, T4.A3 AS district, T4.A11 AS average_salary \nFROM loan AS T1 \nINNER JOIN account AS T2 ON T1.account_id = T2.account_id \nINNER JOIN district AS T4 ON T2.district_id = T4.district_id \nWHERE T1.duration = 60;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you understand the requirements of the query fully, especially regarding how data should be aggregated or grouped. In the case of your SQL queries, you mistakenly included `AVG(T4.A11)` for average salary, which is unnecessary since you are interested in the salary for specific districts related to each loan. Instead, it\u2019s important to directly select the fields you need without aggregation unless specified. Additionally, ensure correct joins and ordering of table relationships according to what is being queried.",
        "ground_truth_sql": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "difficulty": "simple"
    },
    {
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "hint": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "error_sql": "SELECT T2.district_id, CAST((AVG(T1.A13) - AVG(T1.A12)) * 100 / AVG(T1.A12) AS REAL) AS unemployment_rate_increment FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'D' GROUP BY T2.district_id;",
        "compiler_hint": "no such column: T2.A3",
        "reflective_cot": "### Tip:\nAlways double-check the table and column names in your SQL statements to ensure they exist in the database schema and are referenced correctly. When aggregating or computing values, be mindful of whether you're aggregating on individual rows or if you're trying to compute values across groups, and ensure you're using the correct references to the columns involved in those computations. Additionally, verify that JOINs are being used properly to connect the relevant tables and that you're referencing the correct table aliases.",
        "ground_truth_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "difficulty": "challenging"
    },
    {
        "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "hint": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
        "error_sql": "SELECT D.A2, SUM(T.amount) as total_withdrawal FROM trans AS T \nJOIN account AS A ON T.account_id = A.account_id \nJOIN district AS D ON A.district_id = D.district_id \nWHERE T.type = 'VYDAJ' AND T.date LIKE '1996-01%' \nGROUP BY D.A2 \nORDER BY total_withdrawal DESC \nLIMIT 10",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting appropriate columns for your query's purpose. In the case of aggregating withdrawals by district, make sure to include the sum or other relevant aggregate functions properly and clearly state these requirements in the SELECT clause. Additionally, confirm that any JOINs are correctly producing the necessary relationships to access the intended data. Testing smaller parts of the query can help identify where the logic may break down before running the final, more complex version.",
        "ground_truth_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "How many of the account holders in South Bohemia still do not own credit cards?",
        "hint": "A3 contains the region names; South Bohemia is one of region names.",
        "error_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN card AS T3 ON T1.account_id = T3.disp_id WHERE T2.A3 = 'South Bohemia' AND T3.card_id IS NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you correctly understand the relationships between tables and the specific data you are querying. In this case, the error arose from joining the wrong tables for the desired information regarding account holders and their card ownership. Familiarize yourself with foreign key relationships and the purpose of each table to avoid mismatched joins. When you need specific information like a lack of credit cards, check the conditions carefully to make sure they accurately reflect the intended outcome.",
        "ground_truth_sql": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "question": "Which district has highest active loan?",
        "hint": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "error_sql": "SELECT T4.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T4 ON T2.district_id = T4.district_id WHERE T1.status = 'C' GROUP BY T4.district_id ORDER BY COUNT(T1.loan_id) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the logic accurately reflects the requirements of the query. Specifically, make sure to check that you understand the meaning of the statuses and the conditions needed for grouping and aggregating data. In this case, consider the statuses that represent active loans and ensure you are summing the correct metric (e.g., total loan amounts) rather than simply counting instances. Additionally, when deriving values from multiple tables, clarify which table's fields to use in your SELECT clause and ensure that inner joins align with the required data relationships.",
        "ground_truth_sql": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "hint": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
        "error_sql": "SELECT T1.A2, T1.A3 FROM district AS T1 WHERE T1.A13 = (SELECT MAX(A13) FROM district)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your query's intent matches the requirement. Initially, focusing only on equality with the maximum value may not yield the correct results if multiple districts have the same highest unemployment rate. Instead, using `ORDER BY` combined with `LIMIT` can help retrieve the desired record directly. Moreover, ensure you're selecting all necessary columns upfront, destined for display, rather than filtering based solely on the maximum.",
        "ground_truth_sql": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
        "hint": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "error_sql": "SELECT COUNT(DISTINCT T2.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen counting distinct values in SQL, ensure you're using the appropriate aggregation and syntax. If you want to count each distinct account only once, use `COUNT(DISTINCT ...)` instead of just `COUNT(...)`. Additionally, be cautious with the order of joins and make sure that the logic aligns with your filtering conditions to avoid miscounts or incorrect groupings. Always validate the logic of your conditions and consider using subqueries or Common Table Expressions (CTEs) for clarity when combining multiple tables.",
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "difficulty": "moderate"
    },
    {
        "question": "How many accounts have running contracts in Branch location 1?",
        "hint": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "error_sql": "SELECT COUNT(DISTINCT account_id) FROM loan WHERE status IN ('C', 'D') AND account_id IN (SELECT account_id FROM disp WHERE disp_id = 1);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for counts or aggregates linked across multiple tables, ensure you clearly understand the relationships between those tables and appropriately filter based on all relevant criteria. In this case, the initial queries failed to consider the district context of the accounts, leading to an incomplete filtering process. Always track how foreign keys relate tables and take care not to overlook any necessary joins or conditions that specify which records should be included in the final results.",
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "difficulty": "moderate"
    },
    {
        "question": "Which districts have transactions greater than USS$10,000 in 1997?",
        "hint": "",
        "error_sql": "SELECT DISTINCT T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.amount > 10000 AND T3.date LIKE '1997%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to use aggregate functions and GROUP BY clauses when summarizing data across multiple rows, especially when using conditions like \"greater than.\" Additionally, clearly define the filtering criteria (e.g., year) before aggregation to ensure accurate results.",
        "ground_truth_sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
        "difficulty": "simple"
    },
    {
        "question": "Which accounts placed orders for household payment in Pisek?",
        "hint": "k_symbol = 'SIPO' refers to household payment",
        "error_sql": "SELECT DISTINCT T1.account_id FROM `order` AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.k_symbol = 'SIPO' AND T2.A3 = 'Pisek'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining multiple tables, ensure that you accurately match the foreign keys and the appropriate fields. Always double-check the conditions for filtering rows, especially when referring to specific attributes (like district names) in the right columns to avoid any mismatches. Review the schema to ensure you're using the correct field names and relationships.",
        "ground_truth_sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
        "difficulty": "simple"
    },
    {
        "question": "How much is the average amount in credit card made by account holders in a month, in year 2021?",
        "hint": "Operation = 'VYBER KARTOU' refers to credit card withdrawn",
        "error_sql": "SELECT AVG(T1.amount) FROM trans AS T1 WHERE T1.operation = 'VYBER KARTOU' AND strftime('%Y', T1.date) = '2021' GROUP BY strftime('%Y-%m', T1.date);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are joining related tables correctly to access the necessary data. In this case, the average amount of credit card withdrawals should be calculated based on the `trans` table in conjunction with the `card` and `disp` tables, which link card transactions to specific accounts. Avoid trying to filter or aggregate data from a single table when it is dependent on relationships with other tables. Use appropriate JOINs to consolidate data from multiple tables before performing aggregations or calculations.",
        "ground_truth_sql": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'",
        "difficulty": "moderate"
    },
    {
        "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
        "hint": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
        "error_sql": "SELECT DISTINCT T2.account_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T3.date) = '1998' AND T3.amount < (SELECT AVG(T4.amount) FROM trans AS T4 WHERE T4.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T4.date) = '1998');",
        "compiler_hint": "no such column: T3.account_id",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, ensure that you are correctly referencing the columns and tables involved in your joins. Always double-check the relationships between tables and verify that the correct identifiers (like `account_id` and `client_id`) are being used in the appropriate context. It\u2019s also helpful to simplify your query step-by-step while testing each component individually to confirm each part works as expected before combining them.",
        "ground_truth_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
        "difficulty": "moderate"
    },
    {
        "question": "Who are the female account holders who own credit cards and also have loans?",
        "hint": "Female refers to gender = 'F'",
        "error_sql": "SELECT DISTINCT T1.client_id \nFROM client AS T1 \nINNER JOIN disp AS T2 ON T1.client_id = T2.client_id \nINNER JOIN loan AS T3 ON T2.account_id = T3.account_id \nWHERE T1.gender = 'F'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries that involve multiple joins, ensure that you are joining all necessary tables for the information you want to retrieve. Always track which tables contain the relevant information for all conditions, and double-check foreign key relationships. In this case, the `account` table was missing in the initial joins, which is crucial for correctly linking loans to accounts.",
        "ground_truth_sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question": "How many female clients' accounts are in the region of South Bohemia?",
        "hint": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'",
        "error_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T2.gender = 'F' AND T3.A3 = 'south Bohemia'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are counting the correct table's primary key or relevant identifier in your query. In this case, the ground truth SQL counts `client_id` from the `client` table, while the initial queries incorrectly counted `account_id` from the `account` table. Always double-check the logic of your joins and the specific data you wish to aggregate to avoid mismatches.",
        "ground_truth_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
        "difficulty": "simple"
    },
    {
        "question": "Please list the accounts whose district is Tabor that are eligible for loans.",
        "hint": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
        "error_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Tabor' AND T1.frequency = 'OWNER'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the relationships between tables and ensure you are joining on the correct columns and conditions. In this scenario, the eligibility for loans was based on the `disp` table's `type` column rather than the `frequency` column in the `account` table. Understanding the data model and double-checking join conditions can help prevent such mistakes.",
        "ground_truth_sql": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
        "difficulty": "moderate"
    },
    {
        "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
        "hint": "A3 contains the region names; North Bohemia is a region.",
        "error_sql": "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure consistency in string casing and formatting when comparing values in SQL queries. SQL is case-sensitive in some databases, so using the correct case in conditions (e.g., 'North Bohemia' vs. 'north Bohemia') is crucial to avoid missing results. Additionally, double-check the order of table aliases and the relationships in the joins to match the structure of the ground truth.",
        "ground_truth_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
        "difficulty": "moderate"
    },
    {
        "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
        "hint": "operation = 'VYBER' refers to withdrawal in cash",
        "error_sql": "SELECT * FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 3356) AND operation = 'VYBER';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you fully understand the relationship between tables and the specific column names used in your conditions. In the case of the \"trans\" table, the correct column for the withdrawal operation was \"operation,\" not \"type.\" Double-check column names and their intended purposes to avoid such errors.",
        "ground_truth_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "difficulty": "simple"
    },
    {
        "question": "Which district has the most accounts with loan contracts finished with no problems?",
        "hint": "status = 'A' refers to loan contracts finished with no problems",
        "error_sql": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T2.A3 ORDER BY COUNT(T1.account_id) DESC LIMIT 1",
        "compiler_hint": "no such column: T2.A3",
        "reflective_cot": "### Tip:\nAlways verify the table names and their respective columns being referenced in your SQL queries. Ensure that you're joining the correct tables and using the right aliases when selecting columns. Double-check the column names against the table schema to prevent errors like \"no such column.\" Consider using a query building tool to visually connect tables and validate your logic before execution.",
        "ground_truth_sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Please list all the transactions made by accounts from district 5.",
        "hint": "",
        "error_sql": "SELECT T1.trans_id, T1.date, T1.type, T1.amount, T1.balance \nFROM trans AS T1 \nINNER JOIN account AS T2 ON T1.account_id = T2.account_id \nWHERE T2.district_id = 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're including all necessary tables related to the query requirements, especially when dealing with foreign keys. In cases where filtering is needed based on a related attribute (like the district in this case), verify that the join involves the correct tables to access those attributes directly before applying filters.",
        "ground_truth_sql": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5",
        "difficulty": "simple"
    },
    {
        "question": "How many of the accounts are from Jesenik district?",
        "hint": "",
        "error_sql": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Jesenik'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are referencing the correct columns from the right tables, especially when checking based on specific attributes. In this case, confirm which table should provide the district name (like 'Jesenik') and whether it's being queried correctly to count the associated records from another table. Also, verify your use of aliases to maintain clarity between different tables and their columns.",
        "ground_truth_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
        "difficulty": "simple"
    },
    {
        "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
        "hint": "After 1996 means date > = '1997-01-01",
        "error_sql": "SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'JUNIOR' AND T3.issued >= '1997-01-01'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nBe cautious with how you reference table aliases and the order of joins. Always ensure the correct tables are being joined for the context of your query, and verify that you're using the correct fields from each table based on their relationships. Utilize the referenced keys accurately (e.g., matching column names and expected types), especially in joins, and double-check the conditions specified to ensure they align with your query's intent.",
        "ground_truth_sql": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
        "difficulty": "simple"
    },
    {
        "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
        "hint": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "error_sql": "SELECT (COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) * 100.0) / COUNT(*) AS female_percentage\nFROM client AS T1\nINNER JOIN account AS T2 ON T1.client_id = T2.account_id\nINNER JOIN district AS T3 ON T2.district_id = T3.district_id\nWHERE T3.A11 > 10000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways carefully check join conditions and ensure you're referencing the correct foreign keys to relate tables appropriately. In your case, the initial query incorrectly joined accounts to clients through the `account_id`, which does not represent the correct relationship; rather, the `disp` table was the link between clients and accounts. Ensure you fully understand the structure of the tables and their relationships before writing complex queries.",
        "ground_truth_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "difficulty": "moderate"
    },
    {
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "hint": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "error_sql": "SELECT CAST((SUM(IIF(T1.date BETWEEN '1997-01-01' AND '1997-12-31', T1.amount, 0)) - SUM(IIF(T1.date BETWEEN '1996-01-01' AND '1996-12-31', T1.amount, 0))) AS REAL) * 100 / NULLIF(SUM(IIF(T1.date BETWEEN '1996-01-01' AND '1996-12-31', T1.amount, 0)), 0) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'",
        "compiler_hint": "no such column: T2.account_id",
        "reflective_cot": "### Tip:\nAlways ensure to check the relationships between tables accurately, particularly foreign keys, before joining. Double-check that you're joining on the correct columns, and always confirm the presence of necessary attributes in the respective tables to avoid referencing non-existent columns.",
        "ground_truth_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "difficulty": "challenging"
    },
    {
        "question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
        "hint": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16",
        "error_sql": "SELECT \n    (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') -\n    (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS crime_difference;",
        "compiler_hint": "no such column: T1.A3",
        "reflective_cot": "### Tip:\nAlways ensure that your SQL queries correctly reference the columns without ambiguous table aliases. Utilize aggregate functions appropriately and ensure that your filtering conditions are applied correctly in the context of the data you are querying, particularly when combining multiple conditions or calculations involving sums.",
        "ground_truth_sql": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
        "difficulty": "moderate"
    },
    {
        "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "hint": "",
        "error_sql": "SELECT COUNT(T1.disp_id) FROM disp AS T1 WHERE T1.account_id BETWEEN 1 AND 10;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, always check the syntax and logic based on the requirements. Specifically, ensure that you are using the correct aggregation functions (like `SUM` for counting specific conditions) and that you are filtering data accurately based on the desired columns and values. Also, be cautious with data types and case sensitivity in SQL, as conditions like `'OWNER'` and `'DISPONENT'` must match exactly with the data in the database. Double-check your understanding of how to count specific values in categories effectively.",
        "ground_truth_sql": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "difficulty": "simple"
    },
    {
        "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "hint": "k_symbol refers to the purpose of payments",
        "error_sql": "SELECT COUNT(*) AS statement_requests, SUM(amount) AS total_debited FROM trans WHERE account_id = 3 AND k_symbol = 'VYBER KARTOU' AND account_id = 3539;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure your SQL queries correctly reflect the logic of the task at hand, especially in terms of the relationships between tables and the conditions used in the WHERE clause. Double-check that you're joining the right tables and using the appropriate conditions for the data you need, particularly with aggregations. Additionally, when referencing specific values or columns in your conditions, ensure that you're matching them correctly against the right table context.",
        "ground_truth_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
        "difficulty": "challenging"
    },
    {
        "question": "What year was account owner number 130 born?",
        "hint": "",
        "error_sql": "SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = 130);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries involving multiple tables, ensure that you explicitly define the necessary joins between those tables to properly relate the data. Avoid relying on subqueries alone without the appropriate context, as they may not return the expected results in complex situations. Always review the relationships between tables to construct join conditions that connect the relevant data effectively.",
        "ground_truth_sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "difficulty": "simple"
    },
    {
        "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
        "hint": "",
        "error_sql": "SELECT SUM(T1.amount) AS total_debt, SUM(T1.payments) AS total_payments FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 992;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are joining all necessary tables to gather the required information. In this case, the initial queries did not consider that the `loan` table's relevant information needed to be retrieved through multiple joins, specifically through the `client`, `disp`, and `account` tables. Make a habit of visualizing the relationships in the database schema to ensure you include all relevant entities in your queries.",
        "ground_truth_sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
        "difficulty": "simple"
    },
    {
        "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
        "hint": "",
        "error_sql": "SELECT SUM(T4.amount) AS total_amount, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.client_id = 4 AND T3.trans_id = 851;",
        "compiler_hint": "no such column: T2.balance",
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting the correct columns that actually exist in the involved tables. Before constructing your SQL queries, review the schema to confirm the attributes of each table and avoid using column names that might not be available in the context of the join operations. This will help prevent errors related to nonexistent columns and improve the accuracy of your queries.",
        "ground_truth_sql": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
        "difficulty": "simple"
    },
    {
        "question": "Which kind of credit card does client number 9 possess?",
        "hint": "",
        "error_sql": "SELECT T2.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 9",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries involving multiple tables, ensure you include all necessary joins to connect the tables properly. Verify the relationships between the tables and include all relevant foreign key references. To avoid mistakes, use step-by-step inner joins and validate the data flow, so each table's contributions to the query, especially for filtering conditions, are clear and complete.",
        "ground_truth_sql": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9",
        "difficulty": "simple"
    },
    {
        "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
        "hint": "",
        "error_sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T2.A3 = 'East Bohemia'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are considering all necessary relationships between tables in your SQL queries, especially when filtering on specific criteria. Involve all relevant tables through appropriate joins to access complete data, such as linking clients to their accounts via the `disp` table, in order to meet the query requirements accurately.",
        "ground_truth_sql": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "difficulty": "moderate"
    },
    {
        "question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
        "hint": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
        "error_sql": "SELECT COUNT(DISTINCT T1.client_id) \nFROM client AS T1 \nINNER JOIN disp AS T2 ON T1.client_id = T2.client_id \nINNER JOIN trans AS T3 ON T2.account_id = T3.account_id \nWHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T3.type = 'SIPO' AND T3.amount > 4000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you thoroughly understand the relationships between tables and the required conditions. Specifically, check that you're correctly joining tables based on their foreign key relationships and that you're using the correct columns for filtering the results, such as ensuring you're filtering on the right table for specific attributes like `k_symbol` in the `trans` table. Additionally, consider using more robust date handling, such as the `STRFTIME` function for date comparisons.",
        "ground_truth_sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "difficulty": "moderate"
    },
    {
        "question": "What percentage of male clients request for weekly statements to be issued?",
        "hint": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
        "error_sql": "SELECT CAST(SUM(T2.gender = 'M') AS REAL) * 100 / COUNT(T1.account_id) \nFROM disp AS T1 \nINNER JOIN client AS T2 ON T1.client_id = T2.client_id \nWHERE T1.type = 'POPLATEK TYDNE'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your `JOIN` conditions accurately reflect the relationships between the tables as well as any filtering conditions in the `WHERE` clause. Additionally, carefully consider the aggregation and counting mechanisms to ensure you're counting the intended groups. It\u2019s often helpful to first write out the logic in plain language to ensure you understand the relationships and conditions before translating them into SQL.",
        "ground_truth_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
        "hint": "",
        "error_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND T2.date < '1997' ORDER BY T1.amount LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering dates in SQL queries, ensure that you are comparing them correctly against the full date format. Using string comparisons can lead to incorrect results. Always use appropriate date functions or date formats to accurately extract and compare year values. For example, use `YEAR(date_column)` or `STRFTIME('%Y', date_column)` for getting the year from a date, while also ensuring to use the right comparison operator (like `<` or `=`) for the intended logic. Remember to also pay attention to the order of the results when using `ORDER BY`\u2014make sure it aligns with the requirement (e.g., ASC for lowest values).",
        "ground_truth_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
        "hint": "Female refers to 'F' in the gender; A11 contains information about average salary",
        "error_sql": "SELECT T1.account_id FROM account AS T1 \nINNER JOIN disp AS T2 ON T1.account_id = T2.account_id \nINNER JOIN client AS T3 ON T2.client_id = T3.client_id \nINNER JOIN district AS T4 ON T1.district_id = T4.district_id \nWHERE T3.gender = 'F' \nAND T4.A11 = (SELECT MIN(A11) FROM district WHERE district_id IN (SELECT district_id FROM client WHERE gender = 'F')) \nAND T3.birth_date = (SELECT MAX(birth_date) FROM client WHERE gender = 'F') ",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, ensure that you are using the correct aggregate functions and relationships. In this case, the first attempt mistakenly combined logic for selecting minimums and maximums incorrectly, while the second attempt failed to align properly with the intended sorting and selection criteria. Always clearly define the desired conditions and consider using `LIMIT` efficiently after sorting to get the right record instead of trying to combine multiple complex subqueries.",
        "ground_truth_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
        "hint": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "error_sql": "SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE' AND T1.status = 'pre-payment'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure the table aliases in your SQL query correspond to the correct tables and their relationships. Double-check the join order and conditions, especially when working with multiple tables. Also, verify which columns belong to which tables to avoid referencing them incorrectly in the SELECT or WHERE clauses.",
        "ground_truth_sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple"
    },
    {
        "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
        "hint": "Only the owner accounts have the right to issue permanent orders or apply for loans",
        "error_sql": "SELECT T1.client_id, T2.district_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'OWNER'",
        "compiler_hint": "no such column: T2.client_id",
        "reflective_cot": "### Tip:\nAlways ensure you understand the relationships between tables and verify which columns are available in each table before formulating your SQL queries. Double-check the join conditions and make sure to include all necessary tables to access the required columns. Using descriptive aliases can help clarify which table a column belongs to, reducing confusion and preventing errors.",
        "ground_truth_sql": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "hint": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
        "error_sql": "SELECT AVG(o.count) FROM (SELECT COUNT(T1.atom_id) AS count FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-' AND T1.element = 'o' GROUP BY T2.atom_id) AS o;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries that involve aggregations, ensure that you group by the correct field that represents the distinct entities you want to count. In this case, grouping by `bond_id` did not account for the `molecule_id`, leading to incorrect average calculations. Always confirm that your grouping aligns with the entities relevant to the final aggregation you need.",
        "ground_truth_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "difficulty": "moderate"
    },
    {
        "question": "On average how many carcinogenic molecules are single bonded?",
        "hint": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
        "error_sql": "SELECT AVG(single_bond_count) FROM (SELECT T1.molecule_id, COUNT(T2.bond_type) AS single_bond_count FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '-' GROUP BY T1.molecule_id) AS carcinogenic_single_bond_counts",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you join all relevant tables to access necessary columns accurately; in this case, you needed to include the `atom` table to correctly filter molecules based on their bonds. Always verify the relationships between entities in the database schema to correctly form your joins and selections.",
        "ground_truth_sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "difficulty": "challenging"
    },
    {
        "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
        "hint": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'",
        "error_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen counting elements in a SQL query, ensure you're identifying distinct records or groups that correctly represent the data you need. In this case, counting the number of unique molecules containing sodium atoms instead of simply the number of sodium atoms was crucial. Always double-check whether you should be counting distinct entities (like molecule IDs) or simply summing occurrences of a specific attribute.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of carbon in double-bond molecules?",
        "hint": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
        "error_sql": "SELECT (SUM(T1.element = 'c') * 100.0 / COUNT(T1.atom_id)) AS carbon_percentage FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are using `COUNT(DISTINCT ...)` for accurate counting of unique entries, especially when filtering based on specific criteria. This is crucial for calculating percentages correctly without double-counting or mismatching entries. Additionally, verify that your joins and filtering conditions are aligned with your logical requirements to avoid unintended exclusions or inclusions.",
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question": "What elements are in the TR004_8_9 bond atoms?",
        "hint": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
        "error_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR004_8_9'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying relationships within a database, ensure that you understand the structure and purpose of the tables involved. In this case, the `connected` table holds relationships between atoms through bond IDs, while the `bond` table contains the bond information itself. Verify that you're joining tables correctly based on how they relate to each other, particularly focusing on which tables hold the direct information needed for your query. In this instance, using `connected` directly to filter for a bond_id was essential, rather than attempting to join `bond` initially. Always break down the relationships and ensure that each join adds necessary context to your query.",
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "difficulty": "challenging"
    },
    {
        "question": "What elements are in a double type bond?",
        "hint": "double type bond refers to bond_type = '=';",
        "error_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen working with SQL queries involving multiple tables, ensure that your join conditions accurately reflect the relationships between the tables. Specifically, check that you are joining on the correct keys that relate the entities logically. In this case, the `molecule_id` was essential to relate atoms and bonds properly, which was overlooked in the initial queries. Always map out the relationships before constructing your joins to avoid missing crucial connections.",
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "difficulty": "challenging"
    },
    {
        "question": "Indicate which atoms are connected in non-carcinogenic type molecules.",
        "hint": "label = '-' means molecules are non-carcinogenic",
        "error_sql": "SELECT DISTINCT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-' OR T1.atom_id = T3.atom_id2;",
        "compiler_hint": "near \"INNER\": syntax error",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that each `JOIN` clause is properly structured with the correct syntax, including using `AND` or parentheses to group conditions when combining multiple joins. Pay attention to the order and ensure each `JOIN` is clearly specified to avoid confusion between conditions.",
        "ground_truth_sql": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
        "difficulty": "simple"
    },
    {
        "question": "What type of label is not on molecules with atoms with tin?",
        "hint": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "error_sql": "SELECT DISTINCT T2.label FROM molecule AS T2 INNER JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id WHERE T1.element = 'sn'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways carefully analyze the core requirements of the query before constructing the SQL statement. In this case, the focus was specifically on molecules containing tin, but the condition in the query neglected to filter for them correctly. Utilize the correct logic in joins and where conditions to ensure you're accessing the right subsets of data. It\u2019s beneficial to break down the requirements into clear parts and validate the conditions applied in your joins.",
        "ground_truth_sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "difficulty": "simple"
    },
    {
        "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "hint": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
        "error_sql": "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 \nINNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id \nINNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id \nWHERE T3.bond_type = '-' AND (T1.element = 'i' OR T1.element = 's');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure your queries clearly differentiate between distinct counts of different criteria. When counting distinct elements, use conditional aggregation for clarity and accuracy. This allows you to count specific subsets within a single query without mixing conditions, helping to avoid misinterpretations of the results.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "difficulty": "challenging"
    },
    {
        "question": "Identify all connected atoms with a triple bond.",
        "hint": "triple bond refers to bond_type = '#';",
        "error_sql": "SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'",
        "compiler_hint": "no such column: T2.atom_id2",
        "reflective_cot": "### Tip:\nAlways ensure that the columns you are referencing in your query are available within the context of the tables being joined. Use aliases carefully to differentiate between columns from different tables, and double-check that you are using the correct aliases for selecting specific fields.",
        "ground_truth_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "difficulty": "simple"
    },
    {
        "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
        "hint": "TR181 molecule refers to molecule_id = 'TR181'",
        "error_sql": "SELECT DISTINCT T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.molecule_id = 'TR181'",
        "compiler_hint": "no such column: T2.atom_id2",
        "reflective_cot": "### Tip:\nAlways verify the relationships and structure of your tables before writing your queries. Pay special attention to the columns you're referencing, ensuring they exist in the tables you are joining. Use clear aliases and double-check that you are joining on the correct keys. A thorough understanding of the schema can prevent referencing non-existent columns and lead to more accurate SQL queries.",
        "ground_truth_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
        "difficulty": "simple"
    },
    {
        "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
        "hint": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
        "error_sql": "SELECT CAST(COUNT(DISTINCT T4.molecule_id) AS REAL) * 100 / COUNT(DISTINCT T4.molecule_id) \nFROM molecule AS T4 \nLEFT JOIN atom AS T1 ON T4.molecule_id = T1.molecule_id \nWHERE T4.label = '+' AND T1.element IS NULL;",
        "compiler_hint": "no such column: T3.molecule_id",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, always ensure that you refer to the correct aliases and structure of your tables, particularly when performing joins. Be mindful of the scope of your SELECT statements and use proper table or alias references to avoid errors like \"no such column.\" Test individual components of your query incrementally to verify each part functions as expected before combining them, which can help identify issues early in the query-building process.",
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "hint": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS percent FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages in SQL, ensure you're accurately counting both the numerator and denominator based on the same logical criteria. In your case, the first query incorrectly considered the total bonds instead of the total distinct molecules with triple bonds. Always confirm that both counts in a percentage calculation are relevant to and derived from the same subset of data to provide an accurate representation.",
        "ground_truth_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
        "hint": "TR001 is the molecule id; TR001_2_6 is the bond id",
        "error_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR001' AND T1.bond_id = 'TR001_2_6'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen forming SQL queries involving joins between multiple tables, ensure that you clearly understand the relationships between the tables and the specific fields being joined. Double-check the logic used to derive any identifiers from other fields in your query. In this case, understanding how to extract the atom IDs directly from the `bond_id` using string slicing techniques would have led to a more accurate query from the start. Always verify the fields and their transformations before executing the query.",
        "ground_truth_sql": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
        "difficulty": "simple"
    },
    {
        "question": "What are the atom IDs of the bond TR000_2_5?",
        "hint": "TR000_2_5 is the bond id",
        "error_sql": "SELECT T.atom_id, T.atom_id2 FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the requirements of the query. In this case, the goal was to return atom IDs associated with a specific bond ID, but the original query mistakenly attempted to select both atom_ids from the `connected` table instead of just the one. Be specific about the desired output and verify that the selected columns align with the information sought.",
        "ground_truth_sql": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
        "hint": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
        "error_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.bond_type = '=' THEN T2.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.bond_id) AS percent FROM bond AS T2 WHERE T2.molecule_id = 'TR008'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are using the correct aggregation functions and conditions in your SQL queries. Specifically, when counting specific conditions (like double bonds), ensure you handle cases properly to avoid NULL results. Always round your final output when required, and consider edge cases where there might be no bonds to prevent division by zero errors.",
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
        "hint": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
        "error_sql": "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) AS percent FROM molecule;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are using the correct counting methods and conditions when calculating percentages. Use conditional aggregation (like `COUNT(CASE WHEN ...)`) to directly count the occurrences you're interested in, and be cautious when using `COUNT()` without conditions, as it may lead to counting unintended rows. Always validate your logic against expected outcomes to confirm accuracy.",
        "ground_truth_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
        "difficulty": "simple"
    },
    {
        "question": "What are the elements of the toxicology and label of molecule TR060?",
        "hint": "TR060 is the molecule id; ",
        "error_sql": "SELECT T.label, T1.element FROM molecule AS T INNER JOIN atom AS T1 ON T.molecule_id = T1.molecule_id WHERE T.molecule_id = 'TR060'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nBe cautious about using `GROUP BY` without an aggregation function when you only want distinct values from your SELECT query; instead, use `DISTINCT` in your SELECT statement to get unique rows directly, which is more efficient and clearer in intent. Always ensure that your JOINS correctly reflect the tables and foreign keys you're working with.",
        "ground_truth_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "difficulty": "challenging"
    },
    {
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "hint": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
        "error_sql": "SELECT T.bond_type, T.carcinogenic_label FROM (\n    SELECT T1.bond_type, COUNT(T1.bond_type) AS bond_count, T2.label AS carcinogenic_label\n    FROM bond AS T1 \n    INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id \n    WHERE T1.molecule_id = 'TR010' \n    GROUP BY T1.bond_type \n) AS T ORDER BY T.bond_count DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are grouping by the correct columns and correctly aggregating the data you need. In your initial query, you tried to retrieve the carcinogenic label along with the bond type and its count, which caused misalignment with the GROUP BY clause. Remember that when using aggregate functions like COUNT, any non-aggregated columns must be included in the GROUP BY clause or they need to be aggregated as well. Review the SQL standards regarding GROUP BY and JOIN operations to avoid similar issues in the future.",
        "ground_truth_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "difficulty": "challenging"
    },
    {
        "question": "How many bonds which involved atom 12 does molecule TR009 have?",
        "hint": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
        "error_sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE T.bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nCarefully analyze the relationships and conditions in your SQL queries, especially when dealing with multiple tables and joins. Ensure you understand how the foreign keys connect your data to avoid missing key constraints or relations. Using appropriate JOIN operations can help retrieve related data more accurately instead of relying solely on subqueries, which might not reflect the relationships correctly.",
        "ground_truth_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
        "difficulty": "moderate"
    },
    {
        "question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
        "hint": "TR001_10 is the atom id; label = '+' mean molecules are carcinogenic",
        "error_sql": "SELECT T2.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that SQL queries clearly communicate any necessary conditions or transformations, particularly when evaluating complex conditions like identifying attributes (e.g., carcinogenic status). Using functions like `IIF` can help succinctly categorize output directly in the query, preventing misspecification of the desired data structure.",
        "ground_truth_sql": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "difficulty": "moderate"
    },
    {
        "question": "How many connections does the atom 19 have?",
        "hint": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';",
        "error_sql": "SELECT COUNT(T1.bond_id) FROM connected AS T1 WHERE T1.atom_id = 'TR%_19' OR T1.atom_id2 = 'TR%_19'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for patterns in strings or specific parts of a string (like the end), use appropriate string functions such as `SUBSTR()` instead of attempting to match with wildcard patterns directly in the WHERE clause. This ensures you correctly identify the substrings you intend to match and avoid unexpected results from incorrect wildcard usage.",
        "ground_truth_sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
        "difficulty": "simple"
    },
    {
        "question": "List the bond type and the bond ID of the atom 45.",
        "hint": "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "error_sql": "SELECT T1.bond_type, T2.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_45' OR T2.atom_id2 = 'TR000_45';",
        "compiler_hint": "no such column: T2.bond_type",
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting columns from the correct table in an `INNER JOIN` and verify the join conditions. Additionally, double-check the references to column names and ensure they exist in the tables you are querying. Using clear and consistent aliases can help avoid confusion and mistakes in SQL queries.",
        "ground_truth_sql": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'",
        "difficulty": "moderate"
    },
    {
        "question": "List all the elements of atoms that can not bond with any other atoms.",
        "hint": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
        "error_sql": "SELECT DISTINCT T1.element FROM atom AS T1 WHERE T1.atom_id NOT IN (SELECT T2.atom_id FROM connected AS T2)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen checking for elements that cannot bond with any other atoms, ensure that you are comparing the correct sets. Using the `NOT IN` clause can lead to issues if there are any `NULL` values in the subquery results. Instead, consider using a `LEFT JOIN` with a `NULL` check or an anti-join approach to get accurate results. Always verify the logic of your query to ensure it aligns with the conditions specified in the problem statement.",
        "ground_truth_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
        "difficulty": "challenging"
    },
    {
        "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
        "hint": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
        "error_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.molecule_id = 'TR041' AND T3.bond_type = '#'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the join conditions correctly reflect the relationships and possible connections between tables. In the first query, you only joined `atom` with `connected` using one atom reference, which missed the other connection in the `connected` table. In the second query, using an OR condition can lead to incorrect results by returning unexpected matches. Instead, explicitly join on the relevant keys and retrieve all necessary columns to clarify relationships, ensuring to cover both connections between atoms.",
        "ground_truth_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
        "difficulty": "simple"
    },
    {
        "question": "What is the least common element of all carcinogenic molecules?",
        "hint": "label = '+' mean molecules are carcinogenic",
        "error_sql": "SELECT element, COUNT(*) AS count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY element ORDER BY count ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to determine the least common element across distinct groups (in this case, carcinogenic molecules), ensure to count the distinct occurrences related to the group of interest (i.e., count of distinct molecule IDs) rather than the total occurrences per element. This will help you accurately assess the frequency of elements across unique molecules and prevent misunderstandings in the JOIN clause that may lead to over-counting.",
        "ground_truth_sql": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t",
        "difficulty": "moderate"
    },
    {
        "question": "What are the atoms that can bond with the atom that has the element lead?",
        "hint": "atom that has the element lead refers to atom_id where element = 'pb'",
        "error_sql": "SELECT DISTINCT T2.atom_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')",
        "compiler_hint": "no such column: T2.atom_id2",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that you're selecting from the correct table and using the right column names associated with those tables. Always double-check relationships between tables, especially when using JOINs, to confirm that you're accessing the correct data points. Additionally, it's helpful to visualize the schema relationships and ensure each selected column correlates logically to the intended output.",
        "ground_truth_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
        "difficulty": "simple"
    },
    {
        "question": "What percentage of bonds have the most common combination of atoms' elements?",
        "hint": "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))",
        "error_sql": "SELECT ROUND(CAST(COUNT(T1.bond_id) AS REAL) * 100 / (SELECT MAX(atom_count) FROM (SELECT COUNT(T2.atom_id) AS atom_count FROM connected AS T2 GROUP BY T2.bond_id)), 5) FROM connected AS T1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries involving aggregate functions and subqueries, ensure that you are accurately grouping and joining the necessary tables. Pay attention to the scope of aggregation to avoid counting incorrect data or misinterpreting the relationships between different entities. Always verify your logic by breaking down the query into smaller parts and validating each step. Additionally, using descriptive aliases can help make complex queries more understandable and less prone to errors.",
        "ground_truth_sql": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )",
        "difficulty": "moderate"
    },
    {
        "question": "How many elements are there for single bond molecules?",
        "hint": "single bond refers to bond_type = '-';",
        "error_sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen formulating SQL queries, ensure that you properly account for relationships and conditions within the database schema. Specifically, be cautious about inner joins and grouping. In this case, the initial query incorrectly assumed that all bonds were directly linked to atoms without considering the necessary molecular context. Always start with a clear understanding of how different tables relate to each other and what specific groupings or conditions are needed to filter results accurately based on your query\u2019s intent.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "difficulty": "simple"
    },
    {
        "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
        "hint": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
        "error_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.atom_id), 2) AS percent FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are accurately referencing the correct relationships between tables and thoroughly check if any necessary joins are missing. In this case, the initial query did not consider the `molecule` table as an intermediary for linking `atoms` and `bonds`, leading to loss of context in the calculation of percentages. Validate the connections in your queries before execution.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "difficulty": "challenging"
    },
    {
        "question": "List down the bond type for molecules from molecule id TR000 to TR050.",
        "hint": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "error_sql": "SELECT molecule_id, bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways remember to consider the relationships between tables when querying data. If you need to retrieve information that spans multiple tables, ensure you join them correctly and filter your results based on conditions from the primary table. In this case, including the `molecule` table was essential to properly filter by `molecule_id`.",
        "ground_truth_sql": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'",
        "difficulty": "moderate"
    },
    {
        "question": "How many bond id have element iodine?",
        "hint": "iodine refers to element = 'i'",
        "error_sql": "SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you consider all necessary relationships between tables and join conditions based on the requirements of the query. In this case, it was essential to include the `molecule` table to correlate atoms to their bonds correctly. Verifying the logical flow of data and the relevant joins before writing the query can help prevent oversight.",
        "ground_truth_sql": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'",
        "difficulty": "simple"
    },
    {
        "question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?",
        "hint": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)",
        "error_sql": "SELECT T1.label, COUNT(*) as count FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'ca' GROUP BY T1.label ORDER BY count DESC LIMIT 1;",
        "compiler_hint": "no such column: T2.label",
        "reflective_cot": "### Tip:\nAlways verify the column names in the tables you are querying. In your initial query, you referenced `T2.label` incorrectly because `label` belongs to the `molecule` table (aliased as `T1`), not the `atom` table (aliased as `T2`). Ensure you understand the table structure and relationships before writing your SQL statements, and consider using descriptive aliases to help clarify which table each column belongs to.",
        "ground_truth_sql": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
        "hint": "chlorine refers to element = 'cl'; carbon refers to element = 'c'",
        "error_sql": "SELECT COUNT(DISTINCT T.element) = 2 FROM atom AS T \nINNER JOIN connected AS C ON T.atom_id = C.atom_id \nWHERE C.bond_id = 'TR001_1_8' AND T.element IN ('cl', 'c')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that aggregate functions (like COUNT) are used appropriately, and remember to include any necessary grouping in your queries. When checking for distinct values across multiple attributes, consider using additional joins to connect relevant tables and verify the presence of required elements more effectively. Also, be mindful of filtering criteria in your WHERE clause; it should accurately reflect the conditions you want to evaluate.",
        "ground_truth_sql": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of element chlorine in carcinogenic molecules?",
        "hint": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are counting the correct instances and divisions in your queries. In your case, you were incorrectly counting distinct `molecule_id` instead of counting all instances of elements in the numerator and denominator, which led to incorrect percentages. Make sure to clearly differentiate between counts of specific attributes and total counts in your calculations.",
        "ground_truth_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
        "hint": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
        "error_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND substr(T1.atom_id, 7, 1) = '4'",
        "compiler_hint": "no such column: T2.element",
        "reflective_cot": "### Tip:\nAlways double-check the column names and the logic used in your conditions. Ensure that the criteria matches the data structure, particularly when filtering with string functions like `SUBSTR` and when using column attributes in `WHERE` clauses. If you're unsure about the schema, reference it directly to confirm that you're using the correct fields and checks (e.g., verifying the length of IDs when slicing).",
        "ground_truth_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
        "difficulty": "challenging"
    },
    {
        "question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.",
        "hint": "triple bond refers to bond_type = '#';",
        "error_sql": "SELECT CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "compiler_hint": "no such column: T2.bond_type",
        "reflective_cot": "### Tip:\nAlways ensure that you are referencing the correct table alias for the columns you intend to query. Make sure to double-check the SELECT, JOIN, and WHERE clauses to avoid referring to the wrong table or column, especially when using multiple tables in a query.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
        "difficulty": "simple"
    },
    {
        "question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
        "hint": "TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'",
        "error_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id), 5) FROM bond AS T WHERE T.molecule_id = 'TR047'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways use `NULL` in the `CASE` statement when you want to return nothing for a condition that isn't met. However, you can simplify the query by omitting `ELSE NULL` entirely and just focusing on the condition check. This can help avoid confusion and keep your SQL code cleaner.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'",
        "difficulty": "moderate"
    },
    {
        "question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
        "hint": "label = '+' mean molecules are carcinogenic;",
        "error_sql": "SELECT IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen determining a specific condition from a database query, ensure you focus on returning the actual column value that represents the condition rather than trying to infer a new value with functions like `IIF`. Use the existing column data directly to provide accurate and clear results. Additionally, avoid unnecessary limitations (like `LIMIT 1`) when the query's structure already ensures a unique result.",
        "ground_truth_sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "difficulty": "simple"
    },
    {
        "question": "Is molecule TR151 carcinogenic?",
        "hint": "label = '+' mean molecules are carcinogenic;",
        "error_sql": "SELECT IIF(label = '+', 'YES', 'NO') AS flag_carcinogenic FROM molecule WHERE molecule_id = 'TR151'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the selected columns in your SQL query match your intended output clearly. In the first query, the use of `IIF` was appropriate but not supported by all SQL databases, which can lead to errors. In the second query, the focus was too much on returning a flag without directly addressing the requirement to retrieve the label. To avoid similar mistakes in the future, always check database compatibility for functions and clarify the data you need to extract before constructing your query.",
        "ground_truth_sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'",
        "difficulty": "simple"
    },
    {
        "question": "Which toxic element can be found in the molecule TR151?",
        "hint": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "error_sql": "SELECT DISTINCT T.element FROM atom AS T INNER JOIN molecule AS T1 ON T.molecule_id = T1.molecule_id WHERE T1.molecule_id = 'TR151' AND T.element IN ('cl', 'br', 'f', 'i', 'sn', 'pb', 'te')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're directly querying the target table for the specific conditions you need, rather than relying heavily on joins unless necessary. In this case, the original query incorrectly joined the `molecule` table when you simply needed to filter by `molecule_id` directly in the `atom` table. Simplifying your queries can often prevent unnecessary complexity and potential errors.",
        "ground_truth_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
        "difficulty": "challenging"
    },
    {
        "question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.",
        "hint": "",
        "error_sql": "SELECT T.molecule_id FROM bond AS T WHERE T.bond_id = 'TR000_1_2' AND T.molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id = 'TR000_1')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that when filtering data across multiple tables, you correctly JOIN the necessary tables to access related information. Relying solely on WHERE clauses without establishing proper relationships can lead to incorrect results. Use INNER JOIN or LEFT JOIN to combine data from related tables based on foreign key relationships, which will provide the correct context for your queries.",
        "ground_truth_sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'",
        "difficulty": "simple"
    },
    {
        "question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
        "hint": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100.0 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that conditional checks for specific criteria (like `element` and `label`) are combined correctly in the `CASE` statement. When calculating percentages, verify that the numerator is counting the right instances while also considering the specific filtering conditions. Additionally, use explicit joins and conditions directly related to the required counts to avoid confusion on counted rows versus distinct counts.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "difficulty": "moderate"
    },
    {
        "question": "Name all bonds with single bond types and what atoms are connected to the molecules.",
        "hint": "single bond refers to bond_type = '-';",
        "error_sql": "SELECT T2.bond_id, T1.atom_id, T1.element FROM bond AS T2 INNER JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id WHERE T2.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying relational databases, ensure that you're correctly joining the tables based on the relationships defined by foreign keys. Specifically, make sure to identify the correct relationships that link the tables together for the desired results, and consider the specific attributes you need from each table as per your query's requirement. Additionally, keep in mind the direction of the relationships to avoid misaligning the join conditions.",
        "ground_truth_sql": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question": "Which molecules have triple bonds and list all the elements they contain.",
        "hint": "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "error_sql": "SELECT DISTINCT T1.molecule_id, T1.element \nFROM atom AS T1 \nINNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id \nINNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id \nWHERE T3.bond_type = '#';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries with multiple joins, ensure that the join conditions properly relate the correct tables and their keys. Pay attention to which tables contain the necessary information; for example, ensure the correct use of foreign keys and check that the relevant fields being selected are linked properly to the outer tables. Always visualize the relationships between tables before writing the query to help avoid mismappings.",
        "ground_truth_sql": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "difficulty": "challenging"
    },
    {
        "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
        "hint": "",
        "error_sql": "SELECT T.atom_id, COUNT(DISTINCT B.bond_type) FROM atom AS T LEFT JOIN bond AS B ON T.molecule_id = B.molecule_id WHERE T.molecule_id = 'TR346' GROUP BY T.atom_id;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are correctly referencing the needed columns and relationships in your JOIN statements. Use INNER JOIN when you want to filter based on matching records in both tables instead of LEFT JOIN, which retains all records from one table even if there are no matches in the other. Additionally, include all required grouping fields to avoid aggregation errors.",
        "ground_truth_sql": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type",
        "difficulty": "simple"
    },
    {
        "question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?",
        "hint": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;",
        "error_sql": "SELECT COUNT(DISTINCT T2.molecule_id) AS double_bond_count, \n       COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id END) AS carcinogenic_count \nFROM bond AS T1 \nINNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_type = '=';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you aggregate results appropriately and avoid grouping by unnecessary columns that can distort the intended counts. When calculating counts based on conditions, consider using SUM with conditional logic rather than COUNT with CASE statements unless explicitly needed for grouping.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='",
        "difficulty": "moderate"
    },
    {
        "question": "How many molecules without sulphur element is not having double bond?",
        "hint": "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'",
        "error_sql": "SELECT COUNT(DISTINCT T1.molecule_id) \nFROM molecule AS T1 \nWHERE T1.molecule_id NOT IN (\n    SELECT T2.molecule_id \n    FROM atom AS T2 \n    WHERE T2.element = 's'\n) AND T1.molecule_id NOT IN (\n    SELECT T3.molecule_id \n    FROM bond AS T3 \n    WHERE T3.bond_type = '='\n);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries with multiple conditions, especially involving JOINs and exclusions, ensure that you appropriately combine tables to filter records effectively. In cases where you want to check for the absence of certain characteristics across multiple tables, consider using INNER JOINs for common elements rather than relying solely on NOT IN, as it may lead to unexpected results when NULL values exist. Additionally, always validate your logic after building the query to ensure it matches the intended structure of the dataset.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='",
        "difficulty": "simple"
    },
    {
        "question": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.",
        "hint": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are counting the total number of relevant molecules correctly. When calculating percentages, particularly in conditional cases, it's crucial to differentiate between the total counts for conditions explicitly without filtering them out prematurely. Always structure your query to clearly separate the numerator and denominator, and avoid applying filters that alter the dataset before your counts are accurately captured.",
        "ground_truth_sql": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "difficulty": "moderate"
    },
    {
        "question": "Is molecule TR000 is carcinogenic or not?",
        "hint": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "error_sql": "SELECT IIF(T.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM molecule AS T WHERE T.molecule_id = 'TR000'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SQL query selects the correct column to retrieve relevant information, especially when determining conditions based on specific values. In this case, instead of using `IIF` directly in the `SELECT` clause, ensure that the label is fetched first and then apply the conditional logic afterward, if necessary.",
        "ground_truth_sql": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'",
        "difficulty": "simple"
    },
    {
        "question": "Find the percentage of atoms with single bond.",
        "hint": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage",
        "error_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T4.bond_type = '-' THEN T2.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.atom_id) FROM atom AS T2 INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id",
        "compiler_hint": "no such column: T3.bond_type",
        "reflective_cot": "### Tip:\nAlways ensure that you are correctly referencing the table aliases in your SQL queries. Double-check the correct association of columns to their corresponding tables, especially when using multiple joins. Additionally, be cautious about the scope of the columns you are trying to manipulate; ensuring the correct aliases are used and verifying column names exist in the tables you've joined can help prevent these types of errors.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
        "difficulty": "simple"
    },
    {
        "question": "Which molecule consisted of Sulphur atom with double bond?",
        "hint": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';",
        "error_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 's' AND T3.bond_type = '=';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you understand the relationships among tables and the significance of the columns in your queries. In this case, the error lay in joining through the `connected` table, which was unnecessary since the relationship between atoms and bonds could be directly inferred through their respective molecules. Simplifying your joins and clearly identifying which tables provide relevant data can help avoid such mistakes.",
        "ground_truth_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
        "difficulty": "simple"
    },
    {
        "question": "List all the elements with double bond, consisted in molecule TR024.",
        "hint": "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "error_sql": "SELECT DISTINCT T1.element FROM atom AS T1 \nINNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id \nINNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id \nWHERE T3.bond_type = '=' AND T3.molecule_id = 'TR024'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you join tables based on the correct relationships and conditions pertinent to your query. In your original queries, the joining keys used did not effectively link the necessary tables (specifically, joining `atom` and `bond` tables directly without considering the `molecule` relationship). Before executing a query, review the schema to confirm the logical flow of how the tables relate, and check if you are using the appropriate join columns to fulfill the query requirements.",
        "ground_truth_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.",
        "hint": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';",
        "error_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' AND T1.element = 'h' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'h' AND T3.bond_type = '#';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that the join conditions and aggregations correctly align with the desired data relationships and criteria. Specifically, when counting unique occurrences or aggregating data, confirm that the conditions applied in the `WHERE` clause accurately select the right records without negating other relevant data needed for calculations. Double-check the logical sequence of joins and filtering criteria to verify they reflect the necessary relationships among tables.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'",
        "difficulty": "challenging"
    },
    {
        "question": "Among the molecules between TR004 to TR010, how many of them has single bonds?",
        "hint": "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';",
        "error_sql": "SELECT COUNT(DISTINCT T1.molecule_id) \nFROM molecule AS T1 \nINNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id \nWHERE T1.molecule_id BETWEEN 'TR004' AND 'TR010' AND T2.bond_type = '-'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you reference the correct tables by understanding the relationships and constraints within your database schema. In cases involving counting distinct rows across multiple tables, confirm that joins or direct table queries correctly reflect the intended conditions. When filtering rows, ensure all necessary joins and conditions are appropriately applied to return accurate results.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'",
        "difficulty": "simple"
    },
    {
        "question": "List the element and bond type included in the molecule with molecule ID of TR002.",
        "hint": "TR002 is the molecule id",
        "error_sql": "SELECT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR002'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing JOIN queries, ensure that the relationships between tables are correctly represented and that conditions in the WHERE clause are accurately reflecting the intended logic. Also, remember to check the primary relationships; in this case, the bond and atoms are both linked to a specific molecule via the `molecule_id`, so make sure to prioritize those relationships instead of using multiple OR conditions that could lead to incorrect results. Using DISTINCT can also help avoid duplicate rows if multiple bonds or atoms relate to the same molecule.",
        "ground_truth_sql": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
        "difficulty": "challenging"
    },
    {
        "question": "What is the atom ID of double bonded carbon in TR012 molecule?",
        "hint": "carbon refers to element = 'c'; double bond refers to bond_type = ' = ';",
        "error_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'c' AND T3.bond_type = ' = ' AND T1.molecule_id = 'TR012'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you properly join the tables based on the relationships defined by foreign keys and include any relevant linking fields in your WHERE clause. Always verify that you are joining the correct tables to access necessary attributes, especially when dealing with multiple relationships, and check the conditions for filtering the records to ensure they reflect the query's intent accurately.",
        "ground_truth_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'",
        "difficulty": "moderate"
    },
    {
        "question": "Which are the cards that have incredibly powerful foils.",
        "hint": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "error_sql": "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways clarify the specific data you need to retrieve. In this case, while you were initially interested in all card details, the Ground Truth SQL shows that only the IDs were required. Begin your queries with a clear understanding of the desired output to avoid unnecessary data retrieval, which can lead to performance issues or confusion about the objective.",
        "ground_truth_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "What are the borderless cards available without powerful foils?",
        "hint": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
        "error_sql": "SELECT * FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the logical conditions in your queries, especially when using combinations of `AND` and `OR`. In this case, ensure you are correctly reflecting the intended filtering criteria by clearly defining each condition, and consider using parentheses to group conditions properly. This can prevent confusion and ensure the query behaves as intended.",
        "ground_truth_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "difficulty": "simple"
    },
    {
        "question": "List the card names with value that cost more converted mana for the face.",
        "hint": "more converted mana for the face refers to Max(faceConvertedManaCost);",
        "error_sql": "SELECT name FROM cards ORDER BY faceConvertedManaCost DESC LIMIT 10;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you fully understand the requirements of the query before crafting it. In this case, the objective was to find the card with the maximum `faceConvertedManaCost`, which requires using `LIMIT 1` after sorting in descending order. Breaking down the task into smaller steps and focusing on the final goal can help prevent errors.",
        "ground_truth_sql": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
        "hint": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;",
        "error_sql": "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you check the data types of your columns when constructing queries. In your case, you used a string ('2015') instead of an integer (2015) for the `frameVersion`. Double-checking data types can help avoid similar mistakes in the future.",
        "ground_truth_sql": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
        "difficulty": "simple"
    },
    {
        "question": "List all the mythic rarity print cards banned in gladiator format.",
        "hint": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "error_sql": "SELECT uuid FROM legalities WHERE format = 'gladiator' AND status = 'Banned' AND uuid IN (SELECT uuid FROM cards WHERE rarity = 'mythic');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are using proper JOIN operations to combine related tables, especially when filtering results based on criteria from multiple tables. Instead of using subqueries, consider using INNER JOINs to maintain clarity and ensure that you are referencing the correct relationships between data.",
        "ground_truth_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "moderate"
    },
    {
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "hint": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "error_sql": "SELECT T1.uuid, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to use the correct column names consistently throughout your SQL queries. In your initial queries, you used `types` instead of `type`, which can lead to unexpected results or errors. Always double-check the schema definitions and use consistent naming to avoid such errors in the future.",
        "ground_truth_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "difficulty": "moderate"
    },
    {
        "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
        "hint": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id",
        "error_sql": "SELECT T1.id, T3.text FROM cards AS T1 INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T1.artist = 'Stephen Daniele' AND T1.hasContentWarning = 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you include all relevant conditions in your SQL query, especially when filtering for specific attributes or properties. In this case, the initial query omitted the check for `hasContentWarning` in the final output, which is essential for identifying missing or degraded properties. Additionally, double-check that all selected fields are necessary for the desired outcome, ensuring clarity and correctness in the output.",
        "ground_truth_sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
        "difficulty": "moderate"
    },
    {
        "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
        "hint": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
        "error_sql": "SELECT T1.name, T1.artist, T1.isPromo \nFROM cards AS T1 \nINNER JOIN rulings AS T2 ON T1.uuid = T2.uuid \nGROUP BY T1.uuid \nHAVING COUNT(T2.uuid) = (SELECT MAX(ruling_count) \n                          FROM (SELECT COUNT(uuid) AS ruling_count \n                                FROM rulings \n                                GROUP BY uuid));",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that your SQL queries properly account for all requirements laid out in the question. A common mistake is to overlook filtering conditions (like checking for promotional printing) until after aggregating data. Always structure your queries to include necessary WHERE clauses before grouping or aggregating results to avoid incorrect data sets and results.",
        "ground_truth_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Name all the cards which have alternative language in Japanese.",
        "hint": "Japanese' is the language;",
        "error_sql": "SELECT uuid FROM foreign_data WHERE language = 'Japanese';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nMake sure to not only focus on retrieving data from a single table but also consider the relationships between tables. Use JOINs appropriately to combine data from related tables to get the desired results. Always ensure you are selecting meaningful fields from the main table that you're interested in.",
        "ground_truth_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "difficulty": "simple"
    },
    {
        "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
        "hint": "Aaron Boyd' is artist;",
        "error_sql": "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify if there are any `NULL` values in the column you are counting or distincting, as they may influence the results unexpectedly. When counting distinct types or any other attribute, consider filtering out `NULL` values as they do not contribute to a count.",
        "ground_truth_sql": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
        "difficulty": "simple"
    },
    {
        "question": "What type of promotion is of card 'Duress'?",
        "hint": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "error_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SQL queries check for the possibility of NULL values when fetching specific fields. Using conditions like \"IS NOT NULL\" helps in filtering results that are meaningful and avoids returning unintended empty or irrelevant results.",
        "ground_truth_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
        "hint": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;",
        "error_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
        "compiler_hint": "near \"s\": syntax error",
        "reflective_cot": "### Tip:\nWhen using single quotes within a string in SQL, you should escape them by doubling the single quote (e.g., `''`) instead of using a backslash. This avoids syntax errors related to string delimiters. Always remember to double any single quote characters when they appear within a string to ensure proper syntax.",
        "ground_truth_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
        "hint": "Angel of Mercy' is the name of card;",
        "error_sql": "SELECT DISTINCT T3.language \nFROM cards AS T1 \nINNER JOIN sets AS T2 ON T1.setCode = T2.code \nINNER JOIN set_translations AS T3 ON T2.code = T3.setCode \nWHERE T1.name = 'Angel of Mercy'",
        "compiler_hint": "no such column: T2.language",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that all referenced columns exist in the relevant tables. Always double-check the table structures and their relationships to avoid column reference errors. Utilize direct joins with clear relationships rather than assuming availability across unrelated tables.",
        "ground_truth_sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "difficulty": "moderate"
    },
    {
        "question": "How many cards of legalities whose status is restricted have text boxes?",
        "hint": "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;",
        "error_sql": "SELECT COUNT(DISTINCT T1.id) \nFROM cards AS T1 \nINNER JOIN legalities AS T2 ON T1.uuid = T2.uuid \nWHERE T2.status = 'restricted' AND T1.isTextless = 0;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the case sensitivity of the values in your database when filtering results, as SQL can be case-sensitive depending on the database settings. In this instance, using 'restricted' instead of 'Restricted' led to missing records. To avoid similar mistakes, consider standardizing the case for all comparisons or use case-insensitive functions when querying.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0",
        "difficulty": "simple"
    },
    {
        "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
        "hint": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;",
        "error_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'restricted' AND T1.isStarter = 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the case sensitivity of string comparisons in SQL. SQL queries can behave differently based on the database's collation settings, and values such as 'restricted' and 'Restricted' may not match if the comparison is case-sensitive. To avoid such mistakes, ensure you check the exact expected values for comparisons or use functions to standardize cases before comparison.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the type of card \"Benalish Knight\"?",
        "hint": "Benalish Knight' is the name of card;",
        "error_sql": "SELECT originalType FROM cards WHERE name = 'Benalish Knight' AND originalType IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying data from multiple related tables, especially in cases where attributes may exist in different tables (like type in cards and other attributes in foreign_data), ensure to utilize JOIN operations appropriately. Always consider if the desired information is stored in related tables and use DISTINCT if there is a possibility of duplicate results. Additionally, confirm that you're selecting the appropriate fields from the correct tables in your queries.",
        "ground_truth_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
        "hint": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100",
        "error_sql": "SELECT (COUNT(T1.id) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1 AND T2.language = 'French';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your subquery accurately represents the intended scope. In the initial queries, the calculation did not take into account the number of Story Spotlight cards explicitly in the denominator, leading to potential inaccuracies. Using a `CASE` statement within an aggregation, as shown in the Ground Truth SQL, is effective in accurately counting specific conditions while maintaining clarity and correctness in computations.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
        "difficulty": "challenging"
    },
    {
        "question": "Name the cards that were illustrated by Aaron Boyd.",
        "hint": "Aaron Boyd' is artist;",
        "error_sql": "SELECT id FROM cards WHERE artist = 'Aaron Boyd'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific information, always ensure you are selecting the correct columns that directly address the question. In this case, the original query focused on the `id` column instead of the `name` column, which was the actual requirement. Verify the requirement and the fields you need to retrieve to avoid such mistakes in the future.",
        "ground_truth_sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "difficulty": "simple"
    },
    {
        "question": "What are the card layout of cards with keyword of flying?",
        "hint": "",
        "error_sql": "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific values in a text column, such as keywords, ensure that you are matching the exact value instead of using a `LIKE` clause with wildcards. Using `=` is more efficient and avoids partial matches that can lead to inaccurate results. Always check if the column contains the exact expected formatting or casing (e.g., \"Flying\" vs \"flying\").",
        "ground_truth_sql": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "difficulty": "simple"
    },
    {
        "question": "How many of the banned cards are white border?",
        "hint": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
        "error_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen counting records, use `COUNT(T1.id)` instead of `COUNT(DISTINCT T1.id)` unless you specifically need to count each distinct occurrence. Using `DISTINCT` can introduce unnecessary complexity, especially if there are no duplicates in the join result based on the criteria applied. Keeping it simple will help avoid errors in your SQL queries.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "difficulty": "simple"
    },
    {
        "question": "List down the uuid for legacy cards and the foreign language of these cards.",
        "hint": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "error_sql": "SELECT T1.uuid, T2.language \nFROM legalities AS T1 \nINNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid \nWHERE T1.format = 'legacy'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries that involve multiple tables with relationships, ensure you start with the primary table and progressively join the relevant tables while maintaining context about the data structure. Verify if the initial selection includes all necessary tables to retrieve the required fields, focusing on correct relationships and dependencies. In this case, ensure to include the \"cards\" table first since it holds the primary identifiers shared with \"legalities\" and \"foreign_data.\"",
        "ground_truth_sql": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "difficulty": "simple"
    },
    {
        "question": "How many cards are having future frame version and what are the legality status of these cards?",
        "hint": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';",
        "error_sql": "SELECT COUNT(DISTINCT T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal' GROUP BY T2.status;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, especially when using aggregate functions like `COUNT`, be mindful of how grouping and selecting columns interact. Ensure that any column not used in `GROUP BY` is an aggregate or is functionally dependent on the grouped columns. If you need to count distinct records without further grouping or filtering, focus on the relevant criteria directly without unnecessary complexity in the joins. Always test simpler versions of the query to confirm results before adding joins or complex clauses.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "difficulty": "simple"
    },
    {
        "question": "What are the cards for set OGW? State the colour for these cards.",
        "hint": "set OGW refers to setCode = 'OGW';",
        "error_sql": "SELECT name, colors FROM cards WHERE setCode = 'OGW'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are joining tables appropriately when querying related data. When filtering on attributes like `setCode`, ensure that you check the correct table that contains that attribute, and use subqueries or joins to connect the relevant tables. This will help prevent missing or incorrect data due to bad filtering or incorrect table references.",
        "ground_truth_sql": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "difficulty": "simple"
    },
    {
        "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
        "hint": "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;",
        "error_sql": "SELECT T1.name, T2.language FROM cards AS T1 \nINNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode \nWHERE T1.setCode = '10E' AND T1.convertedManaCost = 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your JOIN conditions use the correct key columns that relate the tables logically. In this case, the `setCode` in the `cards` table doesn't match directly with the `setCode` in `set_translations` based on the `uuid` in the `cards` table. It\u2019s crucial to understand the relationships between tables. Use explicit joins or subqueries to make sure you\u2019re connecting the correct data points.",
        "ground_truth_sql": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "difficulty": "simple"
    },
    {
        "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "hint": "Creature - Elf is the originalType;",
        "error_sql": "SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you specify the correct columns in your SELECT statement. In the context of SQL JOINs, make sure you're selecting the columns needed for your result set, and verify that any constraints (like `WHERE` conditions) accurately reflect the data relationships. It's also important to check if the columns used in conditions allow null values and adjust your logic accordingly. If unsure, reviewing the table schema can help confirm the necessary columns are included.",
        "ground_truth_sql": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "difficulty": "simple"
    },
    {
        "question": "What are the colors of cards from ID 1-20? What are the format of these cards?",
        "hint": "ID 1-20 refers to id BETWEEN 1 and 20;",
        "error_sql": "SELECT colors, uuid FROM cards WHERE id BETWEEN 1 AND 20;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways consider the relationships between tables and ensure to join them appropriately to extract the required related information, especially when dealing with multiple attributes across different tables. Check your query against the schema to confirm whether you need to join or aggregate data from related tables.",
        "ground_truth_sql": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "difficulty": "simple"
    },
    {
        "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
        "hint": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "error_sql": "SELECT T1.uuid, T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to return the correct data type or structure required by the query. If the goal is to fetch distinct values or specific attributes (like card names), explicitly state them in the SELECT clause. Additionally, double-check conditions for filtering, ensuring they align with the desired results (e.g., using `=` for exact matches rather than `LIKE` unless necessary).",
        "ground_truth_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "difficulty": "moderate"
    },
    {
        "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
        "hint": "uncommon refers to rarity = 'uncommon';",
        "error_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways consider using `DISTINCT` in your SELECT statements when joining multiple tables, especially when there might be one-to-many relationships, such as when one card can have multiple rulings. This helps ensure that you don't retrieve duplicate rows in your results.",
        "ground_truth_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question": "On how many cards designed by John Avon is its foil non-powerful?",
        "hint": "John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL \n",
        "error_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NULL AND cardKingdomFoilId IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, clearly define the logical conditions you intend to check, especially when dealing with NULL conditions. Use comments or organize your thought process to ensure you correctly interpret the requirements. Additionally, be cautious of AND/OR logic in conditional statements, as they can change the meaning significantly. Always double-check whether you need the presence or absence of certain values, particularly when determining the desired criteria for counts or selections.",
        "ground_truth_sql": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'",
        "difficulty": "simple"
    },
    {
        "question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "hint": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "error_sql": "SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to handle data types correctly in your SQL queries, especially when summing values. In this case, `manaCost` should be parsed to a numerical type if it's stored as text. Checking for NULL values and ensuring the correct type are crucial to avoid errors in calculations.",
        "ground_truth_sql": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "difficulty": "simple"
    },
    {
        "question": "Lists all types of cards available in arena.",
        "hint": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "error_sql": "SELECT DISTINCT subtypes AS types FROM cards WHERE availability = 'arena' UNION SELECT DISTINCT supertypes AS types FROM cards WHERE availability = 'arena'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the data being queried is properly filtered for NULL values, especially when using `UNION` or `DISTINCT`, as NULLs can affect the results and lead to incomplete outputs. Additionally, verify that you are selecting all necessary columns for the intended output, combining them correctly while maintaining their contexts.",
        "ground_truth_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "Calculate the percentage of cards in Spanish. List them by name.",
        "hint": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "error_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Spanish' GROUP BY T1.name;",
        "compiler_hint": "ambiguous column name: name",
        "reflective_cot": "### Tip:\nAlways qualify your column names with their table aliases when working with joins, especially if the same column name exists in multiple tables. This helps prevent ambiguity errors and ensures clarity in your SQL queries.",
        "ground_truth_sql": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
        "difficulty": "simple"
    },
    {
        "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
        "hint": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
        "error_sql": "SELECT COUNT(*) FROM set_translations WHERE language = 'Portuguese (Brasil)' AND setCode IN (SELECT code FROM sets WHERE block = 'Commander')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are using the correct table columns and aliases consistently, especially when dealing with joins or subqueries. Pay close attention to the language and regional variations in naming (e.g., \"Portuguese (Brasil)\" vs. \"Portuguese (Brazil)\") to avoid mismatches.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
        "difficulty": "moderate"
    },
    {
        "question": "Lists by ID all Creature-type cards with legal status.",
        "hint": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "error_sql": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'legal' AND T1.types = 'Creature';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, ensure you are referencing all necessary tables and their relationships. In this case, both the \"legalities\" and \"rulings\" tables needed to be incorporated to properly filter the results. Always double-check the relationships and intended filters to avoid missing important joins or conditions.",
        "ground_truth_sql": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "difficulty": "simple"
    },
    {
        "question": "How many unknown power cards contain info about the triggered ability",
        "hint": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
        "error_sql": "SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to join tables correctly when querying related data. In this scenario, the information about \"triggered ability\" is not in the same table as the card power details, so an appropriate JOIN is required to access the relevant fields from both tables. Verify the relationships and data sources in your schema before forming queries to avoid missing or incorrect data.",
        "ground_truth_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
        "difficulty": "moderate"
    },
    {
        "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
        "hint": "",
        "error_sql": "SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying related data across multiple tables, ensure you consider all relevant fields for filtering. In this case, using `LIKE` with the correct field (`flavorText`) instead of `text`, along with an `INNER JOIN` for better clarity and performance, helps in accurately retrieving the desired result. Always double-check the field names and ensure you're joining tables correctly to maintain the integrity of the query.",
        "ground_truth_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'",
        "difficulty": "simple"
    },
    {
        "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
        "hint": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
        "error_sql": "SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Creature' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T2.language = 'French' AND T1.artist = 'Matthew D. Wilson'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to check the exact names of columns in the database schema (e.g., \"types\" vs. \"type\") and ensure the conditions in your query align precisely with the intended filters. Using the correct naming conventions and ensuring all filters are consistent will help avoid errors in your SQL statements.",
        "ground_truth_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "difficulty": "moderate"
    },
    {
        "question": "What percentage of cards with format commander and legal status do not have a content warning?",
        "hint": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "error_sql": "SELECT (COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(T1.id)) AS percentage \nFROM cards AS T1 \nINNER JOIN legalities AS T2 ON T1.uuid = T2.uuid \nWHERE T2.format = 'commander' AND T2.status = 'legal';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to handle NULL values and the data types relevant to your calculations correctly. When counting conditions within aggregates, make sure to cast your results appropriately, and consider using `SUM` for counting conditions rather than `COUNT`, as it allows for explicit control over handling different cases. This will help to avoid errors in your calculations and produce accurate results.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage of Japanese translated sets are expansion sets?",
        "hint": "Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.language) \nFROM set_translations AS T1 \nINNER JOIN sets AS T2 ON T1.setCode = T2.code \nWHERE T1.language = 'Japanese' AND T2.type = 'expansion'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways clearly define the context for each COUNT() and ensure that the conditions applied in your SUM() and COUNT() functions align correctly with the desired criteria. In this case, ensure you're counting all Japanese translations while only summing those that are expansions. Double-checking JOIN conditions and carefully structuring your WHERE clause can help prevent logical errors in your SQL queries.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'",
        "difficulty": "moderate"
    },
    {
        "question": "What kind of printing is on the card that Daren Bader created?",
        "hint": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "error_sql": "SELECT availability FROM cards WHERE artist = 'Daren Bader' LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways consider using `DISTINCT` when querying for unique values, especially when dealing with attributes that may have multiple entries for a single entity, like an artist. This ensures you retrieve all unique variations of that attribute without duplicates.",
        "ground_truth_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "difficulty": "simple"
    },
    {
        "question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.",
        "hint": "poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "error_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SQL query selects all necessary fields required for your analysis. In this case, you needed to retrieve both `cardKingdomFoilId` and `cardKingdomId` to correctly identify the powerful pairs of cards. Additionally, ensure that you define the primary criteria for sorting and grouping based on the relevant fields instead of just the `id` if you aim to analyze relationships between multiple columns.",
        "ground_truth_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
        "hint": "don't have multiple faces on a single card side is null",
        "error_sql": "SELECT number FROM cards WHERE otherFaceIds IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering for specific combinations of values in a column (like subtypes), ensure you are accurately counting occurrences and considering the exact format of the data. In this case, use equality checks for specific combinations (e.g., `subtypes = 'Angel,Wizard'`) rather than using `LIKE` or counting elements, which can lead to incorrect results. Always examine the data structure and values to confirm the best approach for querying.",
        "ground_truth_sql": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
        "difficulty": "simple"
    },
    {
        "question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
        "hint": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''",
        "error_sql": "SELECT code, name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you include all necessary columns in your SELECT statement based on your requirements. In this case, while you focused on retrieving the `code` and `name`, omitting the correct ORDER BY clause for correct sorting and filtering nuances led to confusion. Double-check the query logic and the expected output structure before assuming correctness.",
        "ground_truth_sql": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
        "hint": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'",
        "error_sql": "SELECT language FROM set_translations WHERE setCode = 'ARC' AND id IN (SELECT id FROM sets WHERE mcmName = 'Archenemy')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are referencing the correct columns in your queries and make sure to perform joins between tables based on their relationships. In this case, instead of using `id` to filter the `set_translations`, the correct approach is to join the `sets` table with the `set_translations` table directly using the `setCode`. This ensures that you are accessing relevant data accurately by leveraging the relational structure of the database.",
        "ground_truth_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the name of set number 5 and its translation?",
        "hint": "set number 5 refers to id = 5",
        "error_sql": "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying data, ensure that you use the correct field or table for filtering criteria. In this case, filtering by `sets.id = 5` should be done in the main table of interest, but the original query's join condition should have matched properly with the translation table. It\u2019s important to double-check that your JOIN conditions and WHERE clauses are aligned with the correct logical relationships in your data structure. Always validate if you're referencing the correct identifiers in the filtering clauses versus join conditions.",
        "ground_truth_sql": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "difficulty": "simple"
    },
    {
        "question": "What is the language and expansion type of set number 206?",
        "hint": "set number 206 refers to id = 206",
        "error_sql": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 206",
        "compiler_hint": "no such column: T1.language",
        "reflective_cot": "### Tip:\nAlways double-check the column names and table structures in your queries; be careful to use the correct table or join keys when referencing specific identifiers like `id`. Make sure to review the schema thoroughly to avoid referencing non-existent columns or incorrectly targeting the data you intend to query.",
        "ground_truth_sql": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
        "difficulty": "simple"
    },
    {
        "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "hint": "",
        "error_sql": "SELECT T1.id, T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.block = 'Shadowmoor' ORDER BY T1.code LIMIT 2",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you're joining tables based on the correct relationships and using the appropriate fields for your queries. In this case, the initial query mistakenly incorporated an unnecessary join that did not align with the requested data (foreign_data table). Always double-check the relationships between tables and the specific fields you should be comparing to avoid incorrect joins that complicate the query without providing the intended results.",
        "ground_truth_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "difficulty": "simple"
    },
    {
        "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
        "hint": "available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'",
        "error_sql": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.isForeignOnly = 1 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the logical conditions in the WHERE clause to ensure they align with the requirements of the query. Pay careful attention to whether the parameters should be 0 or 1. In this case, \u201cavailable outside of the United States\u201d should correspond to `isForeignOnly = 1`, not `isForeignOnly = 0`.",
        "ground_truth_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "difficulty": "challenging"
    },
    {
        "question": "Which Russian set of cards contains the most cards overall?",
        "hint": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
        "error_sql": "SELECT T1.name, MAX(T1.baseSetSize) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.name ORDER BY MAX(T1.baseSetSize) DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for aggregated data, make sure to use the correct grouping and selection criteria. In your first query, you grouped by `T1.name` but tried to order by an aggregate function (`MAX(T1.baseSetSize)`), while in the second query, you grouped by `T1.id` but didn't include `T1.baseSetSize` correctly. Always clearly identify which columns contribute to your aggregate functions and ensure your grouping aligns with what you're selecting, especially when using `ORDER BY` with aggregates. Use `GROUP BY` on the right field to ensure the results align with your `ORDER BY` logic.",
        "ground_truth_sql": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
        "hint": "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isOnlineOnly = 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the logic and the table joins in your SQL queries correctly reflect the relationships between the data you're interested in. Specifically, when filtering and counting based on multiple conditions across different tables, double-check your joins and aggregate functions to ensure they align with your intended calculations. Additionally, be mindful of which tables are being referenced in the COUNT function; using COUNT(*) counts all rows, while COUNT(column) only counts non-null occurrences, which can affect the overall results if not used appropriately.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
        "difficulty": "moderate"
    },
    {
        "question": "How many card border with black color ? List out the card id.",
        "hint": "border with black color refers to borderColor = 'black'",
        "error_sql": "SELECT COUNT(*) AS count_black_border, GROUP_CONCAT(id) AS card_ids FROM cards WHERE borderColor = 'black';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the SQL query output requirements: if you need a list of specific ids, ensure to directly select those ids without using aggregation functions like COUNT() or GROUP_CONCAT() unless explicitly needed. Additionally, when intending to count rows, ensure to separate that logic from fetching individual records to avoid confusion.",
        "ground_truth_sql": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
        "difficulty": "simple"
    },
    {
        "question": "Among black card borders, which card has full artwork?",
        "hint": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1",
        "error_sql": "SELECT * FROM cards WHERE borderColor = 'black' AND isFullArt = 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways clarify the specific columns you want to retrieve from the database. If you only need certain identifiers or attributes (like `id`), specify them in your SELECT statement to avoid unnecessary data retrieval and streamline the query.",
        "ground_truth_sql": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
        "difficulty": "simple"
    },
    {
        "question": "Which foreign language used by \"A Pedra Fellwar\"?",
        "hint": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "error_sql": "SELECT language FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'A Pedra Fellwar')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying related information across multiple tables, ensure you're using the correct keys and fields that establish the relationship. Specifically, verify that you select the appropriate field in the `WHERE` clause that directly matches your desired results. In this case, `name` should be the key field from `foreign_data`, not reliant solely on the `uuid` from `cards`. This will help prevent mismatched or incomplete results.",
        "ground_truth_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "difficulty": "simple"
    },
    {
        "question": "State the set code of the set with release date of 07/13/2007?",
        "hint": "",
        "error_sql": "SELECT code FROM sets WHERE releaseDate = '2007-07-13'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways consider that additional related information may be present in other tables, especially when the desired information is tied to translations or specific attributes like set codes. To avoid missing crucial details, ensure to check for required join conditions with relevant tables before finalizing your SQL query.",
        "ground_truth_sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "difficulty": "simple"
    },
    {
        "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
        "hint": "",
        "error_sql": "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the relationships between tables and ensure you join tables correctly when needed. In cases where additional context or data is required from another table, such as translations or related attributes, consider whether a simple selection from a single table is sufficient or if joins are necessary to retrieve comprehensive results.",
        "ground_truth_sql": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
        "difficulty": "simple"
    },
    {
        "question": "Give the code of sets have expansion type of 'expansion'?",
        "hint": "code of sets refers to setCode",
        "error_sql": "SELECT code FROM sets WHERE type = 'expansion'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, always ensure to reference the correct column names as defined in the database schema. Specifically, when retrieving values that may be stored in a related table (like translations), make sure to incorporate joins to access those additional columns properly. Additionally, check if any grouping or filtering is required based on related data to avoid omitting necessary context from your query.",
        "ground_truth_sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
        "difficulty": "simple"
    },
    {
        "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
        "hint": "",
        "error_sql": "SELECT T2.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros';",
        "compiler_hint": "near \"INNER\": syntax error",
        "reflective_cot": "### Tip:\nAlways ensure that the `JOIN` keyword is placed correctly; it should precede the `FROM` clause. Additionally, when using `SELECT`, make sure to fully specify which table you are referencing to avoid ambiguity. It\u2019s useful to check the overall structure of the SQL statement for errors in syntax or order of clauses.",
        "ground_truth_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "difficulty": "simple"
    },
    {
        "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
        "hint": "",
        "error_sql": "SELECT T2.language, T2.flavorText, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to clearly understand the requirements of your SQL query. In this case, the ground truth SQL was focused solely on distinct values for language and flavor text, which were necessary for the requirement. The first two queries included unnecessary columns which may cause confusion. When constructing queries, prioritize the core requirements specified, and validate each part against the expected output. This will help ensure you don\u2019t include irrelevant data and avoid mistakes in your results.",
        "ground_truth_sql": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "difficulty": "simple"
    },
    {
        "question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?",
        "hint": "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) \nFROM cards AS T1 \nINNER JOIN sets AS T2 ON T1.setCode = T2.code \nWHERE T2.name = 'Abyssal Horror'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are filtering on the correct column names and values related to the context of your query. In the case of your query, the first version incorrectly filtered by `T2.name`, where it should have referenced the `sets` table correctly (with columns like `code`), and later forgot to include the card name in the final selection clarification. Always double-check that the logical conditions align accurately with the data structure and intended information retrieval.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'",
        "difficulty": "moderate"
    },
    {
        "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
        "hint": "",
        "error_sql": "SELECT DISTINCT T2.name, T1.types FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are selecting the correct columns from the appropriate tables based on the desired results. In this case, the correct columns to retrieve were from the \"cards\" table for the card name and type, rather than foreign data. Always double-check the context of your query and the specific fields you need based on the requirements.",
        "ground_truth_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "difficulty": "simple"
    },
    {
        "question": "Among the cards with a white border color, how many of them have unknown power?",
        "hint": "unknown power refers to power = '*' or power is null",
        "error_sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific patterns in text data, using `LIKE` for partial matches can be more effective than direct equality checks. Additionally, ensure to consider alternative ways to represent \"unknown\" values, such as using wildcard characters or more complex conditions. Always think about edge cases and thoroughly test your queries to catch potential logic errors.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'",
        "difficulty": "simple"
    },
    {
        "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?",
        "hint": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'",
        "error_sql": "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen checking for multiple values within a single column, ensure you understand the format of the data stored. Use `LIKE` with multiple conditions combined with `AND` to isolate each needed part. However, it may be more efficient to check if the complete substring exists first, or use a different method to count occurrences if the data format allows. Always consider revising the condition logic to ensure it accurately reflects the original requirements.",
        "ground_truth_sql": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
        "difficulty": "simple"
    },
    {
        "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?",
        "hint": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'",
        "error_sql": "SELECT COUNT(T2.id) FROM set_translations AS T2 WHERE T2.setCode IN (SELECT DISTINCT T1.setCode FROM cards AS T1 WHERE T1.name = 'Angel of Mercy')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways consider the uniqueness of the values you want to count. In this case, counting distinct translations is crucial to avoid duplicates, which can lead to incorrect results. Using `COUNT(DISTINCT ...)` ensures that each unique translation is only counted once.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
        "hint": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
        "error_sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to validate the table relationships and understand the specific columns needed for your query. For this case, the original queries did not consider the relationship between `cards` and `set_translations` to check for translations properly. Always verify that you're querying the correct tables with the right conditions related to the desired results. When checking for translations, make sure to join on a relevant table directly linked to the language and use aggregate functions effectively to summarize results when needed.",
        "ground_truth_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
        "hint": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
        "error_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'Adam Rex' AND id IN (SELECT id FROM set_translations WHERE translation = 'Hauptset Zehnte Edition')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering data from multiple tables, ensure you use proper JOINs instead of subqueries to relate the tables based on their relationships. This allows you to directly count the relevant records across tables, leading to accurate results. Always verify the field names used for filtering match the columns present in the tables involved in the query.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "difficulty": "moderate"
    },
    {
        "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "hint": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "error_sql": "SELECT CASE WHEN COUNT(DISTINCT s.code) > 0 THEN 'Yes' ELSE 'No' END AS appears_on_mtgo \nFROM sets s \nJOIN cards c ON s.code = c.setCode \nWHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your query returns the desired output format directly, especially when dealing with conditions that could return multiple rows or NULL values. Consider using scalar functions like `IIF` or `CASE` carefully, and validate your expected output types. Also, verify if your condition directly influences the outcome in a straightforward way, making sure to account for potential NULL checks in critical filters.",
        "ground_truth_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "difficulty": "moderate"
    },
    {
        "question": "When was the set of cards with \"Ancestor's Chosen\" released?",
        "hint": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate",
        "error_sql": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen' LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways consider the possibility of duplicate entries in the result set when querying data from joined tables. Using `SELECT DISTINCT` ensures that only unique values are returned, which helps prevent redundancy and provides clearer results, especially when dealing with data that may have multiple entries for the same criteria.",
        "ground_truth_sql": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
        "difficulty": "simple"
    },
    {
        "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
        "hint": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
        "error_sql": "SELECT T1.isForeignOnly FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Adarkar Valkyrie' LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the query directly checks the relevant attribute of the intended table by correctly joining and filtering the necessary conditions. In this case, verify that you are checking the `isForeignOnly` attribute from the `sets` table, while accurately linking it to the specific card using its properties. Additionally, using functions like `IIF` or other conditionals directly in your SELECT statements can help clarify the results you expect.",
        "ground_truth_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
        "difficulty": "moderate"
    },
    {
        "question": "How many cards in the set Coldsnap have a black border color?",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'",
        "error_sql": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND uuid IN (SELECT uuid FROM sets WHERE name = 'Coldsnap')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying related tables for specific criteria, ensure you are joining the tables correctly and referencing appropriate columns for conditions. Specifically, make sure you're using foreign keys correctly to link records between tables. In this case, use the correct columns from both tables to join them (e.g., `sets.code` with `cards.setCode`) rather than filtering on `uuid`, which does not relate the two tables. Always verify the relationships and structure of the tables before constructing your SQL queries.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "difficulty": "simple"
    },
    {
        "question": "What is card number 4 in the set Coldsnap?",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "error_sql": "SELECT T1.id FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = '4'",
        "compiler_hint": "ambiguous column name: id",
        "reflective_cot": "### Tip:\nTo avoid ambiguous column name errors, always use table aliases to fully qualify column names when certain column names may exist in more than one table involved in the query. This practice will eliminate confusion and make your SQL statements clearer and less prone to errors. Additionally, ensure that you are querying with the correct data type (for example, use integers for numeric comparisons instead of strings).",
        "ground_truth_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
        "difficulty": "simple"
    },
    {
        "question": "What's the German type of the card \"Ancestor's Chosen\"?",
        "hint": "German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'",
        "error_sql": "SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to use `DISTINCT` when querying for unique values from two joined tables if there's a possibility of duplicate results. In this case, using `DISTINCT` avoids returning duplicate types for the same card name and language combination.",
        "ground_truth_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'",
        "difficulty": "simple"
    },
    {
        "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "error_sql": "SELECT T2.text FROM rulings AS T2 INNER JOIN cards AS T1 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code INNER JOIN foreign_data AS T4 ON T1.uuid = T4.uuid WHERE T3.name = 'Coldsnap' AND T4.language = 'Italian';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you reference the correct table in your SELECT statement, especially when differentiating between aliases for the same column name in multiple joined tables. Review the intended columns and their respective tables carefully to avoid ambiguity and ensure accurate data retrieval. Additionally, using `DISTINCT` can help in cases where duplicate values may be present in your result set, such as when joining multiple tables.",
        "ground_truth_sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "difficulty": "moderate"
    },
    {
        "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
        "hint": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "error_sql": "SELECT T1.name FROM foreign_data AS T1 \nINNER JOIN cards AS T2 ON T2.uuid = T1.uuid \nINNER JOIN sets AS T3 ON T3.code = T2.setCode \nWHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' \nAND T2.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find specific characteristics like the highest value of a column, it's best to retrieve all relevant records first and then sort or filter based on that characteristic. In your case, instead of trying to directly compare with the maximum value, you could have ordered the results by the desired column and limited to the top result. This ensures you don't miss any relevant data and helps in achieving the correct outcome.",
        "ground_truth_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
        "difficulty": "moderate"
    },
    {
        "question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.",
        "hint": "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;",
        "error_sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that you are incorporating all necessary conditions clearly and correctly reflect the requirements of the task. In the initial SQL queries, the check for missing or degraded properties (i.e., `hasContentWarning = 1`) should have been a distinct output value rather than filtering the results. Always clarify whether you need to filter results or simply indicate properties in the output. To avoid similar mistakes, carefully read and break down the question into specific requirements before formulating your query.",
        "ground_truth_sql": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'",
        "difficulty": "challenging"
    },
    {
        "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "hint": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "error_sql": "SELECT T3.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T1.language = 'French'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're joining the appropriate tables based on the specific relationship you're trying to utilize. In your case, the translation of the set name was present in the `set_translations` table, not directly in the `sets` table. Thus, when looking for translations related to a set, make sure to first gather necessary translations and then link them correctly with the original identifiers from the corresponding tables. This prevents missing relationships or mismatching labels in queries.",
        "ground_truth_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "hint": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "error_sql": "SELECT T3.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Fellwar Stone' AND T3.language = 'Japanese'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting the correct fields from the appropriate tables. When joining multiple tables, double-check that each join condition accurately reflects the relationships and that you are selecting from the correct table for the desired output. In this case, specifying the correct translation table and ensuring you access the right columns can prevent confusion.",
        "ground_truth_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "What is the most common visual frame effects among the incredibly powerful foils?",
        "hint": "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)",
        "error_sql": "SELECT frameEffects, COUNT(*) as count FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY count DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen working with SQL aggregation and grouping, ensure you're using the correct aggregate functions (like COUNT) on the columns you're interested in. In the case of your query, to find the most common visual frame effects, you needed to count occurrences of each `frameEffects` entry rather than grouping directly by it without an aggregate function. Always double-check that you're using aggregate functions correctly with the appropriate grouping to achieve the desired result.",
        "ground_truth_sql": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many cards with unknown power that can't be found in foil is in duel deck A?",
        "hint": "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'",
        "error_sql": "SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'A'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the case sensitivity of string comparisons aligns with the defined values in the database. In this case, the value for `duelDeck` was incorrectly referenced as 'A' instead of 'a'. It's crucial to check and adhere to the correct casing when querying string data, as SQL may consider 'A' and 'a' to be different values.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'",
        "difficulty": "simple"
    },
    {
        "question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?",
        "hint": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)",
        "error_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY LENGTH(T1.manaCost) DESC LIMIT 10;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you're working with the correct data types and aggregation methods when dealing with metrics like cost. In this case, using `manaCost` directly, which is a string, led to incorrect ordering. Instead, convert it to a numerical format or use a relevant function that accurately represents the intended comparison \u2014 for example, using a function to parse the mana cost into a comparable format before ordering.",
        "ground_truth_sql": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10",
        "difficulty": "simple"
    },
    {
        "question": "When was the oldest mythic card released and what are its legal play formats?",
        "hint": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "error_sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards WHERE rarity = 'mythic') AND T2.status = 'legal';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries that involve comparisons using aggregate functions or subqueries, ensure that the logic accurately captures the intended relationships and conditions. Specifically, avoid grouping or aggregating results in a way that may obscure individual records relevant to the query. For instance, instead of trying to group by formats when looking for a single oldest card, explicitly filter and order your results to isolate the record of interest. Always validate your conditions properly against the data structure and the requirements.",
        "ground_truth_sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many rare enchantment Abundance cards are there whose play format status are all legal?",
        "hint": "rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'",
        "error_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen counting items with specific attributes that must meet multiple conditions, ensure that you are correctly accounting for unique instances across the relevant tables without unnecessary groupings or counts. Use direct filtering criteria in the WHERE clause to handle status checks effectively, and avoid over-complicating the query with GROUP BY and HAVING if they aren't needed for the desired outcome. Always test with simpler conditions to validate the logic before enhancing the query complexity.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "difficulty": "moderate"
    },
    {
        "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
        "hint": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
        "error_sql": "SELECT T2.format, GROUP_CONCAT(T1.name) AS banned_cards \nFROM cards AS T1 \nINNER JOIN legalities AS T2 ON T1.uuid = T2.uuid \nWHERE T2.status = 'Banned' \nGROUP BY T2.format \nORDER BY COUNT(T2.status) DESC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that subqueries or Common Table Expressions (CTEs) used for calculations (like counting) are correctly linked to the outer query and properly filter results, especially when grouping or aggregating data. Double-check the logic of how aggregate functions and groupings relate to the overall query context to avoid mismatches in expected results.",
        "ground_truth_sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the language of the \"Battlebond\" set?",
        "hint": "\"Battlebond\" set refers to name = 'Battlebond'",
        "error_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying related data across multiple tables, ensure to use primary key references appropriately, and consider filtering directly in the table with the desired data instead of relying solely on joins. In cases where you need to filter by the properties of related tables, it's often simpler and more efficient to first narrow down to the specific IDs of interest before joining, as shown in the Ground Truth SQL.",
        "ground_truth_sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )",
        "difficulty": "simple"
    },
    {
        "question": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.",
        "hint": "format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)",
        "error_sql": "SELECT T1.artist, T2.format \nFROM cards AS T1 \nINNER JOIN legalities AS T2 ON T1.uuid = T2.uuid \nGROUP BY T1.artist \nHAVING COUNT(T1.uuid) = (SELECT MIN(card_count) \n                          FROM (SELECT COUNT(uuid) AS card_count \n                                FROM cards \n                                GROUP BY artist));",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that when using aggregate functions like `COUNT()` in conjunction with `GROUP BY`, the returned data takes into account the correct ordering and limiting logic to avoid incorrect groupings that may misrepresent the results. Specifically, when aiming to find the minimum count, consider using `ORDER BY` and `LIMIT` to pinpoint the lowest group rather than relying solely on HAVING clauses.",
        "ground_truth_sql": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
        "hint": "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))",
        "error_sql": "SELECT AVG(T1.id), (SELECT language FROM foreign_data GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1) \nFROM sets AS T1 \nWHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you properly align the join conditions and aggregate functions with your filtering criteria. When calculating averages or aggregates, especially over multiple years, consider how you group your data to avoid misrepresentations. Using `SUM` and `COUNT` separately can provide a more accurate average and ensure that you are aggregating over the correct set of data. Additionally, validate your conditions and ensure you are joining the correct tables relevant to your query requirements.",
        "ground_truth_sql": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "Find the uuid of cards in which the old school format is restricted or banned.",
        "hint": "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'",
        "error_sql": "SELECT T1.uuid FROM legalities AS T1 WHERE T1.format = 'oldschool' AND (T1.status = 'banned' OR T1.status = 'restricted')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways check the case sensitivity of string comparisons in SQL, as some databases treat strings differently based on their case. Ensure that your conditions match the exact values in the database, taking into account uppercase and lowercase letters. Use functions like `UPPER()` or `LOWER()` if necessary to normalize case when performing comparisons.",
        "ground_truth_sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
        "difficulty": "simple"
    },
    {
        "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
        "hint": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
        "error_sql": "SELECT DISTINCT T1.name FROM sets AS T1 \nINNER JOIN set_translations AS T2 ON T1.code = T2.setCode \nWHERE T2.language = 'Korean' \nAND T1.code NOT IN (SELECT setCode FROM set_translations WHERE language = 'Japanese')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that your SQL queries accurately capture the logical requirements of the task. Use clear conditions and check the relationship between tables properly. In the situation given, be careful with how subqueries and conditions interact. Specifically, when filtering for one language while excluding another, make sure your logic distinctly highlights that both conditions are independent but related to the same data set. Always test the subqueries separately to verify they return the expected results before integrating them into the main query.",
        "ground_truth_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
        "difficulty": "moderate"
    },
    {
        "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "hint": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "error_sql": "SELECT DISTINCT frameVersion, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' AND T2.status = 'Banned'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to clearly define the output and conditions in your SQL queries. When combining conditions or using nested queries, always check the logical flow and whether the structure allows the retrieval of desired results. Using conditional expressions (like `IIF`) or `JOINs` judiciously can help derive the correct relationships and prevent missing vital information. Familiarize yourself with the database schema thoroughly to align your query with the intended results.",
        "ground_truth_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "difficulty": "moderate"
    },
    {
        "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
        "hint": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
        "error_sql": "SELECT T1.DisplayName, T1.Reputation \nFROM users AS T1 \nWHERE T1.DisplayName IN ('Harlan', 'Jarrod Dixon') \nORDER BY T1.Reputation DESC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure your query correctly filters based on the condition of obtaining the maximum value, especially when comparing specific records. Utilize subqueries wisely to determine the maximum value for the specified conditions, allowing for accurate retrieval of the desired result. This avoids cases where you might only order by a value without directly filtering for the maximum.",
        "ground_truth_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
        "difficulty": "simple"
    },
    {
        "question": "How many users last accessed the website after 2014/9/1?",
        "hint": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
        "error_sql": "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are using the correct datatype and any necessary functions when comparing date values in SQL. If working with date and time fields, consider utilizing appropriate date functions or casting to ensure accurate comparisons, as SQL may treat date strings differently depending on the context.",
        "ground_truth_sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "difficulty": "simple"
    },
    {
        "question": "How many users with more than 10 views created their account after the year 2013?",
        "hint": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013",
        "error_sql": "SELECT COUNT(Id) FROM users WHERE Views > 10 AND date(CreationDate) > '2013-01-01'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are using the correct date format and functions specific to your SQL database system. For date comparisons, make sure to extract and compare only the relevant components (like years) appropriately, and remember to check the inclusive/exclusive nature of your comparison. Using functions like `STRFTIME` can help accurately analyze the year or other specific components of dates.",
        "ground_truth_sql": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
        "difficulty": "simple"
    },
    {
        "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "hint": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "error_sql": "SELECT OwnerDisplayName FROM posts WHERE Title = 'Eliciting priors from experts'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to check for relationships between tables when querying for data that involves multiple entities. In cases where data is spread across linked tables, using appropriate JOINs is essential to retrieve related information accurately. This will prevent missing critical details such as display names or other attributes that are not in the primary table being queried.",
        "ground_truth_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "difficulty": "simple"
    },
    {
        "question": "What is the display name of the user who is the owner of the most valuable post?",
        "hint": "most valuable post refers to Max(FavoriteCount)",
        "error_sql": "SELECT OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to include relevant joins when querying multiple tables to retrieve information related to primary and foreign keys. In this case, joining the `posts` table with the `users` table was essential to obtain the user's display name associated with the post. Review the relationships and dependencies in your database schema before constructing your queries.",
        "ground_truth_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
        "hint": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
        "error_sql": "SELECT (COUNT(T1.Id) * 100.0 / COUNT(*)) AS Percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5 AND T2.Age > 65;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are correctly identifying the conditions for counting specific groups in your SQL queries. In your original queries, you were counting all posts for the percentage calculation instead of counting only those owned by elder users. Use conditional aggregation functions (like `SUM(IIF(...))`) to accurately count specific criteria while handling ratios or percentages, ensuring that the correct logic is applied.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
        "difficulty": "moderate"
    },
    {
        "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
        "hint": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
        "error_sql": "SELECT p.FavoriteCount FROM posts AS p \nINNER JOIN comments AS c ON p.Id = c.PostId \nWHERE c.UserId = 3025 AND c.CreationDate = '2014/4/23 20:29:39.0'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with date and time in SQL, always ensure the format matches the database's expected format. This often includes checking for timezone considerations or fractional seconds. Utilize built-in date functions to confirm proper parsing and to handle any potential formatting issues effectively.",
        "ground_truth_sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
        "difficulty": "moderate"
    },
    {
        "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
        "hint": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
        "error_sql": "SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'Not Well-Finished' ELSE 'Well-Finished' END AS PostStatus \nFROM posts AS T1 \nINNER JOIN comments AS T2 ON T1.Id = T2.PostId \nWHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you consistently use the correct column names and format, especially for datetime values. Double-check that you're referencing the correct table for the intended columns, such as `ClosedDate`, and verify that your `WHERE` clause uses the correct table alias. Always refer to the schema as you write your queries to avoid referencing errors and maintain data integrity.",
        "ground_truth_sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
        "difficulty": "moderate"
    },
    {
        "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
        "hint": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
        "error_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(T2.Id) AS PostVoteRatio FROM posts AS T1 LEFT JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.OwnerUserId = 24",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen joining tables and aggregating data, ensure that you're accurately counting distinct instances where necessary and aligning the logic with the problem requirement. Pay attention to the relationships between tables and the specific entity you're analyzing (in this case, posts and votes by a specific user). Using the correct join type (INNER vs. LEFT) and distinct counts can significantly affect the results. In complicated queries, consider breaking them down into smaller parts to ensure each segment behaves as expected before combining them.",
        "ground_truth_sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
        "difficulty": "moderate"
    },
    {
        "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
        "hint": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; editor refers to DisplayName;",
        "error_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'",
        "compiler_hint": "no such column: T2.LastEditorDisplayName",
        "reflective_cot": "### Tip:\nAlways double-check the column names and their respective table associations when crafting SQL queries. If encountering an error, review the database schema to ensure that you are referencing the correct columns for the desired output. Additionally, clarify whether you need information from the last editor or the original post owner, as their affiliations can differ.",
        "ground_truth_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "difficulty": "moderate"
    },
    {
        "question": "List the title of posts which were edited by Vebjorn Ljosa.",
        "hint": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "error_sql": "SELECT Title FROM posts WHERE LastEditorDisplayName = 'Vebjorn Ljosa'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are referencing the correct columns when forming your SQL queries. In this case, \"LastEditorDisplayName\" does not exist in the \"posts\" table. Instead, you should join the \"posts\" table with the \"users\" table to retrieve the appropriate user details. Always check the schema definitions for the correct fields related to your query conditions.",
        "ground_truth_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "difficulty": "simple"
    },
    {
        "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "hint": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
        "error_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "compiler_hint": "no such column: T2.Text",
        "reflective_cot": "### Tip:\nEnsure that you are referencing the appropriate tables and columns based on the specific data you want to retrieve. In this case, comments related to post edits were found in the `postHistory` table rather than the `comments` table. Familiarize yourself with the schema and ensure that your join conditions and SELECT statements correctly reflect the structure of the database. Always double-check your queries against the schema before execution.",
        "ground_truth_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "difficulty": "moderate"
    },
    {
        "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
        "hint": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
        "error_sql": "SELECT T2.DisplayName \nFROM votes AS T1 \nINNER JOIN posts AS T3 ON T1.PostId = T3.Id \nINNER JOIN users AS T2 ON T1.UserId = T2.Id \nWHERE T1.BountyAmount = 50 AND T3.Title LIKE '%variance%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are clearly understanding the relationships between tables and the specific columns you need to select. When dealing with multiple tables, focus on joining them correctly based on their foreign key relationships and carefully choose the right columns from each table for your WHERE clause to avoid confusion. Additionally, ensure you are referencing the right aliases for your joins, and double-check the logic of any conditions to align with your query's purpose.",
        "ground_truth_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
        "hint": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
        "error_sql": "SELECT T1.Title, T2.Text, AVG(T1.ViewCount) \nFROM posts AS T1 \nINNER JOIN comments AS T2 ON T1.Id = T2.PostId \nINNER JOIN postLinks AS T3 ON T1.Id = T3.PostId \nINNER JOIN tags AS T4 ON T3.RelatedPostId = T4.Id \nWHERE T4.TagName = 'humor' \nGROUP BY T1.Title, T2.Text;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nBe cautious with your JOINs and conditions. Ensure you fully understand the relationships between tables and correctly reference columns, especially when filtering by specific conditions like tags. Always verify the criteria for grouping and aggregating data, such as confirming that fields used in the SELECT clause are appropriately included in the GROUP BY clause.",
        "ground_truth_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
        "difficulty": "moderate"
    },
    {
        "question": "How many users are awarded with more than 5 badges?",
        "hint": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
        "error_sql": "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that when using aggregation functions like `COUNT`, you clearly separate the logic for counting records from the logic for filtering those counts. Consider using subqueries or Common Table Expressions (CTE) to first aggregate the data, and then apply your filtering conditions on the results of that aggregation. This approach provides a clearer structure to your query and helps avoid logical errors in the grouping and filtering process.",
        "ground_truth_sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "difficulty": "simple"
    },
    {
        "question": "How many users from New York have a teacher and supporter badge?",
        "hint": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId",
        "error_sql": "SELECT COUNT(DISTINCT UserId) \nFROM badges AS B \nJOIN users AS U ON B.UserId = U.Id \nWHERE B.Name IN ('Supporter', 'Teacher') AND U.Location = 'New York' \nGROUP BY UserId \nHAVING COUNT(DISTINCT B.Name) = 2;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SQL query retrieves counts correctly by avoiding unnecessary grouping unless it's essential. In cases where you need a count of distinct users with specific conditions, aggregate functions like COUNT should be applied after ensuring that the joins and filters correctly reflect the targeted dataset. Instead of grouping by user ID, consider using a COUNT with appropriate WHERE and having conditions to filter the results directly.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
        "difficulty": "simple"
    },
    {
        "question": "Which user created post ID 1 and what is the reputation of this user?",
        "hint": "",
        "error_sql": "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the context of the query and the specific column relationships between tables. Make sure you're referencing the correct tables and fields pertinent to the task at hand. In this case, you needed to focus on the `posts` table to identify the owner of the post rather than `comments`. When in doubt, review the schema and requirements carefully before constructing your SQL query.",
        "ground_truth_sql": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
        "difficulty": "simple"
    },
    {
        "question": "Which user have only one post history per post and having at least 1000 views?",
        "hint": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
        "error_sql": "SELECT userId FROM postHistory AS T1 \nWHERE PostId IN (SELECT PostId FROM postHistory GROUP BY PostId HAVING COUNT(*) = 1) \nAND UserId IN (SELECT Id FROM users WHERE Views >= 1000) \nGROUP BY UserId;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that all required join conditions are included when working with multiple tables and that you're calculating unique counts correctly. Pay attention to the relationships between tables and aggregate functions to verify that the conditions in your `HAVING` clause accurately reflect the intended logic, particularly when differentiating between distinct entities or groups.",
        "ground_truth_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which users have posted the most comments. List out the user's badge?",
        "hint": "user with the most comments refers to UserId where Max(Count(Id)",
        "error_sql": "SELECT U.DisplayName, B.Name \nFROM users AS U \nINNER JOIN comments AS C ON U.Id = C.UserId \nINNER JOIN badges AS B ON U.Id = B.UserId \nGROUP BY U.Id \nHAVING COUNT(C.Id) = (SELECT MAX(CommentCount) \n                      FROM (SELECT UserId, COUNT(Id) AS CommentCount \n                            FROM comments \n                            GROUP BY UserId));",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that when using GROUP BY with aggregate functions, all selected non-aggregated columns are included in the GROUP BY clause. Additionally, carefully review subqueries to ensure they return the correct aggregation context. When counting or grouping, consider how many entries will be returned and ensure no extraneous grouping occurs that may distort the intended results.",
        "ground_truth_sql": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
        "hint": "post related refers to RelatedPostId; popularity refers to ViewCount",
        "error_sql": "SELECT T1.RelatedPostId, T2.ViewCount \nFROM postLinks AS T1 \nINNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id \nWHERE T1.PostId = 61217",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the SQL query accurately reflects the relationships between tables by appropriately joining tables based on how the data is structured. Additionally, carefully verify the conditions in the `WHERE` clause to ensure they are targeting the correct tables and fields, especially when aliases are used. In this case, confusion arose from misunderstanding which table contained the ViewCount versus RelatedPostId.",
        "ground_truth_sql": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
        "difficulty": "simple"
    },
    {
        "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.",
        "hint": "score more than 60 refers to Score > 60",
        "error_sql": "SELECT T1.Id, T1.OwnerUserId FROM posts AS T1 WHERE T1.Score > 60",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the query context matches your objective. In this case, the original intent was to list the post IDs along with the user IDs of those who created the posts with high scores. While the error SQL correctly retrieved the necessary data from the `posts` table, it did not connect it to the users clearly or adequately address the requirement for completeness. To avoid such mistakes in the future, always double-check that you're including all necessary joins and conditions to meet the query requirements explicitly, and remember to test the logic step-by-step to confirm it aligns with your expected output.",
        "ground_truth_sql": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )",
        "difficulty": "simple"
    },
    {
        "question": "What is the sum of favourite count gained by user ID 686 in 2011?",
        "hint": "in 2011 refers to year (CreatinDate) = 2011",
        "error_sql": "SELECT SUM(FavoriteCount) FROM posts AS T1 INNER JOIN badges AS T2 ON T1.OwnerUserId = T2.UserId WHERE T2.Date BETWEEN '2011-01-01' AND '2011-12-31' AND T2.UserId = 686;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are accurately defining the relationships between tables and the specific criteria needed for your query. Double-check the context of your joins and ensure you are querying the correct tables to capture relevant data. In this case, the favorite counts are associated with posts made by the user, which may be recorded in a separate historical table.",
        "ground_truth_sql": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
        "difficulty": "simple"
    },
    {
        "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
        "hint": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))",
        "error_sql": "SELECT \n    CAST(SUM(T1.UpVotes) AS REAL) / COUNT(T1.Id) AS AverageUpVotes, \n    CAST(SUM(T1.Age) AS REAL) / COUNT(T1.Id) AS AverageAge \nFROM \n    users AS T1 \nINNER JOIN \n    posts AS T2 ON T1.Id = T2.OwnerUserId \nGROUP BY \n    T2.OwnerUserId \nHAVING \n    COUNT(T2.Id) > 10;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen you need to filter results based on aggregate functions like COUNT, it's crucial to use subqueries or Common Table Expressions (CTEs) to first identify the groups that meet your criteria. In this case, creating a separate aggregated subquery to count posts per user helps ensure you filter the users correctly before attempting to aggregate their up votes and ages. Always validate the aggregation layer before performing further calculations.",
        "ground_truth_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
        "difficulty": "moderate"
    },
    {
        "question": "How many users obtained the \"Announcer\" badge?",
        "hint": "\"Announcer\" is the Name of badge; user refers to UserId",
        "error_sql": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you are using the correct column name in your `COUNT` function when calculating distinct values. Instead of counting unique `UserId`s directly, use the appropriate column (e.g., `Id` or any relevant identifier) in your aggregation function to avoid discrepancies with the expected output. Always double-check the requirements for counting distinct entities in your SQL queries.",
        "ground_truth_sql": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
        "difficulty": "simple"
    },
    {
        "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
        "hint": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'",
        "error_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the specific values you use in your SQL queries, especially when dealing with dates and times. Ensure that you are using the correct time and date from the problem statement to avoid querying for the wrong entry. It can be helpful to print out the exact value you are looking for from your source data before constructing your query.",
        "ground_truth_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
        "difficulty": "simple"
    },
    {
        "question": "What are the name of badge that users who have the highest reputation obtained?",
        "hint": "highest reputation refers to Max(Reputation); user refers to UserId",
        "error_sql": "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you fully understand the requirements of the query before crafting the SQL statement. In this case, the goal was to retrieve the badge names for users with the highest reputation, which required sorting and limiting the results correctly rather than directly comparing to the maximum reputation. A good approach is to think about the overall logic and relationships in your database schema, and consider using ordering and limits appropriately to achieve the desired result.",
        "ground_truth_sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
        "hint": "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'",
        "error_sql": "SELECT T1.Score FROM posts AS T1 WHERE T1.CreaionDate = '2010-07-19 19:19:56.0'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are querying the correct table for the information you need. In this case, the initial queries incorrectly targeted the `posts` table instead of the `comments` table. Always cross-reference the schema to verify which table holds the data required for your query, especially when dealing with related entities.",
        "ground_truth_sql": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'",
        "difficulty": "simple"
    },
    {
        "question": "Which users have the highest number of views?",
        "hint": "users have the highest number of views refer to DisplayName where MAX(Views);",
        "error_sql": "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are retrieving rows based on specific conditions or calculations, especially when dealing with aggregations like `MAX()`. When looking for the highest value in a column, use a subquery that selects the maximum value, and then filter the original set with that value to get the corresponding rows. Avoid simply ordering and limiting your results without considering the context of the data you want to retrieve.",
        "ground_truth_sql": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "difficulty": "simple"
    },
    {
        "question": "What is the name of tags used by John Salvatier's?",
        "hint": "DisplayName = 'John Salvatier';",
        "error_sql": "SELECT T.TagName \nFROM tags AS T \nINNER JOIN posts AS P ON T.ExcerptPostId = P.Id \nINNER JOIN users AS U ON P.OwnerUserId = U.Id \nWHERE U.DisplayName = 'John Salvatier';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're linking the correct tables to capture the desired information. If you want to get tags associated with a user, consider all possible relationships the user might have with posts (e.g., through comments or histories) rather than just posts they own. A thorough understanding of the data relationships will help you construct accurate SQL queries.",
        "ground_truth_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "difficulty": "simple"
    },
    {
        "question": "How many posts were created by Daniel Vassallo?",
        "hint": "DisplayName = 'Daniel Vassallo';",
        "error_sql": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you understand the structure of the database and the relationships between tables. In this case, the query attempted to count posts based purely on the `OwnerUserId` in the `posts` table, which is correct, but there might be a misunderstanding about which table holds the relevant data. Make sure to clarify the correct relationships and check if the data resides in a different table or requires joining multiple tables to retrieve the desired information accurately. Always validate the context and data source you are working with before executing your queries.",
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'",
        "difficulty": "simple"
    },
    {
        "question": "How many votes were made by Harlan?",
        "hint": "DisplayName = 'Harlan';",
        "error_sql": "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with multiple tables and relationships, ensure that you are joining the correct tables that correspond to the specific user actions you're querying about. In this case, votes are related to posts, and you need to consider the relationship between votes and users through the related posts or comments. Always check the logical flow of data relationships in your queries to ensure all necessary joins are included.",
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
        "difficulty": "simple"
    },
    {
        "question": "How many posts by Matt Parker have more than 4 votes?",
        "hint": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
        "error_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T1.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Matt Parker' GROUP BY T1.Id HAVING COUNT(T2.Id) > 4",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering or aggregating results from multiple tables, ensure the joins are structured correctly to maintain the relationship between the entities. Make sure to correctly align the grouping and counting context to avoid mismatches. Specifically, always check that you're grouping and counting based on the correct primary entity of interest and include relevant foreign entities appropriately, as they can affect the final counts if misconfigured.",
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "difficulty": "moderate"
    },
    {
        "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "hint": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "error_sql": "SELECT CAST(COUNT(CASE WHEN T2.TagName = 'r' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.OwnerDisplayName = 'Community'",
        "compiler_hint": "no such column: T2.TagName",
        "reflective_cot": "### Tip:\nAlways ensure that your SQL query correctly reflects the relationships between tables and the fields within them. Double-check that you are using the right join conditions and accessing the correct columns from the appropriate tables. Also, make sure to understand the data structure and how different tables are linked, as this will help prevent mistakes like referencing non-existent columns or using incorrect conditions in your WHERE clause.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
        "hint": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
        "error_sql": "SELECT SUM(CASE WHEN U.DisplayName = 'Mornington' THEN P.ViewCount ELSE 0 END) - \n       SUM(CASE WHEN U.DisplayName = 'Amos' THEN P.ViewCount ELSE 0 END) \nFROM posts AS P \nINNER JOIN users AS U ON P.OwnerUserId = U.Id;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are joining the correct tables that directly relate to the data you want to analyze. In this case, since you needed to evaluate posts created by specific users, joining the `users` table with the `posts` table directly is crucial. Additionally, verify if any intermediary tables (like `postHistory`) are necessary for your query based on the relationships outlined in the schema. Understanding the relationships between tables in your schema helps in constructing accurate SQL queries.",
        "ground_truth_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
        "difficulty": "moderate"
    },
    {
        "question": "How many posts were created on 21st July, 2010?",
        "hint": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';",
        "error_sql": "SELECT COUNT(Id) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
        "compiler_hint": "no such column: CreationDate",
        "reflective_cot": "### Tip:\nAlways double-check the column names for typos before writing queries. Using a schema reference or documentation can prevent errors related to non-existing columns, ensuring that your SQL queries are accurately formed from the beginning.",
        "ground_truth_sql": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
        "difficulty": "simple"
    },
    {
        "question": "Describe the post title which got positive comments and display names of the users who posted those comments.",
        "hint": "positive comments refer to Score > 60;",
        "error_sql": "SELECT T1.Title, T2.UserDisplayName \nFROM posts AS T1 \nINNER JOIN comments AS T2 ON T1.Id = T2.PostId \nWHERE T2.Score > 60;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the join conditions are properly specified\u2014make sure you are joining tables using the correct foreign key relationships. Additionally, revisit the logic of the conditions in the WHERE clause to ensure you're filtering based on attributes from the correct tables. In your case, using `T2.Score` instead of `T1.Score` was crucial for getting the desired results.",
        "ground_truth_sql": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60",
        "difficulty": "simple"
    },
    {
        "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
        "hint": "",
        "error_sql": "SELECT COUNT(T2.Id) AS PostHistoryCount, T1.LastEditDate FROM posts AS T1 LEFT JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY T1.LastEditDate",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries that involve aggregation (e.g., using `COUNT()`) and grouping, ensure that all non-aggregated columns in the `SELECT` clause are included in the `GROUP BY` clause. Additionally, double-check the join conditions and the relationships between the tables to ensure you are obtaining the desired data. Always visualize the relationships to clarify how to correctly structure your query.",
        "ground_truth_sql": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "difficulty": "simple"
    },
    {
        "question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "hint": "Outliers is the name of the badge;",
        "error_sql": "SELECT LastAccessDate, Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Outliers'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that string comparisons in SQL are case-sensitive, especially when checking for specific values. Use lower or upper functions to normalize the case before comparison, or input the correct case directly as shown in the ground truth SQL.",
        "ground_truth_sql": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "difficulty": "simple"
    },
    {
        "question": "List the post IDs and badge names of the user Samuel in 2013.",
        "hint": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;",
        "error_sql": "SELECT T1.Id AS PostId, T2.Name AS BadgeName \nFROM posts AS T1 \nINNER JOIN badges AS T2 ON T1.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Samuel') \nWHERE STRFTIME('%Y', T1.CreaionDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013';",
        "compiler_hint": "no such column: T1.CreationDate",
        "reflective_cot": "### Tip:\nEnsure that you are referencing the correct columns and tables for your queries. Pay attention to spelling and syntax, especially with dates and identifiers. When facing errors, consider examining the relationships between tables and clarify what data you truly need before modifying your query. Always verify that the joins you use directly align with the conditions of your question to avoid mismatches or missing data.",
        "ground_truth_sql": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the owner's display name of the most popular post?",
        "hint": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);",
        "error_sql": "SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:   \nAlways ensure you're joining related tables to access foreign key attributes instead of directly querying from a single table. In this case, to obtain the owner's display name, you need to reference the `users` table that contains the `DisplayName` based on the `OwnerUserId` in the `posts` table. Using aggregate functions like `MAX()` or `ORDER BY` can help in identifying records, but remember that you often need to combine these with joins to fetch additional fields from related entities.",
        "ground_truth_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
        "difficulty": "simple"
    },
    {
        "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
        "hint": "Title = 'What are principal component scores?';",
        "error_sql": "SELECT T1.Title, T2.LinkTypeId \nFROM posts AS T1 \nINNER JOIN postLinks AS T2 ON T1.Id = T2.PostId \nWHERE T1.Title = 'What are principal component scores?'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you not only join the original post table with the linking table but also join again with the post table to retrieve the titles of the related posts. This way, you will obtain the necessary information about both the original post and its related posts. Always double-check relationships and the needed joins when querying for related data.",
        "ground_truth_sql": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'",
        "difficulty": "simple"
    },
    {
        "question": "How many posts with votes that were created in 2011 have a bounty of 50?",
        "hint": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;",
        "error_sql": "SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND T1.CreaionDate BETWEEN '2011-01-01' AND '2011-12-31';",
        "compiler_hint": "no such column: T1.CreationDate",
        "reflective_cot": "### Tip:\nAlways verify that you are referencing the correct columns within the appropriate tables in your SQL queries. Pay attention to column names, especially for those involved in joins, and ensure that you are not mistakenly referencing columns from the wrong table. Additionally, be aware of the different functions available in your SQL dialect (like `YEAR()` vs. `STRFTIME()` in SQLite) when filtering dates.",
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'",
        "difficulty": "simple"
    },
    {
        "question": "What is the title of the post with the oldest post link?",
        "hint": "the oldest post link refers to MIN(CreaionDate);",
        "error_sql": "SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are selecting the correct columns from the right tables in your SQL queries. Verify the logic of the JOINs and the conditions in the WHERE clause. In this case, using the correct tables and their relationships while ensuring to check for typos in column names (like \"CreaionDate\") can help avoid errors. When aiming to find minimum values, explicitly confirm that you join the right set of results to fetch the associated values correctly.",
        "ground_truth_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
        "hint": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
        "error_sql": "SELECT COUNT(DISTINCT U.Id) \nFROM users AS U \nINNER JOIN posts AS P ON U.Id = P.OwnerUserId \nWHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the structure of your SQL query matches the intended logic, especially with aggregate functions like `COUNT`. In particular, make use of table aliases consistently and verify that all join operations and conditions are appropriately specified to avoid errors. Additionally, consider aliases that enhance the clarity of your query and help prevent confusion during the debugging process.",
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "difficulty": "moderate"
    },
    {
        "question": "Which post has the highest score? Please give its id and title's name.",
        "hint": "the highest score refers to MAX(Score); owner's name refers to DisplayName;",
        "error_sql": "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to include all necessary joins when querying related data. If your result requires information from multiple tables (like users for display names), make sure to join those tables appropriately in the query, rather than just relying on subqueries for aggregate results.",
        "ground_truth_sql": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
        "hint": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
        "error_sql": "SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE strftime('%Y', T1.CreaionDate) = '2010' ORDER BY T1.FavoriteCount DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you double-check the column names in your SQL queries for typos or inconsistencies, such as \"CreaionDate\" instead of \"CreationDate\". Using SQL IDEs or syntax highlighting can help identify such errors more easily.",
        "ground_truth_sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
        "hint": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
        "error_sql": "SELECT CAST(SUM(IIF(T2.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are referencing the correct table and column names in your SQL statements. Double-check the field being filtered and aggregated. In this case, the reputation check should be on the users table, while the date filtering should be valid for the posts related to the users, and not mistakenly on the wrong fields of the tables. Using aliases consistently can also help clarify which table a specific column belongs to.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the percentage of teenage users.",
        "hint": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;",
        "error_sql": "SELECT COUNT(IIF(Age BETWEEN 13 AND 18, 1, NULL)) * 1.0 / COUNT(Id) AS percentage FROM users;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you use the correct aggregation function and conversion methods when calculating percentages. In SQL, using `SUM()` for counting conditions allows for accurate counting of specific conditions like age ranges, while `COUNT()` alone would not suffice for conditional counting. Additionally, casting results to the appropriate data type (e.g., `REAL`) before performing arithmetic operations is crucial to avoid integer division issues.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
        "difficulty": "simple"
    },
    {
        "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "hint": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "error_sql": "SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets' ORDER BY T1.LastEditDate DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are querying the correct tables and columns based on the specific requirements of the question. For instance, if you need to identify the most recent editor of a post, you should look at the `postHistory` table or check the appropriate fields in the `posts` table rather than solely relying on the title or the owner\u2019s details. Additionally, double-check the relationships and how they connect through foreign keys when aggregating information across multiple tables.",
        "ground_truth_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the total number of posts with views above average.",
        "hint": "views above average refer to ViewCount > AVG(ViewCount);",
        "error_sql": "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the requirements of the SQL query. In this case, the original query was correct in syntax and logic, but it didn't align with the ground truth SQL, which was designed to return the post IDs instead of the count. Ensure that you understand what the query is intended to return, and clarify whether the result should be a count, a list of identifiers, or different aggregations before finalizing the query.",
        "ground_truth_sql": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
        "difficulty": "simple"
    },
    {
        "question": "How many comments were added to the post with the highest score?",
        "hint": "the highest score refers to MAX(Score);",
        "error_sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score = (SELECT MAX(Score) FROM posts);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you clearly understand the logical relationship between the entities you're querying. In this case, it was essential to count the comments for a specific post identified by its highest score, rather than filtering comments based on the score alone. Using joins, aggregations, and limits can help accurately isolate the target record before counting relevant details.",
        "ground_truth_sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
        "hint": "last to edit refers to MAX(LastEditDate);",
        "error_sql": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Id = 183;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways clarify the requirements of \"last to edit\" in relation to the specific columns referenced in your SQL query. In this case, the last editor is indicated by `LastEditorUserId`, and the associated date is in `LastEditDate`, not `OwnerUserId`. Be cautious with column selections, especially when similar terms appear in the schema, and ensure that you are querying the correct relationships as specified in the question.",
        "ground_truth_sql": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "hint": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "error_sql": "SELECT UserId, DATE(Date) - DATE(CreationDate) AS days_to_get_badge \nFROM users \nJOIN badges ON users.Id = badges.UserId \nWHERE DisplayName = 'Zolomon';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen performing date arithmetic in SQL, ensure to use the appropriate functions for date subtraction based on the database system you are using. For example, different SQL databases may have varied syntax for date operations or might require interval calculations instead of direct subtraction. Always refer to the specific documentation for the SQL dialect to confirm the correct method for date calculations.",
        "ground_truth_sql": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the number of posts and comments left by the user, who has the latest created user account.",
        "hint": "the latest created user account refers to MAX(CreationDate);",
        "error_sql": "SELECT COUNT(DISTINCT p.Id) AS PostCount, COUNT(DISTINCT c.Id) AS CommentCount \nFROM users AS u \nLEFT JOIN posts AS p ON u.Id = p.OwnerUserId \nLEFT JOIN comments AS c ON u.Id = c.UserId \nWHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nMake sure to correctly identify the records related to the user with the latest account creation, using a clear method such as a subquery or a separate JOIN to filter out only that user's posts and comments. Additionally, be cautious with SQL JOIN types; in this case, ensuring that you're counting only the correct user's contributions rather than all user's related contributions is essential.",
        "ground_truth_sql": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
        "hint": "the latest comment refers to MAX(CreationDate);",
        "error_sql": "SELECT T2.Text, T2.UserDisplayName \nFROM comments AS T2 \nINNER JOIN posts AS T1 ON T2.PostId = T1.Id \nWHERE T1.Title = 'Analysing wind data with R' \nORDER BY T2.CreationDate DESC \nLIMIT 10;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're selecting the correct fields from the right tables. In the initial queries, the display name was not correctly associated with the user who made the comment but rather with the post owner. Carefully review your joins and ensure that the relationships between tables match the intended query outcome.",
        "ground_truth_sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "Count the number of posts with a tag specified as 'careers'.",
        "hint": "tag specified as 'careers' refers to TagName = 'careers';",
        "error_sql": "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you understand the relationships between tables in your database schema. In this case, tags are stored in a separate table from posts, which requires a join between the `posts` and `tags` tables to accurately count posts by a specific tag. Using `WHERE` clauses on the `posts` table alone can lead to incorrect assumptions about the data structure. Always consider the need for joins when dealing with related entities in a normalized database.",
        "ground_truth_sql": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
        "difficulty": "simple"
    },
    {
        "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
        "hint": "",
        "error_sql": "SELECT COUNT(T2.Id) AS CommentCount, (SELECT COUNT(*) FROM postHistory T3 WHERE T3.PostId = T1.Id) AS AnswerCount \nFROM posts T1 \nLEFT JOIN comments T2 ON T1.Id = T2.PostId \nWHERE T1.Title = 'Clustering 1D data' \nGROUP BY T1.Id;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to count related records across multiple tables, ensure that you are correctly aggregating comments and answers without inadvertently counting extra rows due to joins. Always validate the relationships and constraints between your tables, and use subqueries or CTEs when appropriate to keep track of specific counts without unintended duplication. Additionally, using aggregate functions should be done alongside proper grouping to maintain accuracy in your results.",
        "ground_truth_sql": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "difficulty": "simple"
    },
    {
        "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
        "hint": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));",
        "error_sql": "SELECT CAST(SUM(CASE WHEN p.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(p.Id) \nFROM posts AS p \nINNER JOIN users AS u ON p.OwnerUserId = u.Id \nWHERE u.Reputation = (SELECT MAX(Reputation) FROM users);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you correctly correlate subqueries and JOINs to get the necessary data from multiple tables. Building queries incrementally and testing intermediate results can help avoid logical errors. Additionally, be cautious when using MAX() in subqueries; directly referencing it in the WHERE clause can lead to unintended results if not properly handled.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
        "difficulty": "challenging"
    },
    {
        "question": "List the creation date and age of the user that commented with webiste.",
        "hint": "commented with webiste refers to the value contains 'http://'",
        "error_sql": "SELECT U.CreationDate, U.Age FROM users AS U INNER JOIN comments AS C ON U.Id = C.UserId WHERE C.Text LIKE '%http://'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the wildcard operator '%' is placed correctly to capture the intended pattern. In SQL, if you want to find a substring anywhere in a string, use '%' before and after the substring. Additionally, double-check the table aliases and join conditions to avoid confusion in complex queries.",
        "ground_truth_sql": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'",
        "difficulty": "moderate"
    },
    {
        "question": "In comments with 0 score, how many of the posts have view count lower than 5?",
        "hint": "view count lower than 5 refers to ViewCount < 5;",
        "error_sql": "SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score = 0 AND T1.ViewCount < 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nBe mindful of the context of each table and their respective column connections while constructing SQL queries. Ensure that you are appropriately joining the correct columns by understanding what data each table holds and what relationship you intend to query. Additionally, check that the conditions in your `WHERE` clause align with the desired logical structure of your query. Always double-check field references and filters to avoid confusion between tables.",
        "ground_truth_sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
        "difficulty": "simple"
    },
    {
        "question": "In posts with 1 comment, how many of the comments have 0 score?",
        "hint": "in posts with 1 comment refers to CommentCount = 1;",
        "error_sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T1.Score = 0;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the conditions in your SQL queries to ensure you're referencing the correct columns from the right tables. In this case, the mistake was referencing `T1.Score` instead of checking `T2.Score`, which is a common oversight when dealing with multiple tables. It's essential to clearly identify which table the relevant fields belong to, especially when the same field name exists in different tables.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
        "difficulty": "simple"
    },
    {
        "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?",
        "hint": "",
        "error_sql": "SELECT COUNT(DISTINCT T2.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are correctly referencing the table and column names in your SQL queries. Pay attention to the specific tables you are counting from and ensure the logic aligns with your intended outcome\u2014especially regarding counts and distinct selections. Double-check for any mismatches in table aliases or column references to avoid confusing results.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
        "difficulty": "simple"
    },
    {
        "question": "Please list the full names of all the superheroes with over 15 super powers.",
        "hint": "15 super powers refers to COUNT(full_name) > 15",
        "error_sql": "SELECT S.full_name FROM superhero AS S \nINNER JOIN hero_power AS HP ON S.id = HP.hero_id \nGROUP BY S.id \nHAVING COUNT(HP.power_id) > 15;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you're grouping by the correct column, especially when using aggregate functions. In this case, grouping by `S.id` instead of `S.full_name` led to incorrect results because the original query allowed for duplicate names when multiple `power_id`s existed for the same hero. Always use a DISTINCT clause if you're unsure about duplicate entries in the results.",
        "ground_truth_sql": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
        "difficulty": "simple"
    },
    {
        "question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "hint": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "error_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you define the required output clearly, including any rankings or aggregate functions needed in your query. In this case, using the `RANK()` function with a proper `OVER` clause was crucial for obtaining heights in descending order with their corresponding ranks, which was overlooked in the initial queries.",
        "ground_truth_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "difficulty": "moderate"
    },
    {
        "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "hint": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "error_sql": "SELECT eye_colour_id, COUNT(superhero.id) AS ColorPopularity, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS ColorRank \nFROM superhero \nINNER JOIN publisher ON superhero.publisher_id = publisher.id \nWHERE publisher.publisher_name = 'Marvel Comics' \nGROUP BY eye_colour_id;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to select and group by actual column names from the relevant joined tables instead of using IDs in the query without appropriate aliasing or context, as this can lead to confusion and incorrect results. Double-checking joins and ensuring all selected fields are clearly defined will help prevent errors.",
        "ground_truth_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "difficulty": "moderate"
    },
    {
        "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "hint": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "error_sql": "SELECT DISTINCT T1.superhero_name, T1.full_name \nFROM superhero AS T1 \nINNER JOIN publisher AS T2 ON T1.publisher_id = T2.id \nINNER JOIN hero_power AS T3 ON T1.id = T3.hero_id \nINNER JOIN superpower AS T4 ON T3.power_id = T4.id \nWHERE T2.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that all conditions related to the relevant tables are properly nested using subqueries when dealing with multiple entities and their relationships, especially when filtering based on existence. This can help prevent missing records due to improper joins or conditions in the WHERE clause.",
        "ground_truth_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "challenging"
    },
    {
        "question": "Who is the dumbest superhero?",
        "hint": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
        "error_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence'))",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to identify the minimum values in a dataset, particularly when multiple rows could have the same minimum value, using `ORDER BY` with `LIMIT 1` can effectively yield the desired result without needing nested subqueries. Additionally, ensure the selection criteria match exactly what is needed for the query, specifically returning not just based on equality with `MIN()`, but rather sorting to obtain the lowest value directly.",
        "ground_truth_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "hint": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
        "error_sql": "SELECT \n    (SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) * 100.0 / COUNT(superhero.id)) AS PercentageBad,\n    SUM(CASE WHEN alignment.alignment = 'Bad' AND publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS MarvelBadCount\nFROM superhero \nINNER JOIN alignment ON superhero.alignment_id = alignment.id \nINNER JOIN publisher ON superhero.publisher_id = publisher.id;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen performing calculations involving counts and percentages, ensure you're clearly segregating the total count from the count you're interested in, particularly when using filtering conditions. Use subqueries or aggregate functions properly to maintain clarity and accuracy in your calculations, as this can help you avoid errors in logic or division by incorrect counts.",
        "ground_truth_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "difficulty": "challenging"
    },
    {
        "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
        "hint": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
        "error_sql": "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering records based on attributes in other tables, ensure to use `JOIN` statements to properly associate the records. Remember that conditions such as \"no eye color\" should check for specific values not just `NULL`, especially when the attribute is in a separate table. Always clarify the relationships and conditions before writing the query.",
        "ground_truth_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "hint": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "error_sql": "SELECT c.colour AS HairColour FROM superhero AS s INNER JOIN colour AS c ON s.hair_colour_id = c.id INNER JOIN race AS r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'human'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, be mindful of case sensitivity, especially for string comparisons. In SQL, terms like 'human' and 'Human' might be treated differently based on the database configuration. Always ensure that the string matches the exact case present in the database or apply a case-insensitive comparison function if applicable.",
        "ground_truth_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "difficulty": "moderate"
    },
    {
        "question": "How many heroes have stealth power?",
        "hint": "stealth power refers to power_name = 'stealth';",
        "error_sql": "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'stealth'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the column names in the SELECT and WHERE clauses match those in the tables correctly, especially when dealing with aggregate functions. If referencing foreign keys, double-check their association to prevent discrepancies. Additionally, be cautious with case sensitivity in string comparisons. Consider using base table aliases that clearly distinguish columns to avoid ambiguity.",
        "ground_truth_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "difficulty": "simple"
    },
    {
        "question": "What is the hero's full name with the highest attribute in strength?",
        "hint": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "error_sql": "SELECT full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' AND T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'strength')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the attribute names used in your SQL queries match exactly with the values stored in the database, including case sensitivity. Utilize `ORDER BY` to simplify selection of the highest value instead of relying solely on subqueries, which can enhance readability and performance.",
        "ground_truth_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the average of superheroes with no skin colour?",
        "hint": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;",
        "error_sql": "SELECT AVG(skin_count) FROM (SELECT COUNT(T1.id) AS skin_count FROM superhero AS T1 WHERE T1.skin_colour_id IS NULL);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your JOINs correctly relate the tables involved in your query to accurately filter and aggregate the data. When working with conditions on data from joined tables, be mindful of which table the condition applies to; otherwise, you may end up with incomplete or inaccurate results. Consider using aliases thoughtfully to clarify the source of each column in your conditions.",
        "ground_truth_sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
        "difficulty": "simple"
    },
    {
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "hint": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "error_sql": "SELECT T1.superhero_name \nFROM superhero AS T1 \nINNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id \nINNER JOIN attribute AS T3 ON T2.attribute_id = T3.id \nINNER JOIN publisher AS T4 ON T1.publisher_id = T4.id \nWHERE T3.attribute_name = 'durability' AND T4.publisher_name = 'Dark Horse Comics' \nORDER BY T2.attribute_value DESC \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the case sensitivity of strings in SQL queries matches the actual data. For instance, the attribute name 'durability' was incorrectly referenced as 'Durability' in the ground truth SQL. Additionally, make sure to clearly differentiate between the columns and possible NULL values to avoid logical errors in conditions and subqueries. Always verify the logic flow when using subqueries to ensure accurate filtering of results.",
        "ground_truth_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "Provide the eye colours of the heroes whose skin colours are gold.",
        "hint": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;",
        "error_sql": "SELECT DISTINCT T1.eye_colour_id FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T2.colour = 'Gold'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you're joining the correct tables to access the desired attributes. In the first queries, the wrong table was joined to access the eye colour instead of correctly joining the superhero table with the colour table for eye colours after filtering on skin colour. Always double-check your join conditions to ensure you're extracting the right data related to your criteria.",
        "ground_truth_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
        "difficulty": "simple"
    },
    {
        "question": "How many percent of female heroes were published by Marvel Comics?",
        "hint": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
        "error_sql": "SELECT (CAST(SUM(CASE WHEN T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)) AS FemalePercentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages with conditional cases, ensure that your numerator and denominator are correctly defined in relation to the overall dataset and filtering criteria. Be mindful of the scope of your calculations and ensure that you account for the entire dataset in the denominator, not just the filtered subset. Using clear and separate subqueries or common table expressions (CTEs) can help clarify and ensure accuracy in such calculations.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question": "How many superheroes didn't have any publisher?",
        "hint": "didn't have any publisher refers to publisher.id = 1;",
        "error_sql": "SELECT COUNT(*) FROM superhero AS T1 WHERE T1.publisher_id IS NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen attempting to count entities that do not have a specific relationship, ensure you check explicitly for the absence of the related identifier instead of incorrectly using JOIN conditions. In this case, you should focus on counting records with `NULL` for `publisher_id` directly, rather than trying to join with the publisher table, which could introduce confusion.",
        "ground_truth_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1",
        "difficulty": "simple"
    },
    {
        "question": "Who is the tallest superhero?",
        "hint": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);",
        "error_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find a single record that meets a specific criterion, especially one related to maximum or minimum values, it's often more efficient to use `ORDER BY` combined with `LIMIT` instead of using nested queries to compare values. This not only simplifies the SQL query but also improves readability and performance.",
        "ground_truth_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the power ID of cryokinesis?",
        "hint": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "error_sql": "SELECT id FROM superpower WHERE power_name = 'cryokinesis'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways check for case sensitivity in your SQL queries, particularly with string comparisons. Most databases treat string comparisons as case-sensitive by default, so ensure that the casing in your `WHERE` clause matches the data in the table precisely. Consider using functions like `LOWER()` or `UPPER()` to standardize string cases if necessary.",
        "ground_truth_sql": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "difficulty": "simple"
    },
    {
        "question": "List the full names of superheroes with missing weight.",
        "hint": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;",
        "error_sql": "SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to check for any additional clauses or conditions in your SQL queries that might be necessary for achieving the intended result. In this case, including a check for non-null `full_name` was essential for filtering out any potentially unwanted results, which was missed in the initial queries.",
        "ground_truth_sql": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
        "difficulty": "simple"
    },
    {
        "question": "Give the alignment and superpowers of the superhero named Atom IV.",
        "hint": "superpowers refers to power_name;",
        "error_sql": "SELECT T1.alignment_id, T2.power_name \nFROM superhero AS T1 \nLEFT JOIN hero_power AS T3 ON T1.id = T3.hero_id \nLEFT JOIN superpower AS T2 ON T3.power_id = T2.id \nWHERE T1.superhero_name = 'Atom IV'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you join all necessary tables to retrieve all required fields in your query. In this case, the initial query missed joining the `alignment` table to obtain the alignment description instead of just the alignment ID. Remember to carefully review the output columns you need and include all related tables in your JOIN statements accordingly.",
        "ground_truth_sql": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
        "difficulty": "simple"
    },
    {
        "question": "List down at least five full names of superheroes with blue eyes.",
        "hint": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "error_sql": "SELECT DISTINCT full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are selecting the correct column names as per your requirements. In this case, you needed the `superhero_name` instead of `full_name`. Double-check the exact information you want to retrieve and align your SELECT statement accordingly to avoid similar mistakes.",
        "ground_truth_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question": "Give the race of the blue-haired male superhero.",
        "hint": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "error_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T3.colour = 'blue' AND T4.gender = 'male'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you consistently match the case sensitivity of string literals in your SQL queries, as some databases may treat 'blue' and 'blue' differently. Always verify the expected casing in both your query and dataset, and consider using functions like `UPPER()` or `LOWER()` to standardize comparisons. Also, maintain proper table aliasing to keep track of column sources clearly.",
        "ground_truth_sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
        "difficulty": "moderate"
    },
    {
        "question": "Give the hero ID of superhero with the lowest attribute value.",
        "hint": "lowest attribute value refers to MIN(attribute_value);",
        "error_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute) LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen checking for minimal values in queries, ensure that your logic correctly handles cases where multiple entries have the same minimum value. Using `LIMIT 1` might lead to confusion; instead, consider using `DISTINCT` or additional aggregations if necessary to handle multiple results and ensure accuracy in identifying the correct row(s).",
        "ground_truth_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
        "difficulty": "simple"
    },
    {
        "question": "List the attribute value of the superhero named Aquababy.",
        "hint": "",
        "error_sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.full_name = 'Aquababy'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:  \nAlways ensure you are referencing the correct column for filtering data in your SQL queries. Double-check the schema and your intended condition; in this case, use `superhero_name` instead of `full_name`, as it specifically corresponds to the superhero's name you want to query.",
        "ground_truth_sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "difficulty": "simple"
    },
    {
        "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
        "hint": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
        "error_sql": "SELECT T3.driverRef \nFROM qualifying AS T1 \nINNER JOIN drivers AS T3 ON T1.driverId = T3.driverId \nWHERE T1.raceId = 20 AND T1.position > 5;",
        "compiler_hint": "no such column: T1.driverRef",
        "reflective_cot": "### Tip:\nAlways ensure that you explicitly select and reference all necessary columns in your SQL queries, especially when performing joins. It's important to verify that you're using the correct table and alias references. Utilizing the `SELECT` clause thoroughly and ensuring that all projected columns exist in the referenced tables will prevent \"no such column\" errors and help avoid returning incorrect results.",
        "ground_truth_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
        "hint": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
        "error_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen looking for the minimum or best value in a specific column, it is often more efficient and reliable to use `ORDER BY` with `LIMIT 1` rather than relying on nested subqueries. This approach allows you to clearly sort the results based on the desired criteria and fetch the first result directly, which avoids potential issues with comparisons and improves readability.",
        "ground_truth_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "hint": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "error_sql": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
        "compiler_hint": "ambiguous column name: url",
        "reflective_cot": "### Tip:\nAlways use table aliases or fully qualify column names when there are multiple tables in a query that might have columns with the same name. This helps to avoid ambiguity and ensure clarity in your SQL statements. For instance, when referencing a column that exists in multiple tables, include the table alias or name (e.g., `T1.url` or `circuits.url`) to prevent confusion.",
        "ground_truth_sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple"
    },
    {
        "question": "Please list the positions of the circuits built by the constructor Renault.",
        "hint": "Renault is a name of constructor;",
        "error_sql": "SELECT DISTINCT C.circuitId FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId INNER JOIN constructorResults AS CR ON R.raceId = CR.raceId INNER JOIN constructors AS CN ON CR.constructorId = CN.constructorId WHERE CN.name = 'Renault'",
        "compiler_hint": "no such column: C.position",
        "reflective_cot": "### Tip:\nAlways double-check the table relationships and column names when writing SQL queries. Ensure that you are referencing the correct tables for the attributes you need. Utilizing database schema documentation to verify the relevant columns can prevent referencing errors, such as trying to select a non-existent column.",
        "ground_truth_sql": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
        "difficulty": "simple"
    },
    {
        "question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
        "hint": "",
        "error_sql": "SELECT COUNT(*) FROM races AS T1 WHERE T1.year = 2010 AND T1.circuitId NOT IN (SELECT circuitId FROM circuits WHERE country IN ('Asia', 'Europe'));",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering based on geographic regions, ensure that you do not only check against broad country categories (like 'Asia' or 'Europe'), but rather maintain a comprehensive list of specific countries that belong to those regions. This helps prevent misclassification and ensures accurate results. Always double-check your criteria and consider all relevant factors.",
        "ground_truth_sql": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010",
        "difficulty": "moderate"
    },
    {
        "question": "Where can I find the information about the races held on Sepang International Circuit?",
        "hint": "information about races refers to url;",
        "error_sql": "SELECT T2.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitId = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen performing SQL queries with JOINs, always ensure that you are selecting the correct columns from the appropriate tables. Use DISTINCT if you expect duplicate results due to multiple JOIN matches. Additionally, double-check that all foreign key references are aligned correctly to avoid confusion when writing your JOIN conditions.",
        "ground_truth_sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "difficulty": "simple"
    },
    {
        "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
        "hint": "race number refers to raceId;",
        "error_sql": "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 = '00:01:40'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that time formats are consistent and consider the potential presence of leading zeros or varying formats. Using `LIKE` with a wildcard can help match different time formats effectively.",
        "ground_truth_sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
        "difficulty": "simple"
    },
    {
        "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "hint": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
        "error_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '54%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying time fields in a database, always ensure that your format accurately matches the possible formats stored in the database. In this case, using `LIKE 'M:SS%'` is important to capture any potential leading `0` in minutes or variations in seconds. It's critical to account for possible variations in the time format (e.g., whether or not \"1:54\" could have leading zeros or be part of a larger duration), rather than matching it directly as an exact string. Consider using `LIKE` for partial matches where pertinent.",
        "ground_truth_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
        "difficulty": "simple"
    },
    {
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "hint": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
        "error_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Bahrain Grand Prix' AND T1.time IS NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, always ensure that you join all necessary tables and include all relevant conditions before filtering the results. Specifically, make sure to include filters for key columns like \"year\" and ensure that you are joining tables in a way that maintains the intended relationships, so you capture all relevant data accurately. Additionally, it's helpful to start by defining the main target entity (in this case, the race) before filtering based on other criteria (like driver results).",
        "ground_truth_sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "difficulty": "simple"
    },
    {
        "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
        "hint": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are referencing the correct tables and their columns in your SQL queries. In your original query, you incorrectly referenced the driver\u2019s date of birth (`dob`) from the wrong alias, which led to an invalid ordering. Additionally, be mindful of possible NULL values in relevant fields (e.g., `dob`) that could affect your results. A good practice is to initially select all needed columns to fully understand the data before applying any filters or ordering.",
        "ground_truth_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "hint": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
        "error_sql": "SELECT T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SQL query retrieves all necessary information by including DISTINCT and specifying the correct columns needed for the final output. Additionally, make sure to consider the complete requirements of the question, such as needing both the player's name and URL in the output, rather than focusing solely on one aspect.",
        "ground_truth_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "difficulty": "moderate"
    },
    {
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "hint": "finished second refers to position = 2;",
        "error_sql": "SELECT T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T1.raceId WHERE T3.year = 2006 AND T3.name = 'San Marino Grand Prix' AND T1.position = 2;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you carefully check the join order and the tables you are using in your SQL query. In this case, the original query did not properly reflect the necessary joins and the correct order of table references. Always start by identifying the primary table related to your query (in this case, races) and then join other tables accordingly to achieve the correct filtering and desired output.",
        "ground_truth_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "difficulty": "simple"
    },
    {
        "question": "Show me the season page of year when the race No. 901 took place.",
        "hint": "the season page refers to url; race number refers to raceId;",
        "error_sql": "SELECT T1.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the join conditions and make sure you are referencing the appropriate table columns correctly. In particular, ensure that you are using the correct column names from the right tables, and verify that the join relationships logically connect the tables involved in your query.",
        "ground_truth_sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "difficulty": "simple"
    },
    {
        "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "hint": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
        "error_sql": "SELECT (T1.fastestLapSpeed - T2.fastestLapSpeed) * 100.0 / T2.fastestLapSpeed AS percent_faster\nFROM results AS T1 \nJOIN results AS T2 ON T1.fastestLapSpeed IS NOT NULL AND T2.fastestLapSpeed IS NOT NULL\nJOIN drivers AS T3 ON T3.driverId = T1.driverId \nWHERE T3.forename = 'Paul' AND T3.surname = 'di Resta' AND T1.raceId = 853 AND T2.raceId = 854;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that the calculations reference the specific race records directly without unnecessary JOINs, particularly when calculating performance metrics across races. Use SUM with conditional expressions like `IIF` or `CASE` to isolate data points effectively for accurate comparisons, rather than relying on JOINs that may introduce unrelated driver data. Always clearly define and streamline your calculations to focus on the exact data points needed.",
        "ground_truth_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
        "difficulty": "challenging"
    },
    {
        "question": "How many races were there in 2005? Name all the races in descending order.",
        "hint": "",
        "error_sql": "SELECT COUNT(T1.raceId), GROUP_CONCAT(T1.name ORDER BY T1.name DESC) FROM races AS T1 WHERE T1.year = 2005;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SQL query aligns with the specific information you need to retrieve. If the objective is to list specific data (like race names), focus on a `SELECT` statement that directly defines those fields, rather than trying to aggregate them with functions such as `COUNT` or `GROUP_CONCAT`, which can alter the output format and make it harder to retrieve the desired details.",
        "ground_truth_sql": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "difficulty": "simple"
    },
    {
        "question": "Name the races in year 2017 that are not hosted in year 2000.",
        "hint": "not hosted means not in;",
        "error_sql": "SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that the criteria for exclusion in a query are applied to the correct fields. In this case, the exclusion was about the names of the races rather than their IDs. Always double-check the logic of what needs to be excluded and ensure you're comparing the same attributes.",
        "ground_truth_sql": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
        "difficulty": "simple"
    },
    {
        "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
        "hint": "the first refers to min(year);",
        "error_sql": "SELECT T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitId = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to select all relevant columns required for the final output, such as the country, if it's specified in the question. Also, double-check the relationships between tables, and confirm the exact field names and their purpose before constructing the query. In this case, the query should include the country along with the circuit name and location.",
        "ground_truth_sql": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
        "hint": "the last refers to max(year);",
        "error_sql": "SELECT MAX(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Brands Hatch' AND T1.name = 'British Grand Prix'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen filtering for specific values in SQL, ensure that you're not just checking for the maximum value of a single column. Instead, consider returning relevant details (like date or full records) to get context and constraints, and always double-check the logic of your joins and conditions to ensure they align with your query's purpose. Using `ORDER BY` with `LIMIT 1` can often be a more effective way to find the latest record that meets your criteria.",
        "ground_truth_sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
        "hint": "",
        "error_sql": "SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2010 AND T3.name = 'Singapore Grand Prix' ORDER BY T1.positionOrder ASC",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways confirm the correct table and field relationships when writing SQL queries. In this case, the information about the race should come from the `driverStandings` table, which contains the relevant standings, rather than querying directly from the `results`. Additionally, ensure that you are selecting the appropriate columns to reflect the correct data you want to display, such as full names instead of just driver references.",
        "ground_truth_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
        "difficulty": "simple"
    },
    {
        "question": "State the driver with the most points scored. Find his full name with that points.",
        "hint": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.points = (SELECT MAX(points) FROM driverStandings)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are considering all necessary tables and fields when constructing your SQL query, especially when dealing with aggregate functions like `MAX()`. In this case, the first query failed to join the *races* table, which is essential for accessing the `driverStandings`, and subsequently did not account for the association between drivers and their points correctly. To avoid mistakes, ensure you understand the relationships between tables in your database schema and include all relevant joins when needed.",
        "ground_truth_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
        "hint": "",
        "error_sql": "SELECT T3.forename, T3.surname, T2.points FROM results AS T1 INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2017) ORDER BY T2.points DESC LIMIT 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, pay close attention to the relationships between tables and ensure you're joining them correctly. Specifically, ensure you're using the right foreign key relations and including conditions that accurately reflect the hierarchy of your data. It\u2019s also helpful to clarify the source of the race information\u2014using the `races` table directly to join through `driverStandings`, as shown in the Ground Truth SQL, will help avoid joining results that do not filter the race context accurately.",
        "ground_truth_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "hint": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
        "error_sql": "SELECT T2.forename, T2.surname, T3.name FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T1.raceId ORDER BY T1.milliseconds ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting the correct columns from the appropriate tables in your SQL queries. Double-check that you are using the proper aliases and that you are applying `JOIN` operations correctly to retrieve the needed data. Additionally, be cautious of the ordering and limits; in this case, focus on the primary key attributes relevant to your selection criteria.",
        "ground_truth_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
        "hint": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
        "error_sql": "SELECT (COUNT(CASE WHEN T2.position > 1 THEN 1 END) * 100.0 / COUNT(T2.raceId)) AS percentage \nFROM results AS T2 \nINNER JOIN drivers AS T1 ON T1.driverId = T2.driverId \nINNER JOIN races AS T3 ON T3.raceId = T2.raceId \nWHERE T1.surname = 'Hamilton' AND T3.year >= 2010;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen formulating SQL queries, always verify that you are referencing the correct columns in your `COUNT` functions. Ensure you understand the join relationships between the tables and check the conditions in your `WHERE` clause to guarantee you're aggregating the data correctly. If unsure, break down the query into smaller parts or use `GROUP BY` to clarify results before aggregating.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
        "difficulty": "challenging"
    },
    {
        "question": "How old is the youngest Japanese driver? What is his name?",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "error_sql": "SELECT T1.forename, T1.surname, (strftime('%Y', 'now') - strftime('%Y', T1.dob)) AS age FROM drivers AS T1 WHERE T1.nationality = 'Japanese' AND T1.dob IS NOT NULL ORDER BY T1.dob DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you understand the ordering logic when fetching the youngest driver. Sorting by date of birth in descending order (i.e., from the most recent to the oldest) is key to identifying the youngest driver correctly. Remember, filtering and sorting criteria should align with the logical requirement of your query.",
        "ground_truth_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
        "hint": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;",
        "error_sql": "SELECT T1.circuitId, T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year BETWEEN 1990 AND 2000 GROUP BY T1.circuitId HAVING COUNT(T2.raceId) = 4",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways validate the table and column names in your JOIN and WHERE clauses to ensure they reference the correct data. Additionally, be mindful of the specific conditions and aggregate functions used in your HAVING clause\u2014ensure they align with the requirements of your query, such as using the correct count or distinct criteria as required. Using aggregations without proper context can lead to incorrect results.",
        "ground_truth_sql": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
        "difficulty": "moderate"
    },
    {
        "question": "Which race was Alex Yoong in when he was in track number less than 20?",
        "hint": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
        "error_sql": "SELECT T1.raceId FROM results AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T2.forename = 'Alex' AND T2.surname = 'Yoong' AND T1.position < 20;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are using the correct tables and joins to meet the specific criteria of the query. In this case, results may not directly provide race information when focusing on standings. Understanding the relationships between tables, especially for specific attributes such as positions in standings versus race results, is crucial. Always check if you're querying the appropriate table for the required information and consider using relevant joins to connect tables correctly for the data needed.",
        "ground_truth_sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
        "difficulty": "simple"
    },
    {
        "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
        "hint": "win from races refers to max(points)",
        "error_sql": "SELECT COUNT(T2.raceId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN drivers AS T4 ON T1.driverId = T4.driverId WHERE T3.name = 'Sepang International Circuit' AND T4.forename = 'Michael' AND T4.surname = 'Schumacher' AND T1.points > 0;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you understand the data structure and relationships within the database schema before writing SQL queries. In this case, checking wins is not about counting races where points are greater than zero or checking for a specific position; it involves summing the wins from a standings table that aggregates data over the races. Starting from the right tables and their relationships, and knowing what each column represents, can prevent misdirected queries. Always validate that you're referencing the correct attributes and tables for your objectives.",
        "ground_truth_sql": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
        "difficulty": "moderate"
    },
    {
        "question": "What is Eddie Irvine's average points scored in year 2000?",
        "hint": "average points = AVG(points where year = 2000)",
        "error_sql": "SELECT AVG(R.points) FROM results R INNER JOIN races R2 ON R.raceId = R2.raceId INNER JOIN drivers D ON R.driverId = D.driverId WHERE D.forename = 'Eddie' AND D.surname = 'Irvine' AND R2.year = 2000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating statistics like averages, ensure you are referencing the correct tables that contain the relevant data. In this case, points scored by drivers are recorded in the `driverStandings` table, not the `results` table. Always verify the schema to identify which table holds the data you're querying.",
        "ground_truth_sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
        "difficulty": "simple"
    },
    {
        "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "hint": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T1.raceId, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = (SELECT MIN(year) FROM races INNER JOIN driverStandings ON races.raceId = driverStandings.raceId INNER JOIN drivers ON drivers.driverId = driverStandings.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton') LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nMake sure to carefully consider the structure of the tables and how the JOINs relate to your query requirements. Specifically, when addressing the first race for a driver, ordering the results by year and then limiting the output helps avoid complications with subqueries. Always remember to explicitly specify the columns you want in the SELECT statement and ensure there's clarity in what you're filtering and ordering.",
        "ground_truth_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
        "hint": "",
        "error_sql": "SELECT T3.name, T3.year, T1.location FROM races AS T3 INNER JOIN circuits AS T1 ON T3.circuitId = T1.circuitId INNER JOIN results AS T2 ON T3.raceId = T2.raceId WHERE T2.laps = (SELECT MAX(laps) FROM results)",
        "compiler_hint": "no such column: T3.laps",
        "reflective_cot": "### Tip:\nAlways ensure that you fully understand the structure of the database and the relationships between tables before writing queries. Pay attention to the columns available in each table and how they relate to the data you're trying to extract. In cases where you need aggregate data, like the maximum number of laps, ensure you are looking at the correct table (e.g., lapTimes) and relevant columns that store that information. It might also help to sketch out the database schema and relationships visually to avoid confusion.",
        "ground_truth_sql": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "In which country can I find the circuit with the highest altitude?",
        "hint": "highest altitude refers to max(alt)",
        "error_sql": "SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways consider the possibility of multiple rows returning the same maximum value when using a subquery. If you want to identify a specific row or rows containing the maximum value, ensure you're using an appropriate method like `ORDER BY` to directly retrieve that row. Additionally, using `LIMIT` can help to specify the exact number of results you want, but may ignore other rows that share the same maximum value.",
        "ground_truth_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Which country is the oldest driver from?",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to check for null values in fields that are critical for your query logic, such as dates of birth, which could affect your results. Use `WHERE` clauses to filter out any records that may contain null or invalid data before performing operations like ordering or limiting the results.",
        "ground_truth_sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "hint": "more information refers to url",
        "error_sql": "SELECT DISTINCT T2.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're selecting the correct table columns in your SQL queries that align with your intended goals. Pay attention to which table contains the desired information, especially when using aliases and joins. Double-check the relationships between tables, and verify that the columns are referenced correctly to avoid confusion and incorrect results.",
        "ground_truth_sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple"
    },
    {
        "question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
        "hint": "",
        "error_sql": "SELECT T2.time FROM races AS T2 INNER JOIN circuits AS T1 ON T2.circuitId = T1.circuitId WHERE T1.name = 'Abu Dhabi Circuit' AND T2.year = 2010;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to verify the specific race name (e.g., 'Abu Dhabi Grand Prix') in addition to the circuit name when querying races by year, as the circuit name alone may not uniquely identify the race. Always cross-check against the complete set of relevant attributes to prevent incomplete or erroneous queries.",
        "ground_truth_sql": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
        "hint": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
        "error_sql": "SELECT T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T1.year = 2007 AND T2.position = 1;",
        "compiler_hint": "no such column: T2.driverRef",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries that involve multiple tables, always ensure that you are aware of the column names in each table and how they relate to one another. Using tools like \"DESCRIBE\" or query-building aids can help avoid confusion about which table a column belongs to. Additionally, double-check the conditions set in the WHERE clause; make sure they align with the intended output and refer to the correct columns from the correct tables (e.g., position may be represented differently across tables, so use the right one).",
        "ground_truth_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
        "difficulty": "moderate"
    },
    {
        "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
        "hint": "",
        "error_sql": "SELECT DISTINCT T1.* FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific information, ensure that the SELECT statement retrieves only the necessary columns to avoid confusion. If you're interested in specific fields (like race names), directly specify those fields in the SELECT clause instead of using `SELECT DISTINCT T1.*`. This improves clarity, performance, and reduces the risk of retrieving unwanted or redundant data.",
        "ground_truth_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
        "hint": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "error_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific conditions, make sure to closely examine the requirements and constraints, especially when multiple attributes may define a ranking or identity. In this case, the initial queries incorrectly focused on a general position or rank instead of the minimum rank that specifically indicated a win (rank = 1). Always validate the logic of ranking or classification criteria before executing the SQL, and consider using subqueries for clarity on unique conditions like first-place finishes.",
        "ground_truth_sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
        "difficulty": "simple"
    },
    {
        "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
        "hint": "",
        "error_sql": "SELECT fastestLapTime, fastestLapSpeed FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific values such as the fastest lap, it's essential to ensure that you're selecting all relevant fields directly from the desired dataset, instead of relying on fields that may not be explicitly tied to the intended result. Make sure to include join statements if necessary to connect tables that hold related information. In this case, using joins could clarify how the results are linked properly to the driver and race, ensuring you filter correctly for the fastest lap.",
        "ground_truth_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
        "hint": "",
        "error_sql": "SELECT SUM(T2.points) FROM driverStandings AS T2 INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you're querying the correct relationship between tables. In this case, points for drivers are recorded in the `results` table, not in the `driverStandings` table. Before forming a query, double-check the schema to identify where the relevant data is stored and how tables are related to each other, particularly when trying to aggregate points or scores.",
        "ground_truth_sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
        "hint": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
        "error_sql": "SELECT AVG(strftime('%s', fastestLapTime)) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that time calculations involving formatted strings (like \"MM:SS.mmm\") are parsed correctly into seconds. Use string functions to separate minutes and seconds, convert them to the appropriate numeric types, and perform calculations on those values. Familiarize yourself with substring extraction techniques in SQL for effective time conversions.",
        "ground_truth_sql": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
        "hint": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))",
        "error_sql": "SELECT CAST(COUNT(T2.raceId) AS REAL) / COUNT(T1.raceId) AS rate FROM results AS T2 INNER JOIN races AS T1 ON T2.raceId = T1.raceId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.time IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the counts you use to calculate rates or percentages reflect the same subset of data. When evaluating conditions such as whether a driver completed all laps, ensure to count only those results that meet that criterion separately instead of counting all instances in the main query. Using conditional aggregation, as shown in the Ground Truth SQL, helps to accurately represent the specific counts needed for such calculations.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
        "difficulty": "moderate"
    },
    {
        "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
        "hint": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
        "error_sql": "SELECT ((CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) * 3600 + CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(T1.time, ':', INSTR(T1.time, ':') + 1) - INSTR(T1.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T1.time, INSTR(T1.time, ':', INSTR(T1.time, ':') + 1) + 1) AS REAL)) - CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS INTEGER) * 3600 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) - INSTR(T2.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) + 1) AS REAL)) ) * 100 / (CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS INTEGER) * 3600 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) - INSTR(T2.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) + 1) AS REAL))) AS percentage \nFROM results AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nWHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL \nORDER BY T1.position LIMIT 1;",
        "compiler_hint": "near \")\": syntax error",
        "reflective_cot": "### Tip:\nEnsure you clearly define subqueries and calculations involved in your SQL logic before composing the complete query. It helps to break down complex calculations into simpler components, using Common Table Expressions (CTEs) for better readability and to isolate parts of the logic. This way, you can easily debug and identify errors in your calculations, such as incorrect references or mixed variable scopes. When encountering syntax errors, double-check parentheses and ensure all fields in the SELECT clause are properly aggregated or referenced.",
        "ground_truth_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
        "difficulty": "challenging"
    },
    {
        "question": "How many British drivers were born after 1980?",
        "hint": "born after 1980 refers to year (dob) >1980;",
        "error_sql": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen comparing dates in SQL, ensure that the date format used in comparisons is compatible and that the database system you're using correctly interprets it. In this case, using the `STRFTIME` function on the `dob` field ensures the year is extracted correctly as a string for the comparison, thus avoiding potential issues with how dates are stored and compared. Always verify the data type and format when performing date comparisons to prevent errors.",
        "ground_truth_sql": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
        "difficulty": "simple"
    },
    {
        "question": "What are the maximum points of British constructors?",
        "hint": "maximum points = MAX(points); British is a nationality",
        "error_sql": "SELECT MAX(T1.points) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to verify the context and purpose of the tables you are querying. In this case, the `constructorResults` table captures individual race results while `constructorStandings` maintains points accrued throughout the season. Be diligent in checking which table aligns with the information you need to retrieve (in this case, total points). Additionally, review database documentation or schema to understand relationships and data context before composing your SQL queries.",
        "ground_truth_sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "difficulty": "simple"
    },
    {
        "question": "Please list the constructor names with 0 points at race 291.",
        "hint": "race at 291 refers to raceID = 291;",
        "error_sql": "SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the context of the data you are querying. In this case, points can be recorded in multiple tables (constructorResults and constructorStandings). Ensure you understand the differences between these tables and which one holds the relevant information for your query. When in doubt, refer to the schema and consider all possible sources of data to find the correct solution.",
        "ground_truth_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
        "difficulty": "simple"
    },
    {
        "question": "How many Japanese constructors have 0 points in 2 races?",
        "hint": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
        "error_sql": "SELECT COUNT(DISTINCT T1.constructorId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(T1.raceId) = 2;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen aggregating with `COUNT` in SQL, ensure that you're counting the right entity for your requirements and that your `HAVING` clause reflects the desired outcome without over-complicating the conditions. In this case, ensure you're using `COUNT(raceId)` correctly to filter results based on the races associated with the constructor, rather than modifying the grouping inappropriately. Remember: clarity in what you're counting and how you're grouping can prevent logical errors in your queries.",
        "ground_truth_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
        "difficulty": "simple"
    },
    {
        "question": "Which constructors have been ranked 1?",
        "hint": "",
        "error_sql": "SELECT DISTINCT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific rankings or performance metrics, ensure you are referencing the correct table that contains the relevant data. In this case, constructor rankings were found in the `results` table, not in `constructorStandings`. Always confirm which table contains the important details for your query to avoid referencing the wrong source.",
        "ground_truth_sql": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
        "difficulty": "simple"
    },
    {
        "question": "How many French constructors have a lap number of over 50?",
        "hint": "lap numbers of over 50 refers to laps > 50;",
        "error_sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM lapTimes AS T1 INNER JOIN constructors AS T2 ON T1.driverId = T2.constructorId WHERE T1.lap > 50 AND T2.nationality = 'French'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are joining the correct tables based on their relationships and attributes. In this case, make sure to join `results` with `constructors` to access the laps information from the `results` table, as `lapTimes` is specifically for lap timings during the race, not laps completed. Always double-check foreign keys and ensure logical connections between the data entities to avoid incorrect table associations in your SQL queries.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
        "difficulty": "simple"
    },
    {
        "question": "What is the average time in seconds of champion for each year, before year 1975?",
        "hint": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
        "error_sql": "SELECT AVG(CAST(SUBSTR(T1.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(T1.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(T1.time, 7) AS REAL)) AS average_time, T2.year \nFROM results AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nWHERE T1.time IS NOT NULL AND T1.positionOrder = 1 AND T2.year < 1975 \nGROUP BY T2.year;",
        "compiler_hint": "no such column: T2.year",
        "reflective_cot": "### Tip:\nWhen performing SQL queries that involve joining multiple tables, always ensure that you are referencing the correct columns and tables. Carefully track the aliases used for tables to avoid confusion about which fields belong to which table. Additionally, when making calculations or transformations, validate that the data types are appropriate for the operations you perform to avoid errors related to data casting or column existence. Consider using CTEs (Common Table Expressions) for complex queries to break down the logic step by step, making it easier to identify potential issues.",
        "ground_truth_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
        "difficulty": "challenging"
    },
    {
        "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
        "hint": "born after 1975 refers to year(dob) >1975;",
        "error_sql": "SELECT T1.forename, T1.surname \nFROM drivers AS T1 \nINNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId \nWHERE STRFTIME('%Y', T1.dob) > '1975' AND T2.position = 2;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen checking for specific rankings or results, ensure you are querying the correct table that contains that attribute. In this case, the initial queries incorrectly used the `driverStandings` table instead of the `results` table, which contains the rank data. Always verify the schema and ensure you are joining the appropriate tables to retrieve the desired information accurately.",
        "ground_truth_sql": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
        "difficulty": "simple"
    },
    {
        "question": "Which driver has the fastest lap time? Please give their forenames and surnames.",
        "hint": "",
        "error_sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.milliseconds ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you're referencing the correct tables and columns for the specific data you need. In this case, the fastest lap time should be obtained from the `results` table rather than the `lapTimes` table, as the `results` table includes a `fastestLapTime` column that directly indicates the fastest lap time for a driver in a race. Double-checking the schema and understanding the relationships between the tables will help avoid such mismatches in the future.",
        "ground_truth_sql": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the fastest lap number of the champion in 2009?",
        "hint": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
        "error_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 AND T2.position = 1;",
        "compiler_hint": "no such column: T2.year",
        "reflective_cot": "### Tip:\nAlways ensure that you refer to the correct tables and their columns when writing SQL queries. Additionally, check the schema thoroughly for relationships and foreign keys. In this case, `driverStandings` did not contain the `year` column, leading to the initial error. Instead, ensure you join through the `races` table to access the `year` attribute correctly. Taking extra time to review the database schema before querying can help avoid such mistakes.",
        "ground_truth_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "difficulty": "simple"
    },
    {
        "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
        "hint": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
        "error_sql": "SELECT \n    (COUNT(DISTINCT T1.driverId) * 100.0 / NULLIF((SELECT COUNT(DISTINCT driverId) FROM results AS T3 INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year BETWEEN 2000 AND 2005), 0)) AS percentage \nFROM \n    results AS T1 \nINNER JOIN \n    drivers AS T2 ON T1.driverId = T2.driverId \nWHERE \n    STRFTIME('%Y', T2.dob) < '1985' AND \n    T1.laps > 50;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, particularly with multiple conditions and joins, it's crucial to ensure that all filters and aggregations are correctly applied to the appropriate datasets. Always carefully check that the joins align with the intended conditions and that the WHERE clause includes all relevant criteria. In cases involving subqueries, ensure that the context of the conditions is correctly set within the main query. Testing each segment of the query incrementally can help identify misalignments early on.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
        "difficulty": "challenging"
    },
    {
        "question": "How many French drivers who obtain the laptime less than 02:00.00?",
        "hint": "lap time less than 02:00.00 refers to seconds < 120;",
        "error_sql": "SELECT COUNT(DISTINCT T1.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'French' AND T1.milliseconds < 120000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify how time values are represented and stored in your database for accurate comparisons. When dealing with time strings, ensure to parse them correctly into a numerical format that allows for proper computations. In this case, converting the formatted time into total seconds for comparisons helps avoid logical errors.",
        "ground_truth_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "difficulty": "moderate"
    },
    {
        "question": "List out the code for drivers who have nationality in America.",
        "hint": "nationality = 'America'",
        "error_sql": "SELECT code FROM drivers WHERE nationality = 'America'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the exact values stored in the database, including variations in spelling or phrasing, as nationality representations can differ (e.g., \"America\" vs. \"American\"). Additionally, consistent use of case sensitivity and accurate column names in SQL queries is crucial, so ensure you use the correct form found in the table schema.",
        "ground_truth_sql": "SELECT code FROM drivers WHERE Nationality = 'American'",
        "difficulty": "simple"
    },
    {
        "question": "How many driver participated in race ID number 18?",
        "hint": "",
        "error_sql": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to use the appropriate table for the data you are querying. In this case, the initial queries used the `results` and `driverStandings` tables incorrectly. Review the relationships and data contained in the tables to confirm that you are querying the correct one based on the question posed. When in doubt, consult the schema to select the right table that captures the relevant data for your query.",
        "ground_truth_sql": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
        "difficulty": "simple"
    },
    {
        "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
        "hint": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
        "error_sql": "SELECT code FROM drivers WHERE driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3); \nSELECT COUNT(*) FROM drivers WHERE nationality = 'Dutch' AND driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3);",
        "compiler_hint": "You can only execute one statement at a time.",
        "reflective_cot": "### Tip:\nTo avoid making the same mistake in the future, ensure that your SQL queries correctly isolate the intended subset of data before performing operations like counting or filtering. Specifically, when looking for the youngest drivers, you should consider using a subquery within an outer query, and limit your selections effectively to ensure that you're referencing the right results. Always think about the order of operations in SQL and how inner queries will interact with outer queries.",
        "ground_truth_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
        "difficulty": "simple"
    },
    {
        "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
        "hint": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "error_sql": "SELECT T2.forename, T2.surname, MIN(T1.time) AS earliestLapTime \nFROM lapTimes AS T1 \nINNER JOIN drivers AS T2 ON T1.driverId = T2.driverId \nWHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' \nGROUP BY T2.driverId \nORDER BY earliestLapTime ASC \nLIMIT 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find the earliest lap time for drivers within a specific range, ensure that you're using the correct table and join conditions that directly relate to the results you're trying to aggregate. Additionally, double-check how you're applying the `MIN()` function. In this case, the laps' exact timings need to be compared in a format that allows for proper sorting (e.g., converting time strings into a consistent format) and ensure you are selecting from the correct table with appropriate lap-related data.",
        "ground_truth_sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "difficulty": "moderate"
    },
    {
        "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
        "hint": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
        "error_sql": "SELECT T1.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that when filtering results based on conditions, you maintain clarity in the logic and structure of the query. Use clear and precise JOIN statements to avoid ambiguity, and double-check that the selected columns from each table are correctly referenced in the context of your filtering criteria. Always verify the logical flow of your query to ensure it retrieves the intended results.",
        "ground_truth_sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
        "hint": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "error_sql": "SELECT T2.driverId FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, it's essential to carefully analyze the requirements and identify the correct tables that contain the desired data. In this case, the task was to find the latest lap times for drivers, but the query mistakenly used the `lapTimes` table instead of the proper table that captures relevant timing info for the given context. Always double-check the schema relationships and ensure you're referencing the right columns and tables related to your query's logic. Additionally, testing queries incrementally can help identify errors early in the process.",
        "ground_truth_sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question": "State the racing year which has the fastest lap time?",
        "hint": "'has the fastest lap time?' refers to fastestLapTime has values",
        "error_sql": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure your SQL query is targeting the correct aggregate or order of data you intend to fetch. For identifying specific values like the fastest lap time, utilizing aggregate functions (e.g., MIN, MAX) alongside the necessary conditionals can help ensure you're retrieving the intended results effectively. Additionally, double-check whether you need to retrieve all data or just a filtered result for more concise query execution.",
        "ground_truth_sql": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "Which year has the lowest speed of lap time?",
        "hint": "lowest speed of lap time refers to Max(time);",
        "error_sql": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are referencing the correct table and its associated columns for the specific data you need. In this case, lap times should be fetched from the `lapTimes` table rather than the `results` table, and the relevant lap time data should be ordered based on the time format that correctly represents speed (e.g., leveraging the `time` or `milliseconds` field appropriately). Double-checking schema relationships and the context of the query can help prevent such mistakes.",
        "ground_truth_sql": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
        "hint": "fastest time refers to Min(time);",
        "error_sql": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY milliseconds ASC LIMIT 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are using the correct data type for comparisons in your SQL queries. In this case, while ordering by `milliseconds` was necessary for accurately determining the fastest lap time, the original query incorrectly applied ordering to `time`, which is stored as a text field. Remember to check if the values involved in ordering and filtering are of the right type (numeric, date, etc.) to avoid logical errors in your queries.",
        "ground_truth_sql": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
        "hint": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "error_sql": "SELECT T1.location, T1.lat, T1.lng, COUNT(T2.raceId) AS event_count FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Austria' GROUP BY T1.location, T1.lat, T1.lng;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways validate the goal of your SQL query against the intended result. In this case, the requirement was to list circuits in Austria without aggregating them by event counts. When wanting to retrieve distinct locations and their coordinates, avoid using aggregation functions like COUNT() unless summarizing information about events at those locations. Ensure you understand whether you're retrieving unique records or summarizing data before deciding on the query structure.",
        "ground_truth_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "difficulty": "simple"
    },
    {
        "question": "What race number has the most finishers?",
        "hint": "finisher refers to time is not null;",
        "error_sql": "SELECT raceId, COUNT(*) AS finisherCount FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finisherCount DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the correct aggregation function to use when counting conditions. In SQL, use `COUNT(column_name)` to count non-null entries in a specific column, and avoid counting boolean results (like `COUNT(condition)`) directly, as it can lead to unexpected behavior. It's crucial to ensure you're applying the aggregation on the correct data to get the desired results.",
        "ground_truth_sql": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
        "hint": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
        "error_sql": "SELECT MIN(T1.date), T1.year, T2.forename, T2.surname\nFROM races AS T1 \nINNER JOIN qualifying AS T3 ON T1.raceId = T3.raceId \nINNER JOIN drivers AS T2 ON T3.driverId = T2.driverId \nGROUP BY T2.driverId \nORDER BY T2.dob DESC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that you clearly separate the process of identifying the youngest driver from the process of determining their first qualifying race. Instead of trying to combine these steps into one query, use subqueries strategically to retrieve the correct information. Always double-check the grouping logic, particularly when using aggregate functions like `MIN`, to ensure you're capturing the correct context (e.g., the first qualifying race for the identified driver).",
        "ground_truth_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
        "hint": "introduction website refers to url; Italian is a nationality",
        "error_sql": "SELECT T2.name, T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Italian' ORDER BY T1.points DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting from the correct primary table that contains the main entity of interest. In this case, the query incorrectly selected the constructor's name before determining which constructor had the highest points. Start with the table that holds the data you need to aggregate or rank (constructorStandings) and then join to the related tables to fetch additional attributes.",
        "ground_truth_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
        "hint": "slowest time refers to Max(time);",
        "error_sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time ASC LIMIT 1;",
        "compiler_hint": "no such column: T2.driverId",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that you are selecting the correct columns from the appropriate tables. Always double-check that the aliases are correctly assigned and that the columns referenced exist in the specified tables. Using the correct table aliases and ensuring that the columns belong to those tables will help prevent \"no such column\" errors.",
        "ground_truth_sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
        "hint": "fastest refers to Min(time);",
        "error_sql": "SELECT T1.raceId, MIN(T1.milliseconds) FROM lapTimes AS T1 GROUP BY T1.raceId ORDER BY MIN(T1.milliseconds) ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to join necessary tables when you need context or additional information beyond the aggregated data. In this case, the `races` table was needed to link the `raceId` to the corresponding race details, which should have been incorporated to accurately retrieve the fastest lap time with its race context. Additionally, always verify that your WHERE clauses specifically target the intended data attributes (like filtering for lap 1 in this scenario).",
        "ground_truth_sql": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
        "hint": "top 10 refers to rank <11; AVG(fastestLapTime);",
        "error_sql": "SELECT AVG(CAST(SUBSTR(T1.fastestLapTime, 1, INSTR(T1.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T1.fastestLapTime, INSTR(T1.fastestLapTime, ':') + 1) AS REAL)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2006 AND T2.name = 'United States Grand Prix' AND T1.rank < 11 AND T1.fastestLapTime IS NOT NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the data types you are working with are compatible before performing operations on them. In your case, you were trying to calculate the average of a formatted time string (fastestLapTime) without converting it into a numerical format correctly. To avoid this mistake, it\u2019s important to check the structure and type of data in your database prior to constructing your SQL queries, and use appropriate casting or conversion functions as required.",
        "ground_truth_sql": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
        "hint": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "error_sql": "SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, always verify that you are selecting the correct fields necessary for the output. In this case, the requirement was to provide the full name in a specific format, but the initial query mistakenly attempted to alias the concatenated full name directly while selecting fields that did not match the desired output. Always double-check your SELECT statement to ensure you are referencing the necessary columns and formats as per the request.",
        "ground_truth_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "difficulty": "simple"
    },
    {
        "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
        "hint": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "error_sql": "SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the conditions in your SQL queries are accurately reflecting the criteria you want to apply. In this case, 'dob' is a DATE type and should be treated as such, rather than being converted to a string using STRFTIME. Use appropriate comparisons directly on the DATE type. For better clarity and correctness, explicitly state the range using actual date values rather than using functions to generate years.",
        "ground_truth_sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "difficulty": "moderate"
    },
    {
        "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
        "hint": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "error_sql": "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways review the column names in the database schema carefully to ensure they match exactly when structuring your SQL queries. Pay attention to the order of the SELECT statement when including columns; if the ground truth specifies a certain order or certain columns, ensure your query reflects that accurately. Additionally, utilizing LIMIT may not be necessary unless you're specifically trying to reduce results, so assess if all data points are required initially.",
        "ground_truth_sql": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "difficulty": "simple"
    },
    {
        "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
        "hint": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
        "error_sql": "SELECT T2.points, T1.name, T1.nationality \nFROM constructors AS T1 \nINNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId \nINNER JOIN races AS T3 ON T2.raceId = T3.raceId \nWHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 \nORDER BY T2.points DESC \nLIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your table aliases are used consistently and correctly throughout your SQL queries. Pay attention to the column references and ensure they are from the correct tables, especially when aggregating data. Grouping should be done appropriately based on the selected columns to avoid ambiguity and errors. Use meaningful aliases for clarity in complex queries.",
        "ground_truth_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "hint": "Average score = AVG(points)",
        "error_sql": "SELECT AVG(T2.points) FROM results AS T2 INNER JOIN races AS T1 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name LIKE '%Turkish Grand Prix%'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways check the relevant tables and their relationships before constructing your query. In this case, the average points for Lewis Hamilton during the Turkish Grand Prix should be derived from the `driverStandings` table instead of the `results` table. Familiarize yourself with the schema and identify which table holds the required aggregated values to optimize your queries effectively.",
        "ground_truth_sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the annual average number of races held during the first 10 years of the 21st century?",
        "hint": "races in date between '2000-01-01' and '2010-12-31'",
        "error_sql": "SELECT AVG(race_count) FROM (SELECT COUNT(*) AS race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are considering the correct grouping and aggregation based on the requirements of the question. In this case, extracting the year directly from the date column while grouping was crucial, as well as verifying the count of distinct races based on that year. Additionally, when calculating averages or other aggregate measures, ensure the context aligns with the desired timeframe explicitly. Always double-check for potential pitfalls regarding how date conditions and aggregations interact.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
        "difficulty": "simple"
    },
    {
        "question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
        "hint": "victories refer to wins; 91st refers to points\n\n",
        "error_sql": "SELECT T1.wins FROM driverStandings AS T1 ORDER BY T1.points DESC LIMIT 1 OFFSET 90;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific ranks or conditions, ensure that the logic correctly aggregates or filters data based on the criteria. Instead of directly ordering and limiting the results, consider using conditional statements or aggregations to accurately calculate the desired outcome. Always double-check the conditions to ensure they match the requirements of the question.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
        "difficulty": "simple"
    },
    {
        "question": "Which racetrack hosted the most recent race? Indicate the full location.",
        "hint": "full location refers to location+country; most recent race = MAX(date)\n\n",
        "error_sql": "SELECT T1.name || ', ' || T1.country AS full_location \nFROM circuits AS T1 \nINNER JOIN races AS T2 ON T1.circuitId = T2.circuitId \nWHERE T2.date = (SELECT MAX(date) FROM races) ",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you carefully read the question requirements. In this case, the question specifically asked for the \"full location\" (which includes both location and country), but the initial query only returned the name of the circuit. Always double-check the expected output and verify that all specified components are included in your final SELECT clause.",
        "ground_truth_sql": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "hint": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
        "error_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN qualifying AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2008 AND T1.name = 'Marina Bay Street Circuit' AND T2.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = T1.raceId)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with time values stored as text (like lap times in qualifying), always convert them into a numerical format (e.g., total seconds) for accurate comparisons and calculations. This avoids issues with string comparison and ensures you're correctly identifying the fastest times.",
        "ground_truth_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
        "hint": "full name refers to forename+surname; Youngest racer = MAX(dob)",
        "error_sql": "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, T2.name AS race_name \nFROM drivers AS T1 \nINNER JOIN (SELECT driverId, MIN(raceId) AS first_race FROM results GROUP BY driverId) AS T3 \nON T1.driverId = T3.driverId \nINNER JOIN races AS T2 ON T3.first_race = T2.raceId \nWHERE T1.dob = (SELECT MAX(dob) FROM drivers) \nORDER BY T1.dob DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen searching for the youngest racer using dates of birth, always ensure you are comparing against the correct field. Use `MIN(dob)` to find the youngest date rather than `MAX(dob)`, which would find the oldest. Also, clarify how the relationships between tables are linked (like joining results and standings correctly) to ensure you're referencing the full life cycle of the racer, including their participation in races.",
        "ground_truth_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many wins was achieved by the oldest racer? Indicate his/her full name.",
        "hint": "oldest racer refers to MIN(dob); full name refers to forename, surname.",
        "error_sql": "SELECT T1.forename, T1.surname, SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers) GROUP BY T1.forename, T1.surname;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you're identifying the correct aggregate condition for your grouping and filtering. In your case, instead of trying to find the maximum or a specific date in subqueries, focus on extracting the information directly with clear date comparisons for oldest entries, and confirm that you understand how `SUM()` interacts with your `GROUP BY` clauses. Also, when resolving who the oldest racer is, ensure the chronological order is explicitly handled correctly, either through ordering and limiting or subquerying for clarity.",
        "ground_truth_sql": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
        "hint": "",
        "error_sql": "SELECT MIN(milliseconds) FROM lapTimes;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with time formats, ensure you accurately convert them into a consistent unit (like milliseconds) for comparison, especially when times include various formats (e.g., HH:MM:SS versus MM:SS). Always validate your approach and consider all potential formats before performing operations like `MIN`.",
        "ground_truth_sql": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
        "hint": "time spent at pit stop refers to duration",
        "error_sql": "SELECT T1.driverId, T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
        "compiler_hint": "no such column: T2.duration",
        "reflective_cot": "### Tip:\nAlways double-check the columns being selected from each table in your SQL queries. Make sure to reference the correct table alias when selecting specific columns, especially after joining multiple tables. It's helpful to clarify which table contributes which columns to avoid confusion and errors.",
        "ground_truth_sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
        "hint": "lap recod means the fastest time recorded which refers to time",
        "error_sql": "SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "compiler_hint": "no such column: T2.fastestLapTime",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, always ensure you're referencing the correct columns from the appropriate tables. Compare the schema definitions with the query to ensure column names exist and are spelled correctly. Additionally, be mindful of the context; for example, in this case, the lap record is not necessarily found in the `lapTimes` table\u2019s specific columns for fastest lap but may instead relate to the results from races.",
        "ground_truth_sql": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "difficulty": "simple"
    },
    {
        "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
        "hint": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
        "error_sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId ORDER BY T1.time ASC LIMIT 20",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with time formats in SQL, especially if they are in string format (like 'MM:SS.mmm'), it's essential to convert those strings into a numerical format that can be easily compared (e.g., total seconds) for accurate ordering. Always ensure to handle cases where the string format may vary or when you need to extract parts of the string correctly. Use functions like `SUBSTR` and `INSTR` to parse and convert these formats before performing operations like `MIN` or `ORDER BY`.",
        "ground_truth_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "difficulty": "challenging"
    },
    {
        "question": "What is the lap record for the Austrian Grand Prix Circuit?",
        "hint": "lap record means the fastest time recorded which refers to time",
        "error_sql": "SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure the criteria for querying, such as the specific attributes or titles, match what's defined in the database schema. In this case, verify the exact name of the circuit in the `circuits` table and ensure you're referencing the right fields that contain the relevant data for your query, such as the fastest lap time, rather than lap times generally.",
        "ground_truth_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
        "difficulty": "simple"
    },
    {
        "question": "Please list the lap records for the circuits in Italy.",
        "hint": "lap record means the fastest time recorded which refers to time",
        "error_sql": "SELECT T3.name, MIN(T1.fastestLapTime) AS lap_record FROM results AS T1 \nINNER JOIN races AS T2 ON T1.raceId = T2.raceId \nINNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId \nWHERE T3.country = 'Italy' AND T1.fastestLapTime IS NOT NULL \nGROUP BY T3.name;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nTo avoid querying errors related to time comparisons and formatting, ensure that time values are consistently converted to a suitable format for comparison (e.g., seconds) before performing aggregation functions like `MIN()`. Use appropriate functions to cast or convert the time strings into numbers that can accurately represent elapsed time, and structure your query to retrieve the needed values efficiently while accounting for any potential NULL values.",
        "ground_truth_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
        "hint": "lap record means the fastest time recorded which refers to time",
        "error_sql": "SELECT T2.name, T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix' AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen dealing with time values in a non-standard format (like \"MM:SS.sss\"), ensure to convert them into a uniform numerical format (e.g., seconds) for accurate comparisons and calculations. This will help avoid errors when trying to find minimum or maximum values based on time.",
        "ground_truth_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
        "difficulty": "moderate"
    },
    {
        "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
        "hint": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration",
        "error_sql": "SELECT T1.duration FROM pitStops AS T1 \nINNER JOIN results AS T2 ON T1.raceId = T2.raceId \nINNER JOIN races AS T3 ON T2.raceId = T3.raceId \nINNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId \nWHERE T4.name = 'Austrian Grand Prix' \nAND T2.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results AS T5 \n                         WHERE T5.raceId = T2.raceId \n                         AND T5.fastestLapTime IS NOT NULL)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that when you're joining tables, you're correctly aligning the keys and considering the necessary conditions for filters and aggregates. When working with complex queries, especially those involving multiple joins and nested subqueries, it\u2019s crucial to accurately track which fields belong to which tables and validate that conditions correctly reflect the intended logic of the query. Additionally, test small components of your query individually to ensure they produce the expected results before integrating them into a more extensive query.",
        "ground_truth_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
        "difficulty": "challenging"
    },
    {
        "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
        "hint": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)",
        "error_sql": "SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM results WHERE fastestLapTime = '1:29.488')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are querying the correct tables and relationships based on the actual schema. In this case, the lap record is stored in the `lapTimes` table, not the `results` table. Double-check the table relationships and where specific data points (like fastest lap times) are stored before forming your queries.",
        "ground_truth_sql": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the height of the tallest player? Indicate his name.",
        "hint": "tallest player refers to MAX(height);",
        "error_sql": "SELECT T1.player_name, MAX(T1.height) FROM Player AS T1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you understand the structure of your query, especially when using aggregate functions like `MAX`. In the first query, the use of `MAX` without a `GROUP BY` clause returned an incorrect result since it does not relate back to the specific player. In the second attempt, while it was a step in the right direction to use a subquery, remember that ordering results directly on a specific attribute should be combined with `LIMIT` to avoid any ambiguity, ensuring you efficiently return the specific entry you're after. Using `ORDER BY` with `LIMIT` is often a straightforward way to get the top results without needing complex subqueries.",
        "ground_truth_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
        "hint": "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';",
        "error_sql": "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nPay close attention to the specific requirements of the query. In this case, the condition specifically asked for players with a \"defensive_work_rate\" of 'low,' rather than focusing on \"attacking_work_rate.\" Ensure to carefully read the query requirements to avoid misinterpreting the criteria.",
        "ground_truth_sql": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
        "difficulty": "moderate"
    },
    {
        "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
        "hint": "perform better in crossing actions refers to MAX(crossing)",
        "error_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you select the correct column from the desired table when writing your SQL queries. When referring to a unique identifier, double-check that you're using the primary key of the correct table (in this case, `Player_Attributes` should have used `id` instead of `player_api_id` for the correct result). Familiarize yourself with the schema and the relationships between tables to avoid such mix-ups.",
        "ground_truth_sql": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question": "Which home team had lost the fewest matches in the 2016 season?",
        "hint": "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';",
        "error_sql": "SELECT home_team_api_id, COUNT(*) AS lost_matches FROM Match WHERE home_team_goal < away_team_goal AND season = '2015/2016' GROUP BY home_team_api_id ORDER BY lost_matches ASC LIMIT 1;",
        "compiler_hint": "no such function: SUBTRACT",
        "reflective_cot": "### Tip:\nAlways check the use of functions and ensure to follow standard SQL syntax. Instead of using nonexistent functions like \"SUBTRACT,\" use basic arithmetic operations directly in your conditions. Additionally, consider using proper table aliases and joining tables only when necessary to maintain clarity and efficiency in your queries.",
        "ground_truth_sql": "SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
        "hint": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);",
        "error_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.penalties DESC LIMIT 10",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are joining the correct fields between the tables. In this case, the join should use `Player_Attributes.player_api_id` with `Player.player_api_id`, not the `id` or any other field. Always double-check the field names and their relationships defined by foreign keys in your database schema to avoid such mismatches.",
        "ground_truth_sql": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
        "difficulty": "simple"
    },
    {
        "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
        "hint": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
        "error_sql": "SELECT buildUpPlaySpeed, team_fifa_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to properly join related tables to access all necessary fields and avoid limiting the query solely to the table of interest when additional context is needed. Always verify the relationships and dependencies between tables before formulating a query.",
        "ground_truth_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
        "difficulty": "moderate"
    },
    {
        "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
        "hint": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';",
        "error_sql": "SELECT league_id FROM Match WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to join relevant tables when you need additional information that is not present in the main table being queried. In this case, the league name was required which could only be obtained using a JOIN with the `League` table. Additionally, reconsider the aggregation functions to ensure that you are counting the correct data based on the relationship and context of the query.",
        "ground_truth_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
        "hint": " league with highest matches of all time refers to MAX(COUNT(league_id));",
        "error_sql": "SELECT t2.name, COUNT(t1.id) AS total_matches FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id GROUP BY t2.name ORDER BY total_matches DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen aggregating data and needing to find the maximum value, make sure to use subqueries or common table expressions effectively. The initial approach did not isolate the counts per league before attempting to find the maximum, which led to incorrect logic. Always test if your aggregation logic correctly provides the expected data shape before applying any further operations.",
        "ground_truth_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
        "difficulty": "moderate"
    },
    {
        "question": "List the players' api id who had the highest above average overall ratings in 2010.",
        "hint": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';",
        "error_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') AND substr(date, 1, 4) = '2010';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that your query logic aligns with the intended task. When identifying the player with the highest rating within a specific year, focus on filtering the records first for that year and then order them to find the maximum rating. Avoid unnecessary GROUP BY clauses when looking for a single highest value, as they can complicate the query and lead to incorrect results.",
        "ground_truth_sql": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "hint": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
        "error_sql": "SELECT (SUM(pa.preferred_foot = 'left') * 100.0) / COUNT(p.player_fifa_api_id) FROM Player AS p INNER JOIN Player_Attributes AS pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.birthday BETWEEN '1987-01-01' AND '1992-12-31';",
        "compiler_hint": "no such column: preferred_foot",
        "reflective_cot": "### Tip:\nWhen writing SQL queries involving multiple tables, always ensure that you're referencing the correct columns from the correct tables. Utilizing clear table aliases can help avoid confusion, and it\u2019s essential to verify that the columns you intend to access actually exist in the respective tables. Additionally, be cautious with date functions; instead of `YEAR()` which is not standard SQL for SQLite, use appropriate string functions like `SUBSTR()` to extract and compare date parts. Always test components of your query separately to isolate potential issues.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "difficulty": "challenging"
    },
    {
        "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
        "hint": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
        "error_sql": "SELECT T.team_long_name \nFROM Team_Attributes AS TA \nJOIN Team AS T ON TA.team_api_id = T.team_api_id \nWHERE TA.buildUpPlayDribblingClass = 'Normal' \nAND TA.date >= '2014-01-01 00:00:00' \nAND TA.date <= '2014-01-31 00:00:00' \nGROUP BY T.team_long_name \nHAVING AVG(TA.chanceCreationPassing) > SUM(TA.chanceCreationPassing) \nORDER BY SUM(TA.chanceCreationPassing) DESC;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure your subqueries and aggregate functions consider the correct data set and logic when calculating averages or totals. Specifically, when comparing a value against an average, make sure you are correctly referencing the aggregated data within the context you're analyzing (e.g., same filtering conditions for both the main query and subquery). Additionally, always verify that your date filters encompass the intended range and format.",
        "ground_truth_sql": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
        "difficulty": "challenging"
    },
    {
        "question": "List all the football player with the highest potential score.",
        "hint": "potential score refers to potential; highest potential score refers to MAX(potential);",
        "error_sql": "SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to join related tables when retrieving descriptive data, such as player names, along with primary identification fields. Simply querying the attributes table without joining might yield only IDs without contextual information. Utilize joins to access necessary details from related tables correctly.",
        "ground_truth_sql": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes) ",
        "difficulty": "simple"
    },
    {
        "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
        "hint": "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';",
        "error_sql": "SELECT COUNT(pa.id) FROM Player_Attributes pa INNER JOIN Player p ON pa.player_fifa_api_id = p.player_fifa_api_id WHERE p.weight < 130 AND pa.preferred_foot = 'left'",
        "compiler_hint": "no such column: weight",
        "reflective_cot": "### Tip:\nAlways ensure you understand the relationship between tables in a database and reference the correct columns from the appropriate tables. Before writing complex queries, sketch the table structure and the relationships to remember which table contains which data. This practice can help prevent errors related to referencing non-existent columns.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
        "difficulty": "moderate"
    },
    {
        "question": "Who has the highest average finishing rate between the highest and shortest football player?",
        "hint": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
        "error_sql": "SELECT player_name FROM Player AS p INNER JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE pa.finishing = (SELECT MAX(avg_finishing) FROM (SELECT AVG(finishing) AS avg_finishing FROM Player AS p1 INNER JOIN Player_Attributes AS pa1 ON p1.player_api_id = pa1.player_api_id WHERE height IN (SELECT MAX(height) FROM Player) OR height IN (SELECT MIN(height) FROM Player) GROUP BY p1.player_api_id));",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to use the correct aggregation functions and structure your subqueries properly. When calculating averages, you should not confuse individual row calculations with aggregate calculations. Additionally, always verify that your filters and grouping are correctly applied in subqueries to avoid incorrect results. Pay attention to `GROUP BY` to ensure you aggregate over the correct set of data before comparing with the main query.",
        "ground_truth_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "List out of players whose preferred foot is left.",
        "hint": "preferred_foot = 'left';",
        "error_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the required columns in your SELECT statement. If you need specific identification for records, ensure to include non-aggregated columns in your SELECT clause, especially if you're using DISTINCT, as it may require additional fields to identify unique records correctly.",
        "ground_truth_sql": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "difficulty": "simple"
    },
    {
        "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
        "hint": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
        "error_sql": "SELECT AVG(t2.overall_rating) FROM Player_Attributes t2 INNER JOIN Player t1 ON t1.player_api_id = t2.player_api_id WHERE strftime('%Y', t2.date) BETWEEN '2010' AND '2015' AND t1.height > 170;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to use the correct comparison operators and data types consistently. In your initial queries, the conditions for date filtering and height comparison were mixed up or not appropriately structured. Always verify that the conditions align accurately with the expected logic and the database schema. Consider using explicit CAST or data type comparisons to prevent issues with averages and counts.",
        "ground_truth_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
        "hint": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
        "error_sql": "SELECT \n  (SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control ELSE 0 END) / COUNT(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.id ELSE NULL END)) - \n  (SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control ELSE 0 END) / COUNT(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.id ELSE NULL END)) AS ball_control_difference \nFROM Player AS T1 \nINNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you cast sums or aggregations to a compatible data type (e.g., REAL) when performing calculations, especially when dealing with averages, to avoid integer division and potential rounding errors. Utilize `NULLIF` to handle division by zero scenarios, as you did, but confirm that you're using the correct data types as well.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
        "hint": "The larger the birthday value, the younger the person is, and vice versa;",
        "error_sql": "SELECT player_name, birthday FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the logic behind the sorting and limits in your SQL queries. When determining who is older by comparing dates, ensure you're sorting in ascending order to get the earliest date, as it represents the older person. Additionally, validate that your query returns the necessary information directly, avoiding the use of LIMIT if it leads to ambiguity when seeking specific comparisons.",
        "ground_truth_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
        "hint": "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';",
        "error_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left' AND t2.attacking_work_rate = 'low'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the conditions for filtering in your SQL queries. Ensure that you understand the specific requirements \u2014 like distinguishing between \"remaining in position\" and \"staying active\" \u2014 and carefully verify your logic matches the desired criteria, such as using 'low' instead of 'high' for attacking work rate. Additionally, consider executing simpler queries first to verify results before adding complexity.",
        "ground_truth_sql": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "difficulty": "moderate"
    },
    {
        "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
        "hint": "player who perform best in crossing actions refers to MAX(crossing);",
        "error_sql": "SELECT player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY crossing DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries, always ensure that you are referencing the correct table aliases for the columns you want to select and order. If the column exists in multiple tables, be explicit in your references to avoid ambiguity. Also, consider including relevant columns in your SELECT statement to provide context around the results, as this can help with debugging and ensure correctness.",
        "ground_truth_sql": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What's the heading accuracy of Ariel Borysiuk?",
        "hint": "",
        "error_sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk' LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that your SQL query does not have any extraneous limitations unless necessary. In the initial attempt, using `LIMIT 1` might truncate results prematurely if multiple entries exist for the same player. Always verify whether unique values exist in the queried tables and adjust the WHERE clause accordingly to include all relevant rows if needed.",
        "ground_truth_sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
        "difficulty": "simple"
    },
    {
        "question": "What is the long passing score of the oldest player?",
        "hint": "long passing score refers to long_passing; oldest player refers to oldest birthday;",
        "error_sql": "SELECT long_passing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY birthday ASC LIMIT 1)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying related data across multiple tables, always ensure you join the tables based on their relationships. In this case, you needed to join the `Player` and `Player_Attributes` tables to access the `long_passing` score linked to the player's `player_api_id`. Avoid relying on filtering an aggregate result based on a separate subquery unless explicitly designed for that purpose. Always consider leveraging JOINs to directly correlate the necessary data for more accurate queries.",
        "ground_truth_sql": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Give the name of the league had the most matches in the 2008/2009 season?",
        "hint": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');",
        "error_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2008/2009' GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you not only group by the desired fields but also account for cases where you need the maximum count of matches. Utilize subqueries or Common Table Expressions (CTEs) to calculate aggregates while maintaining clarity in your main query. This can help avoid missing critical conditions, such as checking for the maximum number of matches per league.",
        "ground_truth_sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
        "difficulty": "simple"
    },
    {
        "question": "What is the average overall rating of the players born before the year 1986?",
        "hint": "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';",
        "error_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y', t1.birthday) < '1986'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that date comparisons are appropriately formatted and consider using functions that specifically extract the year. Use functions like `SUBSTR` to directly target the year in date strings, as some databases might not handle formatting correctly when using `STRFTIME`. Checking the output of such functions and testing with different date formats in your queries can help prevent errors.",
        "ground_truth_sql": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'",
        "difficulty": "moderate"
    },
    {
        "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
        "hint": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
        "error_sql": "SELECT ((t2B.overall_rating - t2P.overall_rating) * 100.0 / t2P.overall_rating) AS percentage_difference \nFROM Player AS t1B \nINNER JOIN Player_Attributes AS t2B ON t1B.player_api_id = t2B.player_api_id \nINNER JOIN Player AS t1P ON t1P.player_name = 'Paulin Puel' \nINNER JOIN Player_Attributes AS t2P ON t1P.player_api_id = t2P.player_api_id \nWHERE t1B.player_name = 'Ariel Borysiuk';",
        "compiler_hint": "no such column: t1B.overall_rating",
        "reflective_cot": "### Tip:\nWhen constructing SQL queries, ensure that aggregate functions (like `SUM`) are used appropriately, especially when filtering rows based on conditions. Additionally, always verify if the selected columns are correctly referenced and if you are using `JOIN` statements properly to avoid referencing fields that don't exist in the context of the query. It\u2019s also advised to test simpler versions of the query before combining complex conditions to debug more effectively.",
        "ground_truth_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "difficulty": "challenging"
    },
    {
        "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "hint": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "error_sql": "SELECT date FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Kevin Constant') AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Kevin Constant')) LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for the highest value of a specific attribute alongside its corresponding date, it's important to ensure you're correctly joining tables or using subqueries efficiently. Instead of checking against the maximum value directly, consider ordering the results based on the desired attribute and then filtering for the earliest date. This helps avoid missing context by separating the data retrieval logic into more structured steps.",
        "ground_truth_sql": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "hint": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "error_sql": "SELECT buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t2.team_long_name = 'Willem II' AND t1.date = '2012-02-22'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the correct date format and specific columns used in filtering. Pay attention to which table contains the relevant data to ensure you are joining based on the correct columns. In this case, the discrepancy was due to the incorrect usage of `date` from the `Team_Attributes` table and potential misalignment with the `team_api_id` and `team_fifa_api_id` during the join, which can lead to misleading results or omissions. Always cross-check the table schema before constructing a query.",
        "ground_truth_sql": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "moderate"
    },
    {
        "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
        "hint": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';",
        "error_sql": "SELECT defenceAggressionClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Hannover 96' AND t1.date LIKE '2015-09-10%';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen forming SQL queries, ensure that you're selecting the correct columns from the appropriate tables and that your join conditions properly relate the relevant entities. Additionally, pay close attention to the date format and ensure you use the correct operators (like `LIKE` for pattern matching) when necessary. Always cross-check the intended fields with the structure of the tables for accurate results.",
        "ground_truth_sql": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
        "difficulty": "moderate"
    },
    {
        "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
        "hint": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
        "error_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END) \nFROM Player AS t1 \nINNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id \nWHERE t2.date = '2013-07-12';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you accurately reference the correct fields, particularly when performing calculations, and double-check the JOIN conditions and filtering criteria. Always use the primary key fields for joins if one entity can reference another to avoid errors. In this case, use `player_fifa_api_id` instead of `player_api_id` for joining `Player` and `Player_Attributes`.",
        "ground_truth_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
        "difficulty": "challenging"
    },
    {
        "question": "List down the name of players who are 35 years old and above.",
        "hint": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34",
        "error_sql": "SELECT player_name FROM Player WHERE datetime('now','localtime') - datetime(birthday) > 34 * 365.25;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating age from a date, ensure that the units used are consistent and accurate. Instead of subtracting an integer (like 34 multiplied by the average number of days in a year), use date functions that properly account for leap years and varying month lengths. Utilizing functions like `JULIANDAY` helps ensure precision in date calculations. Always validate your logic against edge cases to avoid miscalculations.",
        "ground_truth_sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
        "difficulty": "simple"
    },
    {
        "question": "How many home team goal have been scored by Aaron Lennon?",
        "hint": "Aaron Lennon refers to player_name = 'Aaron Lennon'",
        "error_sql": "SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id WHERE P.player_name = 'Aaron Lennon';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific player statistics in matches, ensure that you account for the correct roles of the players (home vs. away) and not only filter by their names. It\u2019s essential to confirm the position of the player (home or away) to accurately aggregate the data you want. Always double-check column associations to avoid logical errors in your joins.",
        "ground_truth_sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
        "difficulty": "simple"
    },
    {
        "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
        "hint": "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'",
        "error_sql": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN Match AS t2 ON t1.player_api_id = t2.away_player_1 OR t1.player_api_id = t2.away_player_2 OR t1.player_api_id = t2.away_player_3 OR t1.player_api_id = t2.away_player_4 OR t1.player_api_id = t2.away_player_5 OR t1.player_api_id = t2.away_player_6 OR t1.player_api_id = t2.away_player_7 OR t1.player_api_id = t2.away_player_8 OR t1.player_api_id = t2.away_player_9 OR t1.player_api_id = t2.away_player_10 OR t1.player_api_id = t2.away_player_11 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries that involve multiple potential matches, explicitly stating the conditions for each column being checked can lead to complex and less efficient queries. Instead, always ensure to target the specific columns correctly relevant to your data model. Utilizing structured approaches such as using JOINs effectively and validating the column references are critical to avoid errors. Always verify that the relationships between tables accurately reflect the desired data to be summed or retrieved, ensuring that you use the correct reference for matching players and their corresponding goals.",
        "ground_truth_sql": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the total home team goal scored by players whose age are 30 years old and below.",
        "hint": "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)",
        "error_sql": "SELECT SUM(t2.home_team_goal) \nFROM Player AS t1 \nINNER JOIN Match AS t2 ON t1.player_api_id = t2.away_player_9 \nWHERE (JULIANDAY('now') - JULIANDAY(t1.birthday)) / 365 < 31;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen writing SQL queries that involve date calculations and filters based on age, ensure to use correct date functions and comparisons. Specifically, consider using `datetime()` or `strftime()` for consistent date operations, and confirm that the filtering logic truly captures the intended demographic. Always verify that you're joining on the correct references and columns that relate conceptually to the data, such as ensuring you're considering the correct players for the intended team.",
        "ground_truth_sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31",
        "difficulty": "moderate"
    },
    {
        "question": "State the name of players who came from Belgium.",
        "hint": "name of players refers to player_name; Belgium is name of country",
        "error_sql": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Team WHERE team_api_id IN (SELECT team_api_id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium')))",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries involving multiple joins, ensure that the relationship between tables is correctly specified and that joins are applied to the appropriate fields. Additionally, use DISTINCT when necessary to avoid duplicate entries and pay close attention to the table structures and foreign key relationships to prevent referencing the wrong columns in subqueries. Always methodically break down your query to cross-verify each join and its intended outcome.",
        "ground_truth_sql": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "difficulty": "simple"
    },
    {
        "question": "Locate players with vision scores of 90 and above, state the country of these players.",
        "hint": "vision scores of 90 and above refers to vision > 89",
        "error_sql": "SELECT P.player_name, C.name AS country \nFROM Player AS P \nJOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id \nJOIN Team AS T ON P.player_api_id = T.team_api_id \nJOIN Country AS C ON T.team_api_id = C.id \nWHERE PA.vision > 89;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you correctly relate the necessary tables for the desired query results. In this case, do not directly link the `Player` table to the `Team` table using the `player_api_id` and `team_api_id`; instead, utilize the correct relationships through the match data or ensure the `Team` table is associated with the right `Country` table using `team_api_id` or `team_fifa_api_id`. Always review the relationships defined in the schema before constructing your SQL joins.",
        "ground_truth_sql": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
        "difficulty": "moderate"
    },
    {
        "question": "Which country's players have the heaviest average weights?",
        "hint": "heaviest average weights refers to MAX(AVG(weight))",
        "error_sql": "SELECT country.name, AVG(player.weight) AS average_weight \nFROM Player AS player \nJOIN Player_Attributes AS attributes ON player.player_api_id = attributes.player_api_id \nJOIN Team AS team ON team.team_api_id = attributes.team_fifa_api_id \nJOIN League AS league ON league.id = team.team_fifa_api_id \nJOIN Country AS country ON country.id = league.country_id \nGROUP BY country.id \nORDER BY average_weight DESC \nLIMIT 1;",
        "compiler_hint": "no such column: attributes.team_fifa_api_id",
        "reflective_cot": "### Tip:\nAlways verify the relationships between tables and ensure you're referencing the correct foreign keys. It's essential to double-check the schema to understand which columns can be used for joins, particularly in complex queries involving multiple tables. Additionally, consider using database tools or visualizations to understand the data structure better, which can help avoid referencing non-existent or incorrectly named columns.",
        "ground_truth_sql": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the average heights of Italy players?",
        "hint": "average heights refers to Avg(height); Italy is name of country",
        "error_sql": "SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.player_fifa_api_id = T2.id WHERE T2.name = 'Italy';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you correctly identify and join the relevant tables. In this case, the correct relationship was between the `Player` and `Match` tables to get the appropriate `country_id`, which connects to the `Country` table. Always verify the relationships and foreign keys that accurately link the data you need for your query.",
        "ground_truth_sql": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
        "difficulty": "simple"
    },
    {
        "question": "What is the difference between players 6 and 23's jumping scores?",
        "hint": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
        "error_sql": "SELECT CAST(SUM(CASE WHEN t1.player_api_id = 6 THEN t2.jumping ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN t1.player_api_id = 23 THEN t2.jumping ELSE 0 END) AS REAL) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are referencing the correct columns and tables. Carefully read the error messages and verify that you're accessing attributes (like scores) from the appropriate table associated with the correct identifiers. Double-check the conditions in your SQL statements to make sure you are filtering based on the correct identifiers (like `id` instead of `player_api_id`). This can help avoid logical errors in your queries.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
        "difficulty": "simple"
    },
    {
        "question": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
        "hint": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
        "error_sql": "SELECT t1.player_api_id FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MIN(potential) FROM Player_Attributes) AND t2.preferred_foot = 'right' LIMIT 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:  \nWhen querying for players with specific conditions, make sure to prioritize the correct filters based on the requirement. Instead of checking for the exact minimum potential in the context of a single player, consider querying for players who fit a broader criterion (e.g., right-footed players) and ordering by their potential to identify the lowest values. This approach ensures that you don't unintentionally restrict the results and miss qualifying players. Always verify how the filtering and sorting interact to achieve the desired output.",
        "ground_truth_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?",
        "hint": "In the 2015\u20132016 season refers to season = '2015/2016'",
        "error_sql": "SELECT COUNT(*) FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t2.name = 'Serie A'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the table names and their relationships during the JOIN operations. Ensure that the matching conditions align with the actual foreign key references and that you're using the correct primary and foreign keys for both tables involved in the JOIN.",
        "ground_truth_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
        "difficulty": "simple"
    },
    {
        "question": "What was the highest score of the home team in the Netherlands Eredivisie league?",
        "hint": "highest score of the home team refers to MAX(home_team_goal)",
        "error_sql": "SELECT MAX(home_team_goal) FROM Match AS t1 JOIN League AS t2 ON t1.league_id = t2.id WHERE t2.name = 'Eredivisie'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are referencing the correct table aliases and fields in your SQL queries. Double-check that the column names and their associated tables are correctly aligned, especially with joins. Using consistent aliasing and fully qualifying column names (e.g., `t1.home_team_goal` instead of `home_team_goal`) can help avoid confusion and prevent errors.",
        "ground_truth_sql": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'",
        "difficulty": "simple"
    },
    {
        "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
        "hint": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
        "error_sql": "SELECT t2.finishing, t2.curve FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight = (SELECT MAX(weight) FROM Player)",
        "compiler_hint": "no such column: t1.finishing",
        "reflective_cot": "### Tip:\nAlways double-check the columns available in the tables you are querying to ensure you're referencing the correct ones, especially when joining tables. In this case, the first query mistakenly referred to a missing column from the `Player` table instead of properly accessing the attributes in the `Player_Attributes` table.",
        "ground_truth_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
        "hint": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
        "error_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player)) AS percentage FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180 AND t2.overall_rating > 70;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages, ensure to count only the relevant subset in both the numerator and denominator. Use conditional aggregation to avoid counting incorrect values and validate the logic of your conditions.",
        "ground_truth_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
        "difficulty": "moderate"
    },
    {
        "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
        "hint": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'",
        "error_sql": "SELECT DISTINCT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis\nFROM Patient AS P\nINNER JOIN Laboratory AS L ON P.ID = L.ID\nWHERE STRFTIME('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying databases, ensure to fully understand the conditions and constraints you are applying. Specifically, check the logic of your comparisons (e.g., using `>=` versus `>`) and make sure the data types being compared are consistent (e.g., if a comparison involves a numeric field, ensure the value being compared is also numeric and not mistakenly treated as a string). Always validate the requirements outlined in the task before writing the query to avoid misunderstandings.",
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of female patient had total protein not within the normal range?",
        "hint": "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your denominator in a percentage calculation reflects the correct group size. In this case, make sure you are counting all female patients, not just those with laboratory results, by using `COUNT(*)` instead of `COUNT(ID)` after the join. This helps prevent skewing the results due to missing data in the joined tables.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
        "difficulty": "moderate"
    },
    {
        "question": "What was the age of the youngest patient when they initially arrived at the hospital?",
        "hint": "age refers to SUBTRACT(YEAR(`First Date`),YEAR(Birthday))",
        "error_sql": "SELECT MIN(JULIANDAY(`First Date`) - JULIANDAY(Birthday)) / 365.25 AS age FROM Patient;",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "### Tip:\nWhen calculating age or manipulating dates in SQL, ensure you're using the database's date functions correctly. For instance, the YEAR function may not be available in all SQL database systems. Instead, use functions like STRFTIME or STR_TO_DATE that are compatible with your specific SQL dialect to extract year components or manipulate dates effectively. Always refer to the documentation for your SQL variant to understand the available functions and their usage.",
        "ground_truth_sql": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient",
        "difficulty": "simple"
    },
    {
        "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
        "hint": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL",
        "error_sql": "SELECT E.Symptoms, E.Diagnosis FROM Examination AS E \nINNER JOIN Patient AS P ON E.ID = P.ID \nWHERE P.Birthday = (SELECT MAX(Birthday) FROM Patient) AND E.Symptoms IS NOT NULL \nLIMIT 1;",
        "compiler_hint": "ambiguous column name: Diagnosis",
        "reflective_cot": "### Tip:\nAlways alias columns explicitly with table prefixes to avoid ambiguity, especially when joining multiple tables with overlapping column names. Use the format `tableName.columnName` when referencing columns in SELECT statements, WHERE clauses, and elsewhere, to ensure clarity and prevent errors.",
        "ground_truth_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "hint": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "error_sql": "SELECT MAX(Laboratory.Date), (STRFTIME('%Y', Patient.`First Date`) - STRFTIME('%Y', Patient.Birthday)) AS age \nFROM Patient \nINNER JOIN Laboratory ON Patient.ID = Laboratory.ID \nWHERE Patient.Diagnosis = 'SJS' \nGROUP BY Patient.ID \nORDER BY Patient.Birthday ASC \nLIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the columns used in the SELECT statement are appropriate for the aggregation or grouping, and carefully consider conditions applied to the data, especially in WHERE clauses. Additionally, when using JOINs, ensure that all relevant conditions are included to prevent errors or omissions in the results. Always run test queries on smaller datasets to debug and refine your logic before applying it to larger datasets.",
        "ground_truth_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
        "hint": "hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.ID IS NULL OR STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the logical conditions in your SQL queries, especially when dealing with date calculations and joins. Be aware of whether you need an INNER JOIN or LEFT JOIN based on the requirement to count records that may not exist in the joined table. Additionally, ensure that any filtering conditions are correctly aligned with the desired outcome to avoid counting records incorrectly.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
        "hint": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) <= strftime('%Y', T2.`Examination Date`) - 18 AND strftime('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating age based on two dates, ensure you're subtracting the year of birth from the examination year correctly. Instead of evaluating age based on the year differences, calculate it explicitly by comparing the actual years and months/days between the two dates. Additionally, always double-check the logical conditions to ensure they match the requirements of the question.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
        "difficulty": "challenging"
    },
    {
        "question": "How many male patients have elevated total bilirubin count?",
        "hint": "male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` >= '2.0'",
        "error_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` >= 2.0",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways use `COUNT(DISTINCT ...)` when counting unique entities, especially when joining multiple tables. This prevents double-counting when there are multiple laboratory records for the same patient.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?",
        "hint": "average age of patients as of year 1999 refers to AVG(SUBTRACT('1999', year(Birthday))); October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "error_sql": "SELECT AVG(STRFTIME('%Y', '1999') - STRFTIME('%Y', T2.Birthday)) \nFROM Laboratory AS T1 \nINNER JOIN Patient AS T2 ON T1.ID = T2.ID \nWHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-31';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are using the correct data types for mathematical operations. In SQL, manipulating strings as numbers can lead to incorrect results, especially if they are not properly cast or converted. Make sure to cast date fields to their appropriate numeric representations before performing arithmetic operations to avoid errors.",
        "ground_truth_sql": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "difficulty": "moderate"
    },
    {
        "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
        "hint": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
        "error_sql": "SELECT SUBTRACT(YEAR(T1.`Examination Date`), YEAR(T2.Birthday)), T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ID IN (SELECT ID FROM Examination ORDER BY HGB DESC LIMIT 1)",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "### Tip:\nAlways verify the appropriate functions and syntax for the SQL dialect you are using, as functions like `YEAR()` may not exist in all databases. Use standard functions such as `STRFTIME` in SQLite or refer to the relevant documentation to ensure accuracy. Additionally, double-check the join conditions and the source tables to correctly retrieve data needed for your queries.",
        "ground_truth_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What was the gender of the first AORTITIS diagnosed patient?",
        "hint": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "error_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to include any necessary conditions to filter out irrelevant rows, such as checking for NULL values in important columns (like `First Date`) before applying sorting and limiting results. This helps avoid incomplete data that could lead to incorrect outcomes.",
        "ground_truth_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
        "hint": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
        "error_sql": "SELECT T2.`aCL IgM` \nFROM Patient AS T1 \nINNER JOIN Examination AS T2 ON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'SLE' \nAND T1.Description = '1994-02-19' \nAND T2.`Examination Date` = '1993-11-12'",
        "compiler_hint": "no such column: T1.aCL IgM",
        "reflective_cot": "### Tip:\nAlways verify the table structure and column names before writing SQL queries. If you encounter an error regarding a column, double-check the spelling, position, and table references in your query to ensure you are accessing the correct columns from the intended tables. Use tools or commands to display the schema of the database, and consider practicing with sample data to build familiarity with the structure.",
        "ground_truth_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
        "difficulty": "moderate"
    },
    {
        "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
        "hint": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))",
        "error_sql": "SELECT (SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` END)) * 1.0 / SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` END) AS DecreaseRate \nFROM Patient AS T3 \nINNER JOIN Laboratory AS T2 ON T3.ID = T2.ID \nWHERE T3.Birthday = '1959-02-18';",
        "compiler_hint": "no such column: T3.T-CHO",
        "reflective_cot": "### Tip:\nAlways ensure you're referencing the correct alias for the tables in your SQL queries. In the case of aggregate functions, make sure to provide appropriate defaults (like zero) in your `SUM` calculations to avoid null results. Additionally, double-check your logical conditions and ensure that all the necessary columns from the appropriate tables are referenced correctly. Using clear aliases and consistent naming conventions can help avoid confusion.",
        "ground_truth_sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
        "difficulty": "challenging"
    },
    {
        "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
        "hint": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "error_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet' AND T2.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the columns you're filtering or selecting from are part of the correct table as referenced in your JOIN operations. In your case, the `Diagnosis` field was mistakenly referenced from the `Patient` table instead of directly from the `Examination` table after joining them. Double-check which table each column belongs to, especially when filtering results based on specific conditions.",
        "ground_truth_sql": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
        "difficulty": "moderate"
    },
    {
        "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
        "hint": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nINNER JOIN Examination AS T2 ON T1.ID = T2.ID \nWHERE T2.Thrombosis = 2 AND T2.`ANA Pattern` = 'S' AND T2.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination);",
        "compiler_hint": "misuse of aggregate: AVG()",
        "reflective_cot": "### Tip:\nWhen using aggregate functions like `AVG()`, ensure they're calculated in a subquery or a separate context, especially if you need to compare results against them. Additionally, remember to check your table column names and conditions thoroughly to avoid mismatches (like using `ANA` instead of `ANA Pattern` in the first query). Always validate your groupings or counts after aggregations to ensure the logic aligns with your data structure.",
        "ground_truth_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
        "difficulty": "challenging"
    },
    {
        "question": "What is the most common sign of patients with SLE disease?",
        "hint": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "error_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to use the correct aggregate function count for the column you want to group by. When counting occurrences, use `COUNT(Symptoms)` rather than `COUNT(*)` to avoid counting rows instead of specific non-null values. Additionally, when grouping results, be mindful of any potential NULL values in the column being grouped and consider filtering those out, if necessary. This helps ensure the accuracy of the results based on the intended grouping criteria.",
        "ground_truth_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
        "hint": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id",
        "error_sql": "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to clearly understand the requirements of the query, specifically the fields being requested. In this case, the requirement was to obtain the first documentation date (`First Date`) and the diagnosis, not just any description. Always double-check to match the specified fields in the prompt with the correct columns in the database schema before constructing the SQL query.",
        "ground_truth_sql": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
        "difficulty": "simple"
    },
    {
        "question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?",
        "hint": "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date BETWEEN '1997-01-01' AND '1997-12-31' AND (T2.TP < 6.0 OR T2.TP > 8.5)",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "### Tip:\nAlways check the SQL dialect being used, as functions like `YEAR()` may not be supported in certain databases. Instead, use compatible functions (e.g., `STRFTIME` in SQLite) to extract date components. Additionally, double-check that all relevant conditions and filtering criteria match accurately with the problem statement, including variable names and their corresponding measurements.",
        "ground_truth_sql": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'",
        "difficulty": "simple"
    },
    {
        "question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?",
        "hint": "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN E.Symptoms LIKE '%ITP%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN P.Diagnosis = 'SLE' THEN 1 END) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID;",
        "compiler_hint": "ambiguous column name: Diagnosis",
        "reflective_cot": "### Tip:\nAlways qualify your column names with the table aliases in queries that involve multiple tables with potentially overlapping column names. This practice prevents ambiguity and errors in SQL statements, especially when using similar or common field names across different tables.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients who were female got white blood cells that were below 3.5?",
        "hint": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways validate the logical flow of your SQL query by checking the order of joins and conditions. Ensure that the WHERE clause conditions are properly arranged and that all necessary conditions are explicitly stated to avoid missing any critical filters. Use consistent table aliases and check if they are correctly applied throughout the query.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'",
        "difficulty": "simple"
    },
    {
        "question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?",
        "hint": "DATEDIFF(`Examination Date`, `First Date`)",
        "error_sql": "SELECT MIN(T2.`Examination Date`) - T1.`First Date` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 821298;",
        "compiler_hint": "no such function: DATEDIFF",
        "reflective_cot": "### Tip:\nWhen dealing with date calculations in SQL, always refer to the specific SQL dialect documentation to understand the functions available and their correct usage for date arithmetic. In cases where a function (like DATEDIFF) is not available, find alternative methods or use supported functions (like STRFTIME) to achieve the desired outcome.",
        "ground_truth_sql": "SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298",
        "difficulty": "simple"
    },
    {
        "question": "Was the patient with the number 57266's uric acid within a normal range?",
        "hint": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
        "error_sql": "SELECT CASE \n    WHEN (SEX = 'M' AND UA > 8.0) OR (SEX = 'F' AND UA > 6.5) THEN 'Within Normal Range' \n    ELSE 'Outside Normal Range' \nEND AS Uric_Acid_Status \nFROM Patient AS P \nINNER JOIN Laboratory AS L ON P.ID = L.ID \nWHERE P.ID = 57266;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your logical conditions are correctly implemented. In this case, the first SQL query mistakenly checked if UA was greater than the normal range instead of checking if it was less than or equal to that value for determining if it was \"Outside Normal Range.\" Double-checking your logical operators and understanding the requirements for the conditions can help prevent such errors in the future.",
        "ground_truth_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
        "difficulty": "moderate"
    },
    {
        "question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
        "hint": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;",
        "error_sql": "SELECT T1.ID, STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) AS Age \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.LDH BETWEEN 600 AND 800;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to differentiate between \"greater than\" and \"less than\" conditions when specifying ranges. In the initial query, using `BETWEEN` included the endpoints, which might not always be ideal. Instead, using `>` and `<` for open-ended ranges can help clarify your intentions. Additionally, reviewing the logical constraints thoroughly before finalizing the query can prevent inaccuracies.",
        "ground_truth_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800",
        "difficulty": "moderate"
    },
    {
        "question": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?",
        "hint": "alkaliphophatase (ALP) within normal range refers to ALP < 300; inpatient refers to admission = '+'; outpatient refers to admission = '-'",
        "error_sql": "SELECT T1.Admission, COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 GROUP BY T1.Admission;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SELECT statement retrieves all required data fields and aggregates only when necessary. In your query, you attempted to count IDs, which was valid; however, you need to explicitly include any group by fields to achieve desired results correctly. When comparing data across tables, also check that logical operations reflect the intent (like ensuring you retrieve all relevant details before grouping).",
        "ground_truth_sql": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300",
        "difficulty": "moderate"
    },
    {
        "question": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?",
        "hint": "alkaliphophatase (ALP) within normal range refers to ALP < 300",
        "error_sql": "SELECT T1.ID, CASE WHEN T2.ALP < 300 THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to check for the most relevant laboratory results by including a date filter for the latest data entry or the desired date range. When joining tables, consider if you need to restrict results from the joined table to the latest record for each patient to avoid aggregating multiple records incorrectly.",
        "ground_truth_sql": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
        "difficulty": "moderate"
    },
    {
        "question": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.",
        "hint": "female refers to SEX = 'F'; total protein (TP) beyond the normal index refers to TP > 8.5; deviation of TP index from normal refers to SUBTRACT(TP, 8.5)",
        "error_sql": "SELECT T2.ID, (T2.TP - 8.5) AS Deviation FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your SQL SELECT statement includes all the necessary columns you want to retrieve. In the initial queries, the ID was included, but the core calculation (deviation of TP from normal) was not fully expressed with the right select clause. Carefully analyze your requirements and check if you need to retrieve more than just the calculated result to meet the query's objectives.",
        "ground_truth_sql": "SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5",
        "difficulty": "moderate"
    },
    {
        "question": "Sort in descending order all patients by birthday for male patient with albumin not within range.",
        "hint": "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5",
        "error_sql": "SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for specific attributes, ensure that the fields you are selecting match the context of the requirements. If your goal is to sort and list unique patients, include appropriate aggregation or distinct clauses. Additionally, be mindful of the columns in your `SELECT` statement and ensure they correspond correctly to the intended output, particularly when filtering or joining data.",
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
        "difficulty": "simple"
    },
    {
        "question": "For all patient born in 1982, state if their albumin is within normal range.",
        "hint": "Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5",
        "error_sql": "SELECT T1.ID, CASE WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways use inclusive comparisons (`>=` and `<=`) when checking ranges in SQL to ensure values on the boundaries are accounted for. In this case, using `BETWEEN` was incorrect because it does not include both endpoints.",
        "ground_truth_sql": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'",
        "difficulty": "moderate"
    },
    {
        "question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
        "hint": "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)",
        "error_sql": "SELECT AVG(T2.UA) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE (T1.SEX = 'F' AND T2.UA < 6.5) OR (T1.SEX = 'M' AND T2.UA < 8.0) \nAND T2.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = T1.ID);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to correctly group the logical conditions in your SQL queries using parentheses. This is crucial when combining multiple AND and OR conditions. In your case, the absence of parentheses caused the WHERE clause to be evaluated incorrectly, leading to unexpected filtering of results. For example, explicitly grouping conditions like `((T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M'))` helps to maintain clarity and ensure the correct logic flow.",
        "ground_truth_sql": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )",
        "difficulty": "moderate"
    },
    {
        "question": "How many male patients are are with creatinine index out of the normal range?",
        "hint": "creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen counting unique records based on group criteria, using `COUNT(DISTINCT ...)` may not always be necessary unless you want unique counts of a specific column. In this case, using `COUNT(...)` would accurately reflect the total number of records meeting the criteria without over-complicating the query. Always verify that you're counting what you truly intend to count.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question": "Are there more male patients with creatinine not within the normal range than female? True or False?",
        "hint": "creatinine (CRE) not within the normal range refers to CRE > = 1.5; male refers to Sex = 'M'; female refers to Sex = 'F'; calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5",
        "error_sql": "SELECT (SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END)) AS result \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.CRE >= 1.5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that conditional aggregations are done within their relevant scopes. When counting or summing cases based on conditions, use a clear distinction to separate the counting logic from the criteria used in the WHERE clause, making it explicit how each condition applies to the grouping. This way, you can accurately filter and count your data as intended.",
        "ground_truth_sql": "SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5",
        "difficulty": "challenging"
    },
    {
        "question": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.",
        "hint": "the highest total bilirubin refers to MAX(T-BIL)",
        "error_sql": "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen trying to find a specific aggregate value like the maximum of a column, ensure to include that aggregate in your select list, or make your query concise by using `ORDER BY` and `LIMIT` to directly fetch the desired result along with associated columns. This avoids the need for subqueries and can enhance clarity and performance.",
        "ground_truth_sql": "SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
        "hint": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
        "error_sql": "SELECT T1.SEX, GROUP_CONCAT(DISTINCT T1.ID) AS PatientIDs FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen constructing SQL queries that involve grouping and aggregating data, ensure that you include all non-aggregated columns in the `GROUP BY` clause. This prevents ambiguity and ensures that the query adheres to SQL standards, thereby avoiding potential errors or incorrect results.",
        "ground_truth_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
        "difficulty": "moderate"
    },
    {
        "question": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.",
        "hint": "oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);",
        "error_sql": "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory) AND T1.Birthday = (SELECT MIN(Birthday) FROM Patient) LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to account for multiple conditions that could potentially intersect when using subqueries. In this case, the criteria for the oldest patient and the highest total cholesterol could lead to separate rows in the results; instead, you should be combining these criteria in such a way that you can extract a single result that meets both conditions effectively. Using ORDER BY can simplify retrieval by allowing a sort of the results based on your criteria, rather than relying solely on equality checks in subqueries.",
        "ground_truth_sql": "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.",
        "hint": "blood glucose (GLU) index that were within normal range refers to GLU < 180; data that was first recorded in 1991 refers to year(Description) = 1991;",
        "error_sql": "SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Description IS NOT NULL AND STRFTIME('%Y', T1.Description) = '1991' AND T2.GLU < 180;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are referencing the correct columns in your WHERE clause. In this case, the query was mistakenly filtering based on the `Description` column instead of the `First Date` column to identify records from 1991. Double-check the requirements and the table structure to correctly match the requested criteria.",
        "ground_truth_sql": "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180",
        "difficulty": "moderate"
    },
    {
        "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
        "hint": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
        "error_sql": "SELECT T1.ID, STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) AS Age, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to use the appropriate functions and operators for date calculations to avoid logical errors. Additionally, be cautious about using `DISTINCT` to remove duplicates in queries where redundant rows may occur, and confirm that all necessary conditions are clearly stated to prevent missing relevant data. ",
        "ground_truth_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
        "difficulty": "moderate"
    },
    {
        "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
        "hint": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
        "error_sql": "SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.HCT >= 52 \nGROUP BY T1.ID \nHAVING COUNT(T2.ID) > 2;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to correctly reference the necessary columns while using aggregate functions and maintain clarity in the groupings and conditions applied. It\u2019s recommended to structure your query with subqueries to isolate conditions or results specific to the requirements, especially when filtering counts and conditions overlap. In this case, filtering the counts of examinations meeting specific conditions was crucial, so using subqueries can help clarify which patients meet such thresholds before aggregating them.",
        "ground_truth_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
        "difficulty": "challenging"
    },
    {
        "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
        "hint": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
        "error_sql": "SELECT \n    SUM(PLT < 100) AS Lower_Than_Normal, \n    SUM(PLT > 400) AS Higher_Than_Normal \nFROM Laboratory \nWHERE PLT <= 100 OR PLT >= 400;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to properly join related tables and ensure that your conditions reflect the specific requirements of your query. When counting or summing values based on conditions, remember to use proper CASE statements or aggregations that align with the overall structure of your query. Pay attention to the logical operators (e.g., AND vs. OR) to ensure accurate filtering of results. Testing smaller parts of your query can help identify where the logic might be deviating from your goals.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
        "difficulty": "challenging"
    },
    {
        "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
        "hint": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
        "error_sql": "SELECT T1.ID, (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday)) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.Date) = '1984' AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday)) < 50 AND T2.PLT BETWEEN 100 AND 400",
        "compiler_hint": "no such function: YEAR",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, be cautious about the functions and syntax available in the specific SQL dialect you are using. In this case, instead of using undefined functions like `YEAR()`, rely on the string manipulation functions provided by the SQL engine, such as `strftime()`. Always double-check the documentation for the specific SQL variant (e.g., SQLite, MySQL, etc.) to ensure you're using the correct functions. Additionally, consider breaking down complex conditions into simpler parts and validate each independently to catch errors early.",
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
        "difficulty": "challenging"
    },
    {
        "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
        "hint": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND T2.PT >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) > 55;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages, ensure to use the correct denominator for your overall count. In the original query, you attempted to use the sum of individuals with abnormal PT as the denominator, which is incorrect. Instead, use `COUNT(*)` for the total number of patients who are older than 55, regardless of PT value. This helps in accurately calculating the desired percentage. Always verify the logic and ensure the denominator represents the correct population for the calculation.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
        "difficulty": "challenging"
    },
    {
        "question": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?",
        "hint": "examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'; normal activated partial prothrom bin time refesr to APTT < 45;",
        "error_sql": "SELECT COUNT(*) FROM Laboratory WHERE ID IN (SELECT ID FROM Examination WHERE `Examination Date` > '1997-01-01') AND APTT < 45;",
        "compiler_hint": "no such column: APTT",
        "reflective_cot": "### Tip:\nAlways verify the source of the data you are querying. In your initial query, you incorrectly assumed the `APTT` column existed in the `Examination` table, but it is actually in the `Laboratory` table. To avoid such mistakes, familiarize yourself with the schema, and double-check the table and column names being referenced in your SQL queries. Utilizing descriptive aliases and commenting your code can also enhance clarity and reduce confusion about which tables and columns contain the required data.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?",
        "hint": "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive.",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.APTT > 45 AND T1.ID NOT IN (SELECT ID FROM Examination WHERE Thrombosis IS NOT NULL);",
        "compiler_hint": "no such column: T1.Thrombosis",
        "reflective_cot": "### Tip:\nAlways ensure that you're referencing the correct columns from the appropriate tables by thoroughly understanding the relationships between them. It\u2019s crucial to check the structure of the tables you\u2019re joining to prevent referencing non-existing columns. Always do a clear analysis of conditions involved in WHERE clauses, especially when dealing with related tables, to ensure that all criteria are indexed correctly and logically lead to the expected results.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
        "difficulty": "moderate"
    },
    {
        "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
        "hint": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the logical order of conditions in your SQL queries follows the necessary precedence for evaluation. Specifically, group conditions logically to make sure that the desired filtering applies to the relevant subsets of data. Using explicit parentheses can help clarify the order of operations and ensure that the intended logic is preserved, preventing misunderstandings in the filtering criteria.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?",
        "hint": "born after 1980/1/1 refers to Birthday > '1980-01-01'; normal fibrinogen level refers to FG between 150 and 450; Should return the number of distinct patients.",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND (T2.FG <= 150 OR T2.FG >= 450)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that all conditions in the WHERE clause are logically combined correctly, especially when dealing with multiple conditions related to different tables. Always place table-specific filters ensuring they do not conflict with each other and maintain the correct sequence of logical operators (AND/OR) for clarity and correctness. Using parentheses can help clarify the order of operations and relationships between conditions.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients with an Ig G higher than normal?",
        "hint": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to check if joining conditions are necessary to correlate data accurately between tables. In this case, you needed to join the `Laboratory` table with the `Patient` table to ensure you are counting distinct patients instead of just distinct records from the `Laboratory` table. Always consider the relationships and dependencies among tables in your queries to avoid missing relevant data.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
        "difficulty": "simple"
    },
    {
        "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
        "hint": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T3.Symptoms IS NOT NULL",
        "compiler_hint": "no such column: T1.Symptoms",
        "reflective_cot": "### Tip:\nAlways verify which table contains the columns you need before writing the SQL query. In cases where multiple tables are involved, clearly reference the correct table to avoid ambiguity and misunderstandings about where certain data resides. Use explicit table references for columns and carefully check the join conditions to ensure you connect the right records.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
        "hint": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA > 80 AND T2.IGA < 500 AND STRFTIME('%Y', T1.`First Date`) >= 1990",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure your date comparisons are made in a format that maintains their integrity as dates. When checking date ranges or conditions, prefer using date functions or operators that are specifically meant for date types, rather than string functions like `STRFTIME`, which can lead to unintended type conversions or comparisons. Additionally, when using ranges, the `BETWEEN` operator can provide clarity and correctness in boundaries, especially for numerical comparisons like `IGA`.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
        "hint": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
        "error_sql": "SELECT Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM <= 40 OR T2.IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are using the correct range and logic for filtering data. Instead of using conditions like `<= 40 OR >= 400`, consider using range checks like `NOT BETWEEN 40 AND 400` for clarity. Additionally, confirm that you are referencing the correct tables and column names in both the `SELECT` and `JOIN` statements to ensure accurate results.",
        "ground_truth_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
        "hint": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP = '+' AND T1.Description IS NULL;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways analyze the requirements carefully regarding the type of JOIN needed. In this case, to find patients without recorded data, a LEFT JOIN is appropriate. Additionally, ensure that the conditions for filters are logically set up to accurately capture all relevant cases, especially when considering NULL values.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
        "hint": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
        "error_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) < 70",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you use the correct functions and syntax for your date calculations, and be mindful of differences in SQL dialects. Additionally, double-check that you account for unique IDs when counting to avoid double counting from joins; using `COUNT(DISTINCT ...)` can help with this.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?",
        "hint": "normal Rhuematoid Factor refers TO RA IN('-', '+-'); positive measure of degree of coagulation refers to KCT = '+'; Should compute the number of distinct ones",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RA IN ('-', '+-') AND T2.RF = '+'",
        "compiler_hint": "no such column: T2.RA",
        "reflective_cot": "### Tip:\nAlways carefully analyze the relationships between tables and ensure you are referencing the correct columns from the appropriate tables in your joins. Take the time to understand the structure of your database schema and the logical connections between entities before constructing your SQL queries. This includes checking that all required columns from joined tables are correctly specified and that you understand how to access data from multiple tables at once.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.",
        "hint": "Hematoclit is normal refers to 29 < N < 52; highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`);",
        "error_sql": "SELECT ID FROM Laboratory WHERE HCT <= 29 OR HCT >= 52 ORDER BY IGA DESC LIMIT 1;",
        "compiler_hint": "no such column: aCL IgA",
        "reflective_cot": "### Tip:\nAlways verify the existence of columns in the relevant tables before writing your query, especially when working with multiple tables. Use proper joins to access the required columns from related tables. Ensure that you are referencing the correct table for each column to avoid \"no such column\" errors.",
        "ground_truth_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29) ORDER BY T2.`aCL IgA` DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
        "hint": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+';",
        "compiler_hint": "no such column: T2.RNP",
        "reflective_cot": "### Tip:\nAlways verify the column names and their existence in the tables you are querying against before executing the SQL. Double-check data definitions and relationships to ensure your query references the correct tables and attributes. Using proper naming conventions and clear aliasing can help prevent such errors.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
        "hint": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.SM IN ('-', '+-') \nAND T2.ID NOT IN (SELECT ID FROM Examination WHERE Thrombosis = 1)",
        "compiler_hint": "no such column: T2.SM",
        "reflective_cot": "### Tip:\nAlways verify the schema of all relevant tables to ensure that you are referencing the correct columns, especially when joining multiple tables. Check for the presence of the columns in the intended tables before executing the query, as assumptions about where a column exists can lead to errors. Additionally, be cautious about the logical flow and conditions in your WHERE clause to ensure they align with the intended data filtering.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
        "difficulty": "moderate"
    },
    {
        "question": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.",
        "hint": "examination done after 1997/1/1 refers to `Examination Date` >  1997-01-01; normal anti-scl70 refers to SC170 IN('negative','0');",
        "error_sql": "SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.SC170 IN ('negative', '0');",
        "compiler_hint": "no such column: SC170",
        "reflective_cot": "### Tip:\nAlways ensure you understand the relationships between tables in your SQL queries before executing them. In this case, the error occurred because the `SC170` column is part of the `Laboratory` table, not the `Examination` table. Double-check the schema to confirm where specific columns are located and which tables to join based on the query requirements.",
        "ground_truth_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
        "hint": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative', '0') AND T1.SEX = 'F' AND T1.ID NOT IN (SELECT ID FROM Examination WHERE Symptoms IS NOT NULL)",
        "compiler_hint": "no such column: T1.Symptoms",
        "reflective_cot": "### Tip:\nAlways verify the table structures and the columns present in each table before writing queries. In your first attempt, the mistake was due to referencing the `Symptoms` column in the `Patient` table, which does not exist there. Make sure to double-check the schema to ensure that you are referring to the correct table and column. Using an alias (like `T1`, `T2`, etc.) can sometimes lead to confusion if the schema isn't clearly understood.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients with a normal anti-SSA came to the hospital before 2000?",
        "hint": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('-', '+-') AND strftime('%Y', T1.`First Date`) < '2000'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the column being filtered and the context of the date comparisons. In this case, ensure you're referencing the correct date column for the `First Date` condition and verify that the SSA values match the expected values based on the database schema and requirements.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'",
        "difficulty": "moderate"
    },
    {
        "question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
        "hint": "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('negative', '0') AND T1.Diagnosis = 'SLE'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways use explicit conditions for each checked value in SQL queries. When using `IN`, ensure that the statement is properly formatted, e.g., instead of `AND T2.SSB IN ('negative', '0')`, which should correctly list all conditions, consider alternatives like `T2.SSB = 'negative' OR T2.SSB = '0'`. This helps prevent logical errors that arise from mixing operators or incorrectly constructing the conditionals.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?",
        "hint": "anti-SSB are normal refers to SSB IN ('negative', '0'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.SSB IN ('negative', '0') AND T3.Symptoms IS NOT NULL",
        "compiler_hint": "no such column: T1.Symptoms",
        "reflective_cot": "### Tip:\nAlways ensure you are referencing the correct columns and tables based on the intended query criteria. When designing your SQL, double-check the relationships between tables and confirm that the columns you wish to access exist in the correct tables. Use table aliases consistently to avoid confusion, and remember to confirm that conditions are logical (e.g., using `AND`/`OR` correctly).",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
        "hint": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the specific terminology used in the database for categories or conditions, such as the values representing \"normal\" levels or statuses. Ensure to cross-check against the dataset documentation or schema to avoid misunderstandings when formulating your SQL queries. In the case of this query, confirming the exact representations of normal levels (e.g., 'negative' or '0') would prevent errors in logical filtering.",
        "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?",
        "hint": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);",
        "error_sql": "SELECT (COUNT(CASE WHEN T2.Diagnosis = 'SLE' THEN 1 END) * 100.0 / COUNT(*)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60;",
        "compiler_hint": "no such column: T1.Diagnosis",
        "reflective_cot": "### Tip:\nAlways ensure that the necessary columns are referenced correctly in your SQL queries, especially after performing joins. Additionally, be attentive to the use of `WHERE` clauses and aggregation functions to guarantee accurate filtering and counting of records. Double-check the logic for conditions applied during counting, particularly when using specific keywords like `LIKE`, to match cases or substrings correctly.",
        "ground_truth_sql": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60",
        "difficulty": "moderate"
    },
    {
        "question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
        "hint": "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you understand the requirement for counting unique occurrences by using `COUNT(DISTINCT ...)` appropriately. In cases where you expect multiple records for a patient, like lab tests, use `COUNT(DISTINCT T1.ID)` to avoid counting the same patient multiple times. Always review the join conditions and the aggregation function to ensure they align with the desired output.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?",
        "hint": "normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that the COUNT function is used properly based on the context. When counting distinct IDs, it might inadvertently lead to inaccuracies if multiple entries exist for the same patient in related tables. If you're simply interested in the total number of male patients that meet a condition without the need for distinct counting, use COUNT without DISTINCT to avoid unnecessary complexity.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "difficulty": "simple"
    },
    {
        "question": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?",
        "hint": "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);",
        "error_sql": "SELECT MIN(T1.`First Date`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen designing SQL queries, ensure that the conditions match the intended logic precisely. In this case, you were attempting to retrieve the first date associated with the maximum LDH under a specific threshold. The initial query incorrectly used equality in the WHERE clause for LDH, while it should have looked for records below the threshold. Additionally, avoid using GROUP BY unnecessarily when your goal can be achieved with ordering and limiting the results directly. Always double-check the logic and relationships in subqueries to ensure they align with what you're trying to accomplish.",
        "ground_truth_sql": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?",
        "hint": "diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify if you are counting unique patient IDs correctly by using `COUNT(DISTINCT T1.ID)` when you want to ensure that duplicate entries for the same patient do not affect your count. In cases where you are simply counting the number of occurrences without needing to eliminate duplicates, using `COUNT(T1.ID)` may be sufficient, but ensure this aligns with your analysis goals.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
        "difficulty": "moderate"
    },
    {
        "question": "What is the examination date of the patient whose albumin is the highest in the normal range?",
        "hint": "examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);",
        "error_sql": "SELECT Date FROM Laboratory WHERE ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your query accurately captures the logic of the conditions specified, especially when dealing with ranges. Instead of attempting to find an exact match for the maximum value using `=` (which could lead to unintended results if there are no exact matches), use conditional clauses like `BETWEEN` combined with an `ORDER BY` statement to select the highest value within the specified range directly.",
        "ground_truth_sql": "SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "How many male patients have a normal level of both albumin and total protein?",
        "hint": "male refers to Sex = 'M'; normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP >= 6.0 AND T2.TP <= 8.5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways use appropriate logical operators that align with the specified conditions. For numerical ranges, using `BETWEEN ... AND ...` can improve clarity and accuracy, ensuring both limits are included without oversights.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5",
        "difficulty": "moderate"
    },
    {
        "question": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?",
        "hint": "anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`; female patient refers to Sex = F'; highest uric acid level in the normal range refers to MAX(UA > 6.50);",
        "error_sql": "SELECT T3.`aCL IgA`, T3.`aCL IgG`, T3.`aCL IgM` \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nINNER JOIN Examination AS T3 ON T1.ID = T3.ID \nWHERE T1.SEX = 'F' AND T2.UA <= 6.5 \nORDER BY T2.UA DESC \nLIMIT 1;",
        "compiler_hint": "no such column: T2.aCL IgA",
        "reflective_cot": "### Tip:\nAlways clearly define and verify your query conditions and relationships between tables before execution. Double-check the intended logic for filter conditions, especially regarding operator use (e.g., `<=` vs. `>`), and ensure you're joining on the correct keys. This will help prevent misinterpretation of the requirements and confusion about column names.",
        "ground_truth_sql": "SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?",
        "hint": "total bilirubin is over the normal range refers to `T-BIL` > = 2.0; peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P';",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2.0 AND T3.`ANA Pattern` LIKE '%P%'",
        "compiler_hint": "near \"Pattern\": syntax error",
        "reflective_cot": "### Tip:\nAlways ensure that column names are correctly referenced according to the table they belong to, especially when they contain spaces or special characters, and remember to adhere to the correct syntax for logical conditions in SQL queries. Use backticks to encapsulate column names with spaces or special characters consistently. Additionally, check the conditions for proper alignment with field data types before running the query.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%'",
        "difficulty": "challenging"
    },
    {
        "question": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?",
        "hint": "total cholesterol is higher than normal refers to `T-CHO` > = 250; negative measure of degree of coagulation refers to KCT = '-' ;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'",
        "compiler_hint": "no such column: T2.KCT",
        "reflective_cot": "### Tip:\nAlways verify that the columns you are referencing in your SQL query exist in the tables you are joining. Cross-check column names against the schema to avoid referencing non-existent columns or misidentifying their locations within joins. Additionally, ensure you are using the correct table aliases to maintain clarity and accuracy in your queries.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?",
        "hint": "normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.TG < 200 AND T3.Symptoms IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the columns being referenced in your SELECT statement and ensure you are querying from the correct tables as per the problem requirements. Specifically, when dealing with aggregate functions like COUNT, ensure you are counting distinct values from the appropriate logical context, and confirm that the join conditions are accurately capturing the relationships defined in the schema.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?",
        "hint": "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);",
        "error_sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are joining the correct tables according to the question requirements. In this case, the disease name (Diagnosis) should be retrieved from the `Examination` table, not the `Patient` table, as specified in the Ground Truth SQL. Double-check the context of each join to ensure you are accessing the right attributes from the intended tables.",
        "ground_truth_sql": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
        "hint": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
        "compiler_hint": "no such column: T2.KCT",
        "reflective_cot": "### Tip:\nAlways ensure that the columns you are referencing exist in the tables you are querying. Before executing a SQL query, double-check the schema to confirm the existence and correct spelling of each column. Additionally, consider using aliases consistently and clearly to avoid confusion, especially when dealing with multiple tables having columns with similar names.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
        "difficulty": "challenging"
    },
    {
        "question": "How many patients diagnosed with SLE have a normal white blood cell level?",
        "hint": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;",
        "error_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways validate the logical conditions for range checks in SQL. Ensure that when using `BETWEEN`, the endpoints are inclusive. Verify your expectation against the specified range and use accurate comparison operators when necessary. Additionally, consider testing the query with sample data to confirm its accuracy before finalizing.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9",
        "difficulty": "simple"
    },
    {
        "question": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?",
        "hint": "normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;",
        "error_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're joining on the appropriate tables for the data you're analyzing. In this case, you needed to join the `Patient` table to check for the `Diagnosis`, rather than relying solely on the `Examination` table. Understanding the relationships and the relevant fields in your joins is crucial to retrieving accurate data. Always double-check if the columns you are filtering against belong to the correct tables involved in your query.",
        "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question": "How many students in the Student_Club are from the College of Engineering?",
        "hint": "",
        "error_sql": "SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE college = 'Engineering');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the exact name of entities such as colleges, departments, and tables before executing queries. A common mistake is to use an incorrect or incomplete phrase, which can lead to no results or errors. In SQL queries, precision in keywords and phrases is crucial, so ensure to cross-check against the data dictionary or schema.",
        "ground_truth_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "difficulty": "simple"
    },
    {
        "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
        "hint": "full name refers to first_name, last_name;",
        "error_sql": "SELECT T.first_name || ' ' || T.last_name AS full_name FROM member AS T INNER JOIN major AS T2 ON T.link_to_major = T2.major_id WHERE T2.department = 'Art and Design'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the exact wording and spelling used in the database schema and the query requirements. In particular, ensure that department names or any specific phrases used in the query match exactly, including proper nouns and spaces. Double-checking these details can prevent errors related to syntax or incorrect table/column references.",
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "difficulty": "simple"
    },
    {
        "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
        "hint": "Women's Soccer is an event name",
        "error_sql": "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women's Soccer';",
        "compiler_hint": "near \"s\": syntax error",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, especially when dealing with string literals, ensure to use the correct escaping method. For example, in SQL, a single quote within a string should be escaped by using another single quote (`''`). Always verify the table structure and relationships to ensure that you're joining the correct tables and using the right column names. Furthermore, pay attention to aliases used in the query to avoid confusion and ensure clarity.",
        "ground_truth_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
        "difficulty": "simple"
    },
    {
        "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "hint": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
        "error_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nPay close attention to the logical structure of your SQL queries, especially when using `GROUP BY` and `HAVING` clauses. Ensure that you're correctly filtering the results based on the intended criteria before counting or grouping. Always validate your query logic against the expected outcome to avoid returning incorrect results. Consider breaking down complex queries into simpler parts or using subqueries to clarify the relationships between different conditions.",
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "difficulty": "moderate"
    },
    {
        "question": "What department offers the major that Pierce and Guidi took?",
        "hint": "",
        "error_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name IN ('Pierce', 'Guidi');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are querying the correct columns based on the data you need. In this case, the first query used the first name for filtering instead of the last name, which was the requirement for identifying the correct members. Pay attention to the exact requirements and validate the fields you are using for selection to avoid mismatches.",
        "ground_truth_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
        "difficulty": "simple"
    },
    {
        "question": "Was each expense in October Meeting on October 8, 2019 approved?",
        "hint": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
        "error_sql": "SELECT e.expense_id, e.expense_description, e.approved\nFROM event AS ev\nINNER JOIN budget AS b ON ev.event_id = b.link_to_event\nINNER JOIN expense AS e ON b.budget_id = e.link_to_budget\nWHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08' AND e.approved = 'True';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways check the data types and expected values in your conditions. For the `approved` field, if it is stored as a text value, ensure that you are using the correct representations (e.g., 'True' vs. 'T' or '1'). Additionally, validate that comparison operators and LIKE clauses are applied correctly, as these can affect the results significantly.",
        "ground_truth_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "difficulty": "moderate"
    },
    {
        "question": "What was the cost for the \"Posters\" on 2019/9/4?",
        "hint": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'",
        "error_sql": "SELECT cost FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Posters' AND T3.event_date = '2019-09-04'",
        "compiler_hint": "no such column: T1.link_to_event",
        "reflective_cot": "### Tip:\nAlways carefully check the relationships between tables and ensure you are querying the correct columns. In this case, the link to events should have been verified to come from the correct table (in this instance, directly from the `expense` table) rather than complicating the query by including unnecessary joins. Additionally, ensure to be cautious with column names, and validate their existence in the relevant tables to avoid errors.",
        "ground_truth_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
        "difficulty": "simple"
    },
    {
        "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "hint": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
        "error_sql": "SELECT \n    (SELECT SUM(amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'Yearly Kickoff') / \n    (SELECT SUM(amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'October Meeting') AS budget_ratio\n",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating ratios or comparisons between aggregate sums in SQL, ensure that you're correctly summing the values in a context that clearly differentiates the two items being compared (in this case, different events), while simultaneously filtering on the same category and relevant conditions. Additionally, consider using `CASE` statements within the `SUM()` function to directly differentiate amounts for each event to avoid complications with joins or grouping. This helps in providing clear, distinct aggregations for each event in your calculations.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "difficulty": "challenging"
    },
    {
        "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
        "hint": "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.event_name = 'November Speaker' THEN 1 ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure to carefully analyze the logic of your queries, especially when calculating aggregates. In your original attempt, you inadvertently used `COUNT` in a way that did not accurately reflect the total budget for the event due to the lack of a conditional filter. Always validate the denominators in your calculations to ensure they represent the correct sum or count needed for your percentage calculations.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the expenses of the budget with the lowest remaining?",
        "hint": "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)",
        "error_sql": "SELECT T3.expense_description \nFROM budget AS T1 \nINNER JOIN expense AS T3 ON T1.budget_id = T3.link_to_budget \nWHERE T1.remaining = (SELECT MIN(remaining) FROM budget);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen retrieving data based on specific criteria, especially when dealing with aggregations like MIN, ensure that you're correctly selecting the associated records rather than directly comparing values to the result of a subquery. Use ordering and limits to isolate the desired record rather than filtering by equality, as this can lead to unexpected results if multiple records match the criteria.",
        "ground_truth_sql": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "List all the members who attended the event \"October Meeting\".",
        "hint": "'October Meeting' is an event name;",
        "error_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.email FROM member AS T3 INNER JOIN attendance AS T2 ON T3.member_id = T2.link_to_member INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'October Meeting'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check your column names against the table schema before writing your SQL queries, as mismatched column names can lead to syntax errors or incorrect results. Additionally, ensure you understand the relationships between tables, particularly foreign keys, to construct JOIN statements correctly.",
        "ground_truth_sql": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "difficulty": "simple"
    },
    {
        "question": "List all the expenses incurred by the vice president.",
        "hint": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "error_sql": "SELECT T2.expense_description \nFROM expense AS T2 \nINNER JOIN member AS T1 ON T2.link_to_member = T1.member_id \nWHERE T1.position = 'Vice President'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the `SELECT` statement includes all relevant fields needed for the final output. In your case, although you correctly retrieved the expense descriptions, you did not specify all intended columns in the first query (like `expense_id`). Starting with a clear understanding of the desired output structure can prevent overlooking necessary fields. Additionally, double-check that the join conditions accurately reflect the relationships between the tables involved to ensure correct data retrieval.",
        "ground_truth_sql": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "difficulty": "simple"
    },
    {
        "question": "How many of the members' hometowns are from Maryland state?",
        "hint": "",
        "error_sql": "SELECT COUNT(DISTINCT T.zip) FROM member AS T INNER JOIN zip_code AS Z ON T.zip = Z.zip_code WHERE Z.state = 'MD'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen counting items based on a condition from a joined table, ensure that you are counting the appropriate column that represents the unique entities you are interested in. Instead of counting distinct values from the zip codes or using the member's ID incorrectly, focus on the member's ID specifically to avoid confusion. Always clearly define what exactly you wish to count in your query and ensure your joins correctly reflect the intended relationships between the tables.",
        "ground_truth_sql": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
        "difficulty": "simple"
    },
    {
        "question": "List the name of students that have attended more than 7 events.",
        "hint": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
        "error_sql": "SELECT T3.first_name || ' ' || T3.last_name AS full_name \nFROM member AS T3 \nINNER JOIN attendance AS T2 ON T3.member_id = T2.link_to_member \nGROUP BY T3.member_id \nHAVING COUNT(T2.link_to_event) > 7;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that any columns not included in an aggregate function (like COUNT) are also in the GROUP BY clause. Additionally, be cautious about using the correct primary or foreign key identifiers when joining tables, as mismatched identifiers can lead to unexpected results or errors. It\u2019s also helpful to structure your queries in a way that clearly defines which table each column originates from, especially when using aliasing.",
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
        "difficulty": "moderate"
    },
    {
        "question": "State the name of students from Georgetown, South Carolina.",
        "hint": "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state",
        "error_sql": "SELECT CONCAT(T.first_name, ' ', T.last_name) AS full_name \nFROM member AS T \nINNER JOIN zip_code AS Z ON T.zip = Z.zip_code \nWHERE Z.city = 'Georgetown' AND Z.state = 'South Carolina'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are selecting the correct columns and using the appropriate functions for concatenation. In SQL, functions like `CONCAT` may not be universally supported across all database systems. If you're unsure, opt for a simple selection of the necessary columns and perform concatenation in your application logic instead. Additionally, validate the structure of your JOIN statements and ensure that you're selecting from the correct aliases when forming your final output.",
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
        "difficulty": "simple"
    },
    {
        "question": "Which student was able to generate income more than $40?",
        "hint": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40",
        "error_sql": "SELECT T1.first_name || ' ' || T1.last_name AS full_name \nFROM member AS T1 \nINNER JOIN income AS T2 ON T1.member_id = T2.link_to_member \nWHERE T2.amount > 40;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check the conditions specified in the problem statement. In this case, the initial query specified generating income greater than $40, but the reflection incorrectly changed this value to $50. It\u2019s important to verify each requirement and detail carefully before finalizing your SQL queries.",
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
        "difficulty": "simple"
    },
    {
        "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
        "hint": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "error_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen forming SQL queries involving multiple tables, ensure that the join conditions correctly match the intended relationships between the tables. Always double-check which fields serve as foreign keys and how they relate to primary keys in other tables. Additionally, focus on the specific fields needed for the query's outcome; in this case, ensure the correct linking of event, budget, and member tables with relevant foreign keys to attain accurate results.",
        "ground_truth_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "difficulty": "moderate"
    },
    {
        "question": "Which students manage to generate the highest income. State his/her full name along with the income source.",
        "hint": "name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);",
        "error_sql": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(amount) FROM income);",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen attempting to find an aggregate result (like the highest income), ensure to group results appropriately and utilize aggregate functions like SUM when needed. Additionally, be aware that using WHERE with an aggregate function may not give you the intended result; instead, consider using GROUP BY and ORDER BY to sort aggregated results before limiting the output.",
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "Which event has the lowest cost?",
        "hint": "event refers to event_name; lowest cost means MIN(cost)",
        "error_sql": "SELECT e.event_name FROM event AS e INNER JOIN expense AS ex ON e.event_id = ex.link_to_budget ORDER BY ex.cost LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the JOIN conditions accurately link tables based on their relationships. In this case, the initial error was due to incorrectly joining the `event` table with the `expense` table without involving the `budget` table properly, which is necessary to relate costs to events. Always double-check the logical flow of your database relationships and ensure foreign keys are correctly represented in your JOIN clauses.",
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
        "hint": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
        "error_sql": "SELECT EXISTS(SELECT 1 FROM attendance AS T1 \n              INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id \n              INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id \n              WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean' \n              AND T2.event_name = 'Women''s Soccer');",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your table references in the SQL query match the actual schema. Specifically, check that the correct column names are used in the `SELECT` and `JOIN` clauses to avoid mismatches. In your case, you were trying to reference `T3.event_name`, which does not exist in the `member` table. Make sure to follow the correct relationships and references when building your queries.",
        "ground_truth_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
        "difficulty": "moderate"
    },
    {
        "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
        "hint": "total value refers to SUM(cost); 'October Meeting' is an event name;",
        "error_sql": "SELECT T1.expense_description, SUM(T1.cost) AS total_value FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T1.approved = 'True' GROUP BY T1.expense_description;",
        "compiler_hint": "no such column: T2.expense_description",
        "reflective_cot": "### Tip:\nAlways verify the column names in the tables you are referencing, especially in complex JOIN operations. Use the correct table aliases for clarity and ensure each column referenced exists in the appropriate table. Testing smaller parts of your query incrementally can also help locate errors faster.",
        "ground_truth_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
        "difficulty": "moderate"
    },
    {
        "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
        "hint": "MAX(amount) where category = 'Advertisement'",
        "error_sql": "SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the required output or result set of your query before finalizing it. Ensure you understand whether you need all columns, specific columns, or just identifiers based on the context. In cases where only certain fields are intended to be returned, focusing on those can help prevent returning unnecessary data.",
        "ground_truth_sql": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
        "hint": "full name refers to first_name, last name",
        "error_sql": "SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T2.cost) AS total_cost \nFROM member AS T1 \nINNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member \nWHERE T1.member_id = 'rec4BLdZHS2Blfp4v' \nGROUP BY T1.first_name, T1.last_name;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the `GROUP BY` clause includes all non-aggregated columns that are selected. In the first query, `GROUP BY T1.first_name, T1.last_name` is correct, but when an identifier like `T1.member_id` was used in the second query, it should not be combined with the full name representation. Therefore, make sure to clearly differentiate between selected columns and aggregate functions, and if a full name is created in the `SELECT`, you should group by that same expression if needed, or include the necessary identifiers to prevent aggregation errors.",
        "ground_truth_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
        "difficulty": "simple"
    },
    {
        "question": "Calculate the percentage of members who are major Business in the list?",
        "hint": "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100",
        "error_sql": "SELECT CAST(SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the conditions used in the `CASE` statement are correctly structured and that any filtering conditions are applied in the `WHERE` clause instead of within aggregate functions. It's crucial to separate counts based on conditions that should apply to the overall dataset rather than mixing them into summation logic, as it can lead to incorrect aggregations.",
        "ground_truth_sql": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
        "difficulty": "moderate"
    },
    {
        "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
        "hint": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
        "error_sql": "SELECT T2.category \nFROM budget AS T2 \nINNER JOIN event AS T1 \nON T2.link_to_event = T1.event_id \nWHERE T1.location = 'MU 215' \nAND T1.type = 'Guest Speaker' \nAND T2.spent = 0;",
        "compiler_hint": "no such column: T1.category",
        "reflective_cot": "### Tip:\nAlways double-check the table structures and column names in your queries to ensure you are selecting fields from the correct tables, particularly when using aliases. Additionally, clarify the logical order of joins and conditions in your SQL statements to avoid referencing non-existent columns. Consider running preliminary SELECT statements to confirm the expected structure of your data before constructing more complex queries.",
        "ground_truth_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
        "difficulty": "moderate"
    },
    {
        "question": "List the city and state of members enrolled under electrical and computer engineering department.",
        "hint": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'",
        "error_sql": "SELECT Z.city, Z.state FROM member AS M INNER JOIN major AS MA ON M.link_to_major = MA.major_id INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE MA.department = 'Electrical and Computer Engineering' AND M.position = 'Member'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways double-check string literals for accuracy, especially when comparing against them in SQL queries. Even minor discrepancies (like including the word \"Department\" when it shouldn't be there) can lead to erroneous results. Additionally, verifying the exact terms and structure of the database schema can help avoid such mistakes.",
        "ground_truth_sql": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
        "difficulty": "moderate"
    },
    {
        "question": "Which countries have zip codes with post office boxes?",
        "hint": "zip codes that have post office boxes refers to type = 'PO Box'",
        "error_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the context of the query requirements; in this case, the request was to identify countries with specific zip code types, not just the zip codes themselves. Ensure you're selecting the right attributes (like distinct counties) that provide the broader context, and always consider NULL values that may affect the result.",
        "ground_truth_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question": "Please provide links to events for members who have paid more than 50 dollar.",
        "hint": "have paid more than 50 dollar refers to cost > 50",
        "error_sql": "SELECT DISTINCT T3.link_to_event FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.amount > 50;",
        "compiler_hint": "no such column: T2.link_to_event",
        "reflective_cot": "### Tip:\nWhen querying data involving monetary values, ensure you are joining the correct tables based on the context of the data you need. Specifically, check the source of the payments (e.g., `expense` for costs incurred) rather than `income` (which pertains to earnings). Always validate the table structure and relationships to identify where relevant financial transactions are recorded.",
        "ground_truth_sql": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
        "difficulty": "simple"
    },
    {
        "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
        "hint": "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'",
        "error_sql": "SELECT T1.first_name, T1.last_name, T2.link_to_event FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN expense AS T3 ON T2.link_to_member = T3.link_to_member WHERE T3.approved = 'true' AND T3.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
        "compiler_hint": "no such column: T2.link_to_event",
        "reflective_cot": "### Tip:\nWhen writing SQL queries, ensure that you reference the correct tables and their columns, especially when joining multiple tables. Double-check the relationships between tables and confirm that the columns exist in those tables. Using the correct aliases and understanding how data is structured can help prevent errors like referencing non-existing columns. Always test smaller parts of your query incrementally to catch issues early.",
        "ground_truth_sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "difficulty": "challenging"
    },
    {
        "question": "How many members have education major in the College of Education & Human Services?",
        "hint": "'education' is the major name; 'Member' is a position of club;",
        "error_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T2.college = 'College of Education & Human Services';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure to check for all relevant conditions, including any specific filters required for the dataset you are querying. In this case, filtering for the member's position was crucial to accurately count the members. To avoid similar mistakes, make a checklist of all criteria that need to be included in your WHERE clause based on the question or requirement before writing your SQL query.",
        "ground_truth_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
        "difficulty": "moderate"
    },
    {
        "question": "Find the full name of members whose t-shirt size is extra large.",
        "hint": "full name refers to first_name, last_name; t_shirt_size = 'X-Large'",
        "error_sql": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the expected output format when constructing your SQL queries. Ensure that the columns and expressions in the SELECT clause match the requirements of the task, considering any specific instructions about the output needed, such as concatenation or formatting. In cases like this, where a full name is required, ensure to follow the exact output format specified, combining fields correctly and understanding the definition of terms used.",
        "ground_truth_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
        "difficulty": "simple"
    },
    {
        "question": "In the events with more than forty incomes, list the city and country in which the event is happening.",
        "hint": "more than fifty incomes refers to income > 40",
        "error_sql": "SELECT Z.city, Z.county FROM event AS E INNER JOIN income AS I ON E.event_id = I.link_to_event INNER JOIN zip_code AS Z ON E.location = Z.zip_code GROUP BY E.event_id HAVING COUNT(I.income_id) > 40;",
        "compiler_hint": "no such column: I.link_to_event",
        "reflective_cot": "### Tip:\nAlways ensure that you're joining the correct columns based on their relationships in the schema. Take the time to carefully review the foreign key constraints and understand how tables are linked before writing your SQL query. This helps avoid referencing non-existent columns or incorrect relationships, which can lead to errors.",
        "ground_truth_sql": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
        "difficulty": "simple"
    },
    {
        "question": "Among the members who incurred expenses in more than one event, who paid the most amount?",
        "hint": "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)",
        "error_sql": "SELECT T1.member_id, T1.first_name, T1.last_name, SUM(T2.cost) AS total_cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN attendance AS T3 ON T2.link_to_budget = T3.link_to_member GROUP BY T1.member_id HAVING COUNT(DISTINCT T3.link_to_event) > 1 ORDER BY total_cost DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are properly linking all relevant tables in your query, particularly focusing on how the relationships between expenses, budgets, and events are structured. Always double-check the join conditions and the aggregation criteria to confirm you're counting distinct events correctly, and remember to include all necessary tables for correct context in aggregations.",
        "ground_truth_sql": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question": "List the name of events with less than average parking cost.",
        "hint": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "error_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost < (SELECT AVG(T4.cost) FROM expense AS T4 INNER JOIN budget AS T5 ON T4.link_to_budget = T5.budget_id WHERE T5.category = 'Parking')",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your subqueries are logically structured and return the correct context for comparisons. In the case of complex joins, double-check that you're referencing the correct table and attribute for the criteria you intend to apply, such as filtering by category before comparing costs. It often helps to write out the logical flow first to confirm that each part of your SQL query aligns with your intended logic.",
        "ground_truth_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "difficulty": "moderate"
    },
    {
        "question": "What is the percentage of the cost for the meeting events?",
        "hint": "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100",
        "error_sql": "SELECT (SUM(T3.cost) / COUNT(T1.event_id)) * 100 AS percentage FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating percentages or proportions in SQL, it is essential to correctly handle the aggregate functions and ensure the denominator reflects the complete dataset you wish to summarize. In your initial approach, you calculated the count of events and divided by the total cost, which could lead to misleading results if the counts don't correspond directly to the values being summed. Instead, make sure to structure your queries to extract the relevant sums within a single aggregate function and clearly differentiate between the total and the specific criteria (like event type) to obtain an accurate percentage. Consider using CASE statements to conditionally sum data for more precise calculations.",
        "ground_truth_sql": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
        "difficulty": "moderate"
    },
    {
        "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
        "hint": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)",
        "error_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 5;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nBe careful to follow the relationships between tables accurately. When querying for totals based on related entries, ensure you're joining the correct tables that capture the relationships impacting the data you're interested in. In this case, ensure to consider any relationships with budgets or spending categories that may aggregate costs correctly. Always verify that your joins accurately reflect the entities involved in the result you need.",
        "ground_truth_sql": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
        "hint": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
        "error_sql": "SELECT \n    CAST(SUM(CASE WHEN T4.state = 'New Jersey' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) - \n    CAST(SUM(CASE WHEN T4.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) \nFROM member AS T1 \nINNER JOIN zip_code AS T4 ON T1.zip = T4.zip_code \nWHERE T1.position = 'Member'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating differences in percentages, ensure you're accurately reflecting the entire population or sample against which you're comparing. Be cautious of the use of the total count in the denominator; it should represent the same group for both calculations. Always double-check that the COUNT function aligns with the intended data set to avoid misrepresentations in the results.",
        "ground_truth_sql": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
        "difficulty": "moderate"
    },
    {
        "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
        "hint": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
        "error_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description IN ('Water', 'Veggie tray', 'supplies') GROUP BY T1.member_id",
        "compiler_hint": null,
        "reflective_cot": "### Tip:                 \nWhen querying multiple entries for specific descriptions, ensure you're using exact matches rather than checking for inclusion of different parts of a description. Instead of using `IN` for partial matches, use `=` for exact matches to avoid missing specific entries. Additionally, consider your grouping and summation carefully; if you want to join based on multiple conditions, ensure the matching criteria align with how data is structured in your tables.",
        "ground_truth_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
        "difficulty": "challenging"
    },
    {
        "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
        "hint": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
        "error_sql": "SELECT T1.first_name, T1.last_name, T2.amount \nFROM member AS T1 \nINNER JOIN income AS T2 ON T1.member_id = T2.link_to_member \nWHERE T2.date_received = '9/9/2019'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways verify the relationships between tables to ensure you're capturing all necessary connections. In this case, ensure you account for any intermediate tables that link the primary entities of interest (in this instance, connecting income received by members to any related events via the attendance table).",
        "ground_truth_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "difficulty": "challenging"
    },
    {
        "question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
        "hint": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "error_sql": "SELECT T1.event_name, SUM(T2.spent) AS total_spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts' GROUP BY T1.event_name;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you're matching the correct tables and their foreign keys in your JOIN conditions. Additionally, validate that each column is accurately referenced from the appropriate tables. It's beneficial to check the GROUP BY clause matches the selected non-aggregated columns to prevent grouping errors.",
        "ground_truth_sql": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
        "difficulty": "simple"
    },
    {
        "question": "Where is the hometown of Garrett Gerke?",
        "hint": "hometown refers to city",
        "error_sql": "SELECT Z.city FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'GARRETT' AND M.last_name = 'GERKE'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your column and table names are consistent in terms of case sensitivity and syntax. Additionally, double-check the join conditions to ensure they properly align with the intended schema references, especially when dealing with text vs. numeric types in column comparisons.",
        "ground_truth_sql": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
        "difficulty": "simple"
    },
    {
        "question": "In 2012, who had the least consumption in LAM?",
        "hint": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT CustomerID FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' ORDER BY Consumption ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure you always consider all necessary join conditions and filtering criteria when constructing your SQL queries. In this case, the first two queries failed to include the essential condition to filter for customers in the 'LAM' segment, as well as the requirement to aggregate consumption per customer. Always double-check your query against the scenario's requirements to avoid missing critical elements.",
        "ground_truth_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
        "hint": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012",
        "error_sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption < 30000 AND T2.Date BETWEEN '201201' AND '201212'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating aggregates like total consumption, remember to group data by the relevant identifiers before applying conditional filters on the aggregated results. This prevents miscounting customers who may have several entries contributing to their total consumption, ensuring the logic of your query aligns with the required outcome. Always consider using `GROUP BY` in combination with `HAVING` for such scenarios.",
        "ground_truth_sql": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
        "difficulty": "moderate"
    },
    {
        "question": "Which year recorded the most gas use paid in EUR?",
        "hint": "",
        "error_sql": "SELECT STRFTIME('%Y', T1.Date) AS Year, SUM(T1.Amount) AS TotalGasUse FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY Year ORDER BY TotalGasUse DESC LIMIT 1;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways validate the structure and relationships of the data in your database schema before writing your SQL queries. Pay close attention to how data is aggregated and ensure you're using the correct tables that reflect the relationships accurately. For instance, in this case, the calculations were meant for consumption data linked to customers, which was found in a different table (`yearmonth`), rather than the transaction table. Take the time to understand the context of each table to avoid referencing the wrong data source.",
        "ground_truth_sql": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "hint": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "error_sql": "SELECT SUBSTRING(T2.Date, 1, 6) AS Month, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date BETWEEN '201301' AND '201312' GROUP BY Month ORDER BY TotalConsumption DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you are accessing substrings of your date values correctly. Pay attention to the string positions when using functions like SUBSTRING or SUBSTR. Verify that your conditions are accurately filtering for the desired year and month format to avoid mismatches in data aggregation.",
        "ground_truth_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "hint": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "error_sql": "SELECT \n    (SELECT AVG(Consumption) FROM (\n        SELECT SUM(Consumption) / COUNT(DISTINCT CustomerID) AS Consumption \n        FROM yearmonth \n        WHERE Date BETWEEN '201301' AND '201312'\n        AND CustomerID IN (\n            SELECT CustomerID \n            FROM customers \n            WHERE Segment = 'SME'\n        )\n        GROUP BY CustomerID \n        ORDER BY SUM(Consumption) ASC \n        LIMIT 1\n    )) - \n    (SELECT AVG(Consumption) FROM (\n        SELECT SUM(Consumption) / COUNT(DISTINCT CustomerID) AS Consumption \n        FROM yearmonth \n        WHERE Date BETWEEN '201301' AND '201312'\n        AND CustomerID IN (\n            SELECT CustomerID \n            FROM customers \n            WHERE Segment = 'LAM'\n        )\n        GROUP BY CustomerID \n        ORDER BY SUM(Consumption) ASC \n        LIMIT 1\n    )) AS SME_LAM_Difference,\n\n    (SELECT AVG(Consumption) FROM (\n        SELECT SUM(Consumption) / COUNT(DISTINCT CustomerID) AS Consumption \n        FROM yearmonth \n        WHERE Date BETWEEN '201301' AND '201312'\n        AND CustomerID IN (\n            SELECT CustomerID \n            FROM customers \n            WHERE Segment = 'LAM'\n        )\n        GROUP BY CustomerID \n        ORDER BY SUM(Consumption) ASC \n        LIMIT 1\n    )) - \n    (SELECT AVG(Consumption) FROM (\n        SELECT SUM(Consumption) / COUNT(DISTINCT CustomerID) AS Consumption \n        FROM yearmonth \n        WHERE Date BETWEEN '201301' AND '201312'\n        AND CustomerID IN (\n            SELECT CustomerID \n            FROM customers \n            WHERE Segment = 'KAM'\n        )\n        GROUP BY CustomerID \n        ORDER BY SUM(Consumption) ASC \n        LIMIT 1\n    )) AS LAM_KAM_Difference,\n\n    (SELECT AVG(Consumption) FROM (\n        SELECT SUM(Consumption) / COUNT(DISTINCT CustomerID) AS Consumption \n        FROM yearmonth \n        WHERE Date BETWEEN '201301' AND '201312'\n        AND CustomerID IN (\n            SELECT CustomerID \n            FROM customers \n            WHERE Segment = 'KAM'\n        )\n        GROUP BY CustomerID \n        ORDER BY SUM(Consumption) ASC \n        LIMIT 1\n    )) - \n    (SELECT AVG(Consumption) FROM (\n        SELECT SUM(Consumption) / COUNT(DISTINCT CustomerID) AS Consumption \n        FROM yearmonth \n        WHERE Date BETWEEN '201301' AND '201312'\n        AND CustomerID IN (\n            SELECT CustomerID \n            FROM customers \n            WHERE Segment = 'SME'\n        )\n        GROUP BY CustomerID \n        ORDER BY SUM(Consumption) ASC \n        LIMIT 1\n    )) AS KAM_SME_Difference;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating the differences between averages for different segments, ensure that you're not just averaging individual customer consumptions but rather addressing the lowest consumption for each segment. Additionally, don't forget to filter by the correct currency and ensure that you're aggregating the data correctly to avoid misleading results. Always validate your joins and ensure that your GROUP BY clauses align with your needs.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "difficulty": "challenging"
    },
    {
        "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "hint": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
        "error_sql": "SELECT T1.Segment, \n       (SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2013' THEN T2.Consumption ELSE 0 END) - \n        SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2012' THEN T2.Consumption ELSE 0 END)) AS Increase,\n       (SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2013' THEN T2.Consumption ELSE 0 END) * 100.0) / NULLIF(SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2013' THEN T2.Consumption ELSE 0 END), 0) AS PercentageIncrease\nFROM customers AS T1 \nINNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID \nWHERE T1.Currency = 'EUR' \nGROUP BY T1.Segment \nORDER BY PercentageIncrease ASC;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that your calculations and conditions accurately account for segment variations and data grouping. Use conditional aggregation carefully and validate each component of your calculations to ensure they align logically with the desired output. Additionally, consider using case statements or functions like IIF for improved clarity in your queries, especially when filtering by specific criteria.",
        "ground_truth_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
        "difficulty": "challenging"
    },
    {
        "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
        "hint": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
        "error_sql": "SELECT (SUM(IIF(T1.Segment = 'SME' AND T1.Currency = 'CZK', T3.Amount, 0)) - SUM(IIF(T1.Segment = 'SME' AND T1.Currency = 'EUR', T3.Amount, 0))) AS Excess_SME_Payments FROM customers AS T1 INNER JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Segment = 'SME'",
        "compiler_hint": "no such column: T2.Currency",
        "reflective_cot": "### Tip:\nAlways ensure that you're referencing the correct columns and tables based on their relationships in your SQL joins. Take the time to verify the structure of the tables and the columns available, as well as the intended logic of your query. This can help avoid referencing columns that do not exist or are incorrectly attributed.",
        "ground_truth_sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
        "difficulty": "simple"
    },
    {
        "question": "How many percent of LAM customer consumed more than 46.73?",
        "hint": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
        "error_sql": "SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers WHERE Segment = 'LAM')) AS percentage FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Consumption > 46.73;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that your calculation logic matches the intended outcome. In this case, using aggregation functions like `SUM` with conditionals (like `IIF`) can provide a more accurate representation of counts compared to using `COUNT(DISTINCT ...)`. Additionally, clearly separate the numerator and denominator of your percentage calculation to avoid confusion about what is being counted, and consider intermediate checks on counts to validate your logic.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "difficulty": "moderate"
    },
    {
        "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "hint": "",
        "error_sql": "SELECT Country, COUNT(GasStationID) AS ValueForMoneyStations FROM gasstations WHERE Segment = 'Value for Money' GROUP BY Country",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure the logical structure of your SQL query aligns with your desired outcome. In cases like counting grouped values, double-check that your subqueries or main counts do not inadvertently aggregate or misrepresent the data. Also, validate that the GROUP BY clause and any WHERE conditions are accurately applied to achieve the intended counting and filtering.",
        "ground_truth_sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What percentage of Slovakian gas stations are premium?",
        "hint": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.",
        "error_sql": "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS PercentagePremium FROM gasstations WHERE Country = 'Slovakia'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are using the correct country code or name consistently in your SQL query. Also, consider using conditional aggregation functions like `SUM` with `IIF` for clarity in counting specific conditions, as it can simplify the logic and improve readability. Always verify the exact values stored in your database to avoid mismatches.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
        "difficulty": "simple"
    },
    {
        "question": "Which client segment consumed the least in September 2013?",
        "hint": "September 2013 refers to yearmonth.date = '201309'",
        "error_sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen grouping by columns in SQL, ensure that you group by the right field that you want to aggregate. In this case, grouping by `T1.CustomerID` instead of `T1.Segment` allowed the query to sum the consumption correctly for each distinct client, ensuring the least consuming segment is identified accurately. Always double-check the fields in your `GROUP BY` clause to match the intended aggregation scope.",
        "ground_truth_sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the highest monthly consumption in the year 2012?",
        "hint": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "error_sql": "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen calculating aggregate values like monthly consumption, ensure you are using the correct aggregate function (e.g., SUM instead of MAX) and group by the right parameters to reflect the intended granularity (e.g., by month rather than by complete date). Always verify which metric you want to evaluate across your groupings.",
        "ground_truth_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "Please list the product description of the products bought in transactions in euro.",
        "hint": "",
        "error_sql": "SELECT DISTINCT P.Description FROM products AS P INNER JOIN \"transactions_1k\" AS T ON P.ProductID = T.ProductID INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE C.Currency = 'euro'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that the currency in the WHERE clause matches the exact case and spelling used in the database. In the provided query, 'euro' should be 'EUR' to match the expected value. Additionally, double-check column names and their corresponding data types for consistency. Properly reviewing the schema before crafting queries can help avoid such errors.",
        "ground_truth_sql": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'",
        "difficulty": "simple"
    },
    {
        "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
        "hint": "Pays in euro = Currency = 'EUR'.",
        "error_sql": "SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen using COUNT with DISTINCT, it is important to ensure you're not grouping by the same column(s) you're counting. Instead, focus on what you want to count directly without unnecessary grouping unless required. In your case, simplifying the COUNT clause without grouping allowed for an accurate count of customers meeting the criteria. Always clarify whether you're counting unique entities or specific rows before applying GROUP BY.",
        "ground_truth_sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
        "difficulty": "simple"
    },
    {
        "question": "Which customer paid the most in 2012/8/25?",
        "hint": "'2012/8/25' can be represented by '2012-08-25'",
        "error_sql": "SELECT T1.CustomerID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-25' ORDER BY T1.Amount DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen aggregating data across multiple records (in this case, transactions from a single customer), always ensure to use `GROUP BY` to consolidate entries before applying aggregate functions like `SUM()`. This prevents retrieving individual transaction amounts instead of the total spent by each customer.",
        "ground_truth_sql": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "For the earliest customer, what segment did he/she have?",
        "hint": "",
        "error_sql": "SELECT Segment FROM customers ORDER BY CustomerID LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you consider the relationships between tables when querying for specific data. In this case, the customer segment was linked to transactions, so it was necessary to join the `customers` table with the `transactions_1k` table based on common identifiers (like `CustomerID`) to find the segment of the earliest customer in the transaction data. Always check if the context of the data requires joining multiple tables to get accurate results.",
        "ground_truth_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?",
        "hint": "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning.",
        "error_sql": "SELECT SUM(Amount * Price), Date FROM transactions_1k WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 124.05) AND Date LIKE '2012-01%' GROUP BY Date;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you are using the correct tables and relationships for your queries. Specifically, when aggregating and filtering data, verify that the joins between tables are appropriate, and that you are pulling fields from the right tables. Always double-check the conditions in your WHERE clause to make certain they accurately reflect the requirements of your query.",
        "ground_truth_sql": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'",
        "difficulty": "moderate"
    },
    {
        "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
        "hint": "'2012/8/24' can be represented by '2012-08-24'",
        "error_sql": "SELECT C.Currency FROM transactions_1k AS T INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE T.Date = '2012-08-24' AND T.Price = 548.4;",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are joining the correct tables to retrieve the intended information. In this scenario, to find the customer's nationality based on their transaction, you needed to join the `transactions_1k` table with the `gasstations` table (to access the country information) rather than the `customers` table. Always double-check the relationships and what each table holds to avoid logical errors in your queries.",
        "ground_truth_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
        "difficulty": "simple"
    },
    {
        "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
        "hint": "'2012/8/25' can be represented by '2012-08-25'",
        "error_sql": "SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Date = '2012-08-25')) AS Percentage_EUR_Customers FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Date = '2012-08-25'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you're using the correct columns and tables in your joins and conditions. Pay close attention to the table you're aggregating from and the conditions used for filtering; particularly, make sure you're referencing the right relationships between tables. In this case, the initial queries mistakenly included consumption filters and incorrect joins, which led to inaccurate results. It's also helpful to break down complex queries into simpler parts for clarity and validation.",
        "ground_truth_sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
        "difficulty": "simple"
    },
    {
        "question": "Which gas station has the highest amount of revenue?",
        "hint": "",
        "error_sql": "SELECT GasStationID, SUM(Price * Amount) AS Revenue FROM transactions_1k GROUP BY GasStationID ORDER BY Revenue DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that you are aggregating the correct values when calculating metrics such as revenue. Specifically, double-check the formula you are using (e.g., summing total price multiplied by amount) to confirm it aligns with the intended calculation. Additionally, validate that you're ordering by the correct aggregated value in your results to avoid misinterpretation of the output.",
        "ground_truth_sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
        "hint": "January 2012 refers to the Date value = '201201'",
        "error_sql": "SELECT SUM(Price) FROM transactions_1k WHERE CustomerID = 38508 AND Date BETWEEN '2012-01-01' AND '2012-01-31';",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nEnsure that you fully understand the database schema and relationships before constructing your query. Pay special attention to join conditions and aggregates, and always verify that the filtering criteria match the specific requirements (like date ranges). For instance, when checking for specific months, ensure that your conditions account for the correct logic in aggregating or manipulating date values, and always validate your assumptions about data present in the tables being queried.",
        "ground_truth_sql": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
        "difficulty": "moderate"
    },
    {
        "question": "Which are the top five best selling products? Please state the full name of them.",
        "hint": "Description of products contains full name",
        "error_sql": "SELECT T1.Description FROM transactions_1k AS T2 INNER JOIN products AS T1 ON T2.ProductID = T1.ProductID GROUP BY T1.ProductID ORDER BY SUM(T2.Amount) DESC LIMIT 5",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nWhen querying for aggregated results, ensure to use the correct table aliases and aggregate functions in the SQL statement. Specifically, make sure to order the results by the correct aggregate (e.g., SUM) and from the table holding the relevant data, thus avoiding confusion between product descriptions and transaction amounts. Always review your joins and groupings to ensure they align with the intended analysis.",
        "ground_truth_sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
        "hint": "average price per single item = Total(price) / Total(amount)",
        "error_sql": "SELECT T1.CustomerID, SUM(T1.Price) / SUM(T1.Amount) AS AveragePrice, T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T1.Price) DESC LIMIT 1",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure that calculations related to aggregations (like SUM) consider the correct context for grouping, and validate the logic for identifying the \"top\" customer or value based on confirmed metrics (like total spending or consumption) before proceeding with further calculations. In this case, the initial queries didn't specifically identify the top customer correctly, leading to misaggregation.",
        "ground_truth_sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "difficulty": "moderate"
    },
    {
        "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
        "hint": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
        "error_sql": "SELECT T1.CustomerID, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.ProductID = 5 AND T1.Price / T1.Amount > 29.00 AND T2.Date = '201208'",
        "compiler_hint": null,
        "reflective_cot": "### Tip:\nAlways ensure you're selecting all required fields in your final result set as per the problem statement. Additionally, be cautious about grouping your results unnecessarily which might lead to missing key columns or misinterpretation of aggregation. When dealing with results that require precise filtering, confirm that the SELECT clause includes all necessary fields to avoid loss of relevant information.",
        "ground_truth_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
        "difficulty": "moderate"
    }
]